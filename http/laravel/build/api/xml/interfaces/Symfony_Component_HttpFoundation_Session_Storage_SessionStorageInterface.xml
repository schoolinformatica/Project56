<?xml version="1.0" encoding="UTF-8"?>
<interface xmlns="http://xml.phpdox.net/src" full="Symfony\Component\HttpFoundation\Session\Storage\SessionStorageInterface" namespace="Symfony\Component\HttpFoundation\Session\Storage" name="SessionStorageInterface" abstract="false" final="false" start="22" end="139">
  <file path="/home/robert/Desktop/Hogeschool/2ejaars Development/DevBOpdrachten/project56/http/laravel/vendor/symfony/http-foundation/Session/Storage" file="SessionStorageInterface.php" realpath="/home/robert/Desktop/Hogeschool/2ejaars Development/DevBOpdrachten/project56/http/laravel/vendor/symfony/http-foundation/Session/Storage/SessionStorageInterface.php" size="4129" time="2015-12-17T18:44:10+00:00" unixtime="1450377850" sha1="40e5d16108cad5ae9390d048e9fa34fc3dee87fb" relative="vendor/symfony/http-foundation/Session/Storage/SessionStorageInterface.php"/>
  <docblock>
    <description compact="StorageInterface."/>
    <author value="Fabien Potencier &lt;fabien@symfony.com&gt;"/>
    <author value="Drak &lt;drak@zikula.org&gt;"/>
  </docblock>
  <method name="start" start="31" end="31" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Starts the session."/>
      <throws description="If something goes wrong starting the session." type="object">
        <type full="\RuntimeException" namespace="" name="RuntimeException"/>
      </throws>
      <return description="True if started." type="object">
        <type full="Symfony\Component\HttpFoundation\Session\Storage\bool" namespace="Symfony\Component\HttpFoundation\Session\Storage" name="bool"/>
      </return>
    </docblock>
  </method>
  <method name="isStarted" start="38" end="38" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Checks if the session is started."/>
      <return description="True if started, false otherwise." type="object">
        <type full="Symfony\Component\HttpFoundation\Session\Storage\bool" namespace="Symfony\Component\HttpFoundation\Session\Storage" name="bool"/>
      </return>
    </docblock>
  </method>
  <method name="getId" start="45" end="45" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the session ID."/>
      <return description="The session ID or empty." type="string"/>
    </docblock>
  </method>
  <method name="setId" start="52" end="52" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Sets the session ID."/>
      <param type="string" variable="$id"/>
    </docblock>
    <parameter name="id" byreference="false" type="{unknown}"/>
  </method>
  <method name="getName" start="59" end="59" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the session name."/>
      <return description="The session name." type="mixed"/>
    </docblock>
  </method>
  <method name="setName" start="66" end="66" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Sets the session name."/>
      <param type="string" variable="$name"/>
    </docblock>
    <parameter name="name" byreference="false" type="{unknown}"/>
  </method>
  <method name="regenerate" start="97" end="97" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Regenerates id that represents this storage.">This method must invoke session_regenerate_id($destroy) unless
this interface is used for a storage object designed for unit
or functional testing where a real PHP session would interfere
with testing.

Note regenerate+destroy should not clear the session data in memory
only delete the session data from persistent storage.

Care: When regenerating the session ID no locking is involved in PHPs
session design. See https://bugs.php.net/bug.php?id=61470 for a discussion.
So you must make sure the regenerated session is saved BEFORE sending the
headers with the new ID. Symfonys HttpKernel offers a listener for this.
See Symfony\Component\HttpKernel\EventListener\SaveSessionListener.
Otherwise session data could get lost again for concurrent requests with the
new ID. One result could be that you get logged out after just logging in.</description>
      <param description="Destroy session when regenerating?" type="object" variable="$destroy">
        <type full="Symfony\Component\HttpFoundation\Session\Storage\bool" namespace="Symfony\Component\HttpFoundation\Session\Storage" name="bool"/>
      </param>
      <param description="Sets the cookie lifetime for the session cookie. A null value" type="int" variable="$lifetime">will leave the system settings unchanged, 0 sets the cookie
                      to expire with browser session. Time is in seconds, and is
                      not a Unix timestamp.</param>
      <return description="True if session regenerated, false if error" type="object">
        <type full="Symfony\Component\HttpFoundation\Session\Storage\bool" namespace="Symfony\Component\HttpFoundation\Session\Storage" name="bool"/>
      </return>
      <throws description="If an error occurs while regenerating this storage" type="object">
        <type full="\RuntimeException" namespace="" name="RuntimeException"/>
      </throws>
    </docblock>
    <parameter name="destroy" byreference="false" type="boolean" default="false"/>
    <parameter name="lifetime" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="save" start="110" end="110" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Force the session to be saved and closed.">This method must invoke session_write_close() unless this interface is
used for a storage object design for unit or functional testing where
a real PHP session would interfere with testing, in which case it
it should actually persist the session data if required.</description>
      <throws description="If the session is saved without being started, or if the session" type="object">is already closed.<type full="\RuntimeException" namespace="" name="RuntimeException"/></throws>
    </docblock>
  </method>
  <method name="clear" start="115" end="115" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Clear all session data in memory."/>
    </docblock>
  </method>
  <method name="getBag" start="126" end="126" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Gets a SessionBagInterface by name."/>
      <param type="string" variable="$name"/>
      <return type="object">
        <type full="Symfony\Component\HttpFoundation\Session\SessionBagInterface" namespace="Symfony\Component\HttpFoundation\Session" name="SessionBagInterface"/>
      </return>
      <throws description="If the bag does not exist" type="object">
        <type full="\InvalidArgumentException" namespace="" name="InvalidArgumentException"/>
      </throws>
    </docblock>
    <parameter name="name" byreference="false" type="{unknown}"/>
  </method>
  <method name="registerBag" start="133" end="133" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Registers a SessionBagInterface for use."/>
      <param type="object" variable="$bag">
        <type full="Symfony\Component\HttpFoundation\Session\SessionBagInterface" namespace="Symfony\Component\HttpFoundation\Session" name="SessionBagInterface"/>
      </param>
    </docblock>
    <parameter name="bag" byreference="false" type="object">
      <type full="Symfony\Component\HttpFoundation\Session\SessionBagInterface" namespace="Symfony\Component\HttpFoundation\Session" name="SessionBagInterface"/>
    </parameter>
  </method>
  <method name="getMetadataBag" start="138" end="138" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <return type="object">
        <type full="Symfony\Component\HttpFoundation\Session\Storage\MetadataBag" namespace="Symfony\Component\HttpFoundation\Session\Storage" name="MetadataBag"/>
      </return>
    </docblock>
  </method>
</interface>
