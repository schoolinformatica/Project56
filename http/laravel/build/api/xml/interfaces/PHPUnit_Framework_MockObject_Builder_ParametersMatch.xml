<?xml version="1.0" encoding="UTF-8"?>
<interface xmlns="http://xml.phpdox.net/src" full="PHPUnit_Framework_MockObject_Builder_ParametersMatch" namespace="" name="PHPUnit_Framework_MockObject_Builder_ParametersMatch" abstract="false" final="false" start="16" end="49">
  <file path="/home/robert/Desktop/Hogeschool/2ejaars Development/DevBOpdrachten/project56/http/laravel/vendor/phpunit/phpunit-mock-objects/src/Framework/MockObject/Builder" file="ParametersMatch.php" realpath="/home/robert/Desktop/Hogeschool/2ejaars Development/DevBOpdrachten/project56/http/laravel/vendor/phpunit/phpunit-mock-objects/src/Framework/MockObject/Builder/ParametersMatch.php" size="1536" time="2015-12-17T18:44:10+00:00" unixtime="1450377850" sha1="64440b6ce1d36a564e8c21ead366d7edf718e084" relative="vendor/phpunit/phpunit-mock-objects/src/Framework/MockObject/Builder/ParametersMatch.php"/>
  <docblock>
    <description compact="Builder interface for parameter matchers."/>
    <since value="Interface available since Release 1.0.0"/>
  </docblock>
  <extends full="PHPUnit_Framework_MockObject_Builder_Match" namespace="" name="PHPUnit_Framework_MockObject_Builder_Match"/>
  <method name="with" start="35" end="35" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Sets the parameters to match for, each parameter to this funtion will be part of match. To perform specific matches or constraints create a new PHPUnit_Framework_Constraint and use it for the parameter.">If the parameter value is not a constraint it will use the
PHPUnit_Framework_Constraint_IsEqual for the value.

Some examples:
&lt;code&gt;
// match first parameter with value 2
$b-&gt;with(2);
// match first parameter with value 'smock' and second identical to 42
$b-&gt;with('smock', new PHPUnit_Framework_Constraint_IsEqual(42));
&lt;/code&gt;</description>
      <return type="object">
        <type full="PHPUnit_Framework_MockObject_Builder_ParametersMatch" namespace="" name="PHPUnit_Framework_MockObject_Builder_ParametersMatch"/>
      </return>
    </docblock>
  </method>
  <method name="withAnyParameters" start="48" end="48" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Sets a matcher which allows any kind of parameters.">Some examples:
&lt;code&gt;
// match any number of parameters
$b-&gt;withAnyParamers();
&lt;/code&gt;</description>
      <return type="object">
        <type full="PHPUnit_Framework_MockObject_Matcher_AnyParameters" namespace="" name="PHPUnit_Framework_MockObject_Matcher_AnyParameters"/>
      </return>
    </docblock>
  </method>
</interface>
