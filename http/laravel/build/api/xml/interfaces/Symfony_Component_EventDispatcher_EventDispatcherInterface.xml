<?xml version="1.0" encoding="UTF-8"?>
<interface xmlns="http://xml.phpdox.net/src" full="Symfony\Component\EventDispatcher\EventDispatcherInterface" namespace="Symfony\Component\EventDispatcher" name="EventDispatcherInterface" abstract="false" final="false" start="21" end="88">
  <file path="/home/robert/Desktop/Hogeschool/2ejaars Development/DevBOpdrachten/project56/http/laravel/vendor/symfony/event-dispatcher" file="EventDispatcherInterface.php" realpath="/home/robert/Desktop/Hogeschool/2ejaars Development/DevBOpdrachten/project56/http/laravel/vendor/symfony/event-dispatcher/EventDispatcherInterface.php" size="2961" time="2015-12-17T18:44:10+00:00" unixtime="1450377850" sha1="cc884ad7427493454cb2d49b3de7363478a54084" relative="vendor/symfony/event-dispatcher/EventDispatcherInterface.php"/>
  <docblock>
    <description compact="The EventDispatcherInterface is the central point of Symfony's event listener system.">Listeners are registered on the manager and events are dispatched through the
manager.</description>
    <author value="Bernhard Schussek &lt;bschussek@gmail.com&gt;"/>
  </docblock>
  <method name="dispatch" start="34" end="34" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Dispatches an event to all registered listeners."/>
      <param description="The name of the event to dispatch. The name of" type="string" variable="$eventName">the event is the name of the method that is
                         invoked on listeners.</param>
      <param description="The event to pass to the event handlers/listeners." type="object" variable="$event">If not supplied, an empty Event instance is created.<type full="Symfony\Component\EventDispatcher\Event" namespace="Symfony\Component\EventDispatcher" name="Event"/></param>
      <return type="object">
        <type full="Symfony\Component\EventDispatcher\Event" namespace="Symfony\Component\EventDispatcher" name="Event"/>
      </return>
    </docblock>
    <parameter name="eventName" byreference="false" type="{unknown}"/>
    <parameter name="event" byreference="false" type="{unknown}" default="" constant="null">
      <type full="Symfony\Component\EventDispatcher\Event" namespace="Symfony\Component\EventDispatcher" name="Event"/>
    </parameter>
  </method>
  <method name="addListener" start="44" end="44" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Adds an event listener that listens on the specified events."/>
      <param description="The event to listen on" type="string" variable="$eventName"/>
      <param description="The listener" type="object" variable="$listener">
        <type full="Symfony\Component\EventDispatcher\callable" namespace="Symfony\Component\EventDispatcher" name="callable"/>
      </param>
      <param description="The higher this value, the earlier an event" type="int" variable="$priority">listener will be triggered in the chain (defaults to 0)</param>
    </docblock>
    <parameter name="eventName" byreference="false" type="{unknown}"/>
    <parameter name="listener" byreference="false" type="{unknown}"/>
    <parameter name="priority" byreference="false" type="integer" default="0"/>
  </method>
  <method name="addSubscriber" start="54" end="54" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Adds an event subscriber.">The subscriber is asked for all the events he is
interested in and added as a listener for these events.</description>
      <param description="The subscriber." type="object" variable="$subscriber">
        <type full="Symfony\Component\EventDispatcher\EventSubscriberInterface" namespace="Symfony\Component\EventDispatcher" name="EventSubscriberInterface"/>
      </param>
    </docblock>
    <parameter name="subscriber" byreference="false" type="object">
      <type full="Symfony\Component\EventDispatcher\EventSubscriberInterface" namespace="Symfony\Component\EventDispatcher" name="EventSubscriberInterface"/>
    </parameter>
  </method>
  <method name="removeListener" start="62" end="62" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Removes an event listener from the specified events."/>
      <param description="The event to remove a listener from" type="string" variable="$eventName"/>
      <param description="The listener to remove" type="object" variable="$listener">
        <type full="Symfony\Component\EventDispatcher\callable" namespace="Symfony\Component\EventDispatcher" name="callable"/>
      </param>
    </docblock>
    <parameter name="eventName" byreference="false" type="{unknown}"/>
    <parameter name="listener" byreference="false" type="{unknown}"/>
  </method>
  <method name="removeSubscriber" start="69" end="69" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Removes an event subscriber."/>
      <param description="The subscriber" type="object" variable="$subscriber">
        <type full="Symfony\Component\EventDispatcher\EventSubscriberInterface" namespace="Symfony\Component\EventDispatcher" name="EventSubscriberInterface"/>
      </param>
    </docblock>
    <parameter name="subscriber" byreference="false" type="object">
      <type full="Symfony\Component\EventDispatcher\EventSubscriberInterface" namespace="Symfony\Component\EventDispatcher" name="EventSubscriberInterface"/>
    </parameter>
  </method>
  <method name="getListeners" start="78" end="78" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Gets the listeners of a specific event or all listeners sorted by descending priority."/>
      <param description="The name of the event" type="string" variable="$eventName"/>
      <return description="The event listeners for the specified event, or all event listeners by event name" type="array"/>
    </docblock>
    <parameter name="eventName" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="hasListeners" start="87" end="87" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Checks whether an event has any registered listeners."/>
      <param description="The name of the event" type="string" variable="$eventName"/>
      <return description="true if the specified event has any listeners, false otherwise" type="object">
        <type full="Symfony\Component\EventDispatcher\bool" namespace="Symfony\Component\EventDispatcher" name="bool"/>
      </return>
    </docblock>
    <parameter name="eventName" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
</interface>
