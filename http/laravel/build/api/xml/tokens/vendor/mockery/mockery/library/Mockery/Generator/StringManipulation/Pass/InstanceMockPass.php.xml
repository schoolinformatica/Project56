<?xml version="1.0"?>
<source xmlns="http://xml.phpdox.net/token">
  <file xmlns="http://xml.phpdox.net/src" path="/home/robert/Desktop/Hogeschool/2ejaars Development/DevBOpdrachten/project56/http/laravel/vendor/mockery/mockery/library/Mockery/Generator/StringManipulation/Pass" file="InstanceMockPass.php" realpath="/home/robert/Desktop/Hogeschool/2ejaars Development/DevBOpdrachten/project56/http/laravel/vendor/mockery/mockery/library/Mockery/Generator/StringManipulation/Pass/InstanceMockPass.php" size="1876" time="2015-12-17T18:44:09+00:00" unixtime="1450377849" sha1="8f60341c08289d0bc62967934dd76a313609b898" relative="vendor/mockery/mockery/library/Mockery/Generator/StringManipulation/Pass/InstanceMockPass.php"/>
  <line no="1">
    <token name="T_OPEN_TAG">&lt;?php</token>
  </line>
  <line no="2"/>
  <line no="3">
    <token name="T_NAMESPACE">namespace</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">Mockery</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Generator</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">StringManipulation</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Pass</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="4"/>
  <line no="5">
    <token name="T_USE">use</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">Mockery</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Generator</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">MockConfiguration</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="6"/>
  <line no="7">
    <token name="T_CLASS">class</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">InstanceMockPass</token>
  </line>
  <line no="8">
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="9">
    <token name="T_WHITESPACE">    </token>
    <token name="T_CONST">const</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">INSTANCE_MOCK_CODE</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_START_HEREDOC">&lt;&lt;&lt;MOCK</token>
  </line>
  <line no="10"/>
  <line no="11">
    <token name="T_ENCAPSED_AND_WHITESPACE">    protected \$_mockery_ignoreVerification = true;</token>
  </line>
  <line no="12"/>
  <line no="13">
    <token name="T_ENCAPSED_AND_WHITESPACE">    public function __construct()</token>
  </line>
  <line no="14">
    <token name="T_ENCAPSED_AND_WHITESPACE">    {</token>
  </line>
  <line no="15">
    <token name="T_ENCAPSED_AND_WHITESPACE">        \$this-&gt;_mockery_ignoreVerification = false;</token>
  </line>
  <line no="16">
    <token name="T_ENCAPSED_AND_WHITESPACE">        \$associatedRealObject = \Mockery::fetchMock(__CLASS__);</token>
  </line>
  <line no="17"/>
  <line no="18">
    <token name="T_ENCAPSED_AND_WHITESPACE">        foreach (get_object_vars(\$this) as \$attr =&gt; \$val) {</token>
  </line>
  <line no="19">
    <token name="T_ENCAPSED_AND_WHITESPACE">            if (\$attr !== "_mockery_ignoreVerification" &amp;&amp; \$attr !== "_mockery_expectations") {</token>
  </line>
  <line no="20">
    <token name="T_ENCAPSED_AND_WHITESPACE">                \$this-&gt;\$attr = \$associatedRealObject-&gt;\$attr;</token>
  </line>
  <line no="21">
    <token name="T_ENCAPSED_AND_WHITESPACE">            }</token>
  </line>
  <line no="22">
    <token name="T_ENCAPSED_AND_WHITESPACE">        }</token>
  </line>
  <line no="23"/>
  <line no="24">
    <token name="T_ENCAPSED_AND_WHITESPACE">        \$directors = \$associatedRealObject-&gt;mockery_getExpectations();</token>
  </line>
  <line no="25">
    <token name="T_ENCAPSED_AND_WHITESPACE">        foreach (\$directors as \$method=&gt;\$director) {</token>
  </line>
  <line no="26">
    <token name="T_ENCAPSED_AND_WHITESPACE">            \$expectations = \$director-&gt;getExpectations();</token>
  </line>
  <line no="27">
    <token name="T_ENCAPSED_AND_WHITESPACE">            // get the director method needed</token>
  </line>
  <line no="28">
    <token name="T_ENCAPSED_AND_WHITESPACE">            \$existingDirector = \$this-&gt;mockery_getExpectationsFor(\$method);</token>
  </line>
  <line no="29">
    <token name="T_ENCAPSED_AND_WHITESPACE">            if (!\$existingDirector) {</token>
  </line>
  <line no="30">
    <token name="T_ENCAPSED_AND_WHITESPACE">                \$existingDirector = new \Mockery\ExpectationDirector(\$method, \$this);</token>
  </line>
  <line no="31">
    <token name="T_ENCAPSED_AND_WHITESPACE">                \$this-&gt;mockery_setExpectationsFor(\$method, \$existingDirector);</token>
  </line>
  <line no="32">
    <token name="T_ENCAPSED_AND_WHITESPACE">            }</token>
  </line>
  <line no="33">
    <token name="T_ENCAPSED_AND_WHITESPACE">            foreach (\$expectations as \$expectation) {</token>
  </line>
  <line no="34">
    <token name="T_ENCAPSED_AND_WHITESPACE">                \$clonedExpectation = clone \$expectation;</token>
  </line>
  <line no="35">
    <token name="T_ENCAPSED_AND_WHITESPACE">                \$existingDirector-&gt;addExpectation(\$clonedExpectation);</token>
  </line>
  <line no="36">
    <token name="T_ENCAPSED_AND_WHITESPACE">            }</token>
  </line>
  <line no="37">
    <token name="T_ENCAPSED_AND_WHITESPACE">        }</token>
  </line>
  <line no="38">
    <token name="T_ENCAPSED_AND_WHITESPACE">        \Mockery::getContainer()-&gt;rememberMock(\$this);</token>
  </line>
  <line no="39">
    <token name="T_ENCAPSED_AND_WHITESPACE">    }</token>
  </line>
  <line no="40">
    <token name="T_END_HEREDOC">MOCK</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="41"/>
  <line no="42">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">apply</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$code</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">MockConfiguration</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$config</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="43">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="44">
    <token name="T_WHITESPACE">        </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$config</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">isInstanceMock</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="45">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$code</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">appendToClass</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$code</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">INSTANCE_MOCK_CODE</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="46">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="47"/>
  <line no="48">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$code</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="49">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="50"/>
  <line no="51">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PROTECTED">protected</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">appendToClass</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$class</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$code</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="52">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="53">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$lastBrace</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">strrpos</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$class</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">"}"</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="54">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$class</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">substr</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$class</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_LNUMBER">0</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$lastBrace</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_DOT">.</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$code</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_DOT">.</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">"\n    }\n"</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="55">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$class</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="56">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="57">
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="58"/>
</source>
