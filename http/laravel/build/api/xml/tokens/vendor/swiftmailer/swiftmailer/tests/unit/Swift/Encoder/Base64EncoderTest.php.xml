<?xml version="1.0"?>
<source xmlns="http://xml.phpdox.net/token">
  <file xmlns="http://xml.phpdox.net/src" path="/home/robert/Desktop/Hogeschool/2ejaars Development/DevBOpdrachten/project56/http/laravel/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Encoder" file="Base64EncoderTest.php" realpath="/home/robert/Desktop/Hogeschool/2ejaars Development/DevBOpdrachten/project56/http/laravel/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Encoder/Base64EncoderTest.php" size="6377" time="2015-12-17T18:44:10+00:00" unixtime="1450377850" sha1="5f12a37a2a43e0c82b3f412c0c586fa8e4e58ecc" relative="vendor/swiftmailer/swiftmailer/tests/unit/Swift/Encoder/Base64EncoderTest.php"/>
  <line no="1">
    <token name="T_OPEN_TAG">&lt;?php</token>
  </line>
  <line no="2"/>
  <line no="3">
    <token name="T_CLASS">class</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">Swift_Encoder_Base64EncoderTest</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_EXTENDS">extends</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">PHPUnit_Framework_TestCase</token>
  </line>
  <line no="4">
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="5">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PRIVATE">private</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$_encoder</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="6"/>
  <line no="7">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">setUp</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="8">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="9">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_encoder</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">Swift_Encoder_Base64Encoder</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="10">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="11"/>
  <line no="12">
    <token name="T_WHITESPACE">    </token>
    <token name="T_COMMENT">/*</token>
  </line>
  <line no="13">
    <token name="T_COMMENT">    There's really no point in testing the entire base64 encoding to the</token>
  </line>
  <line no="14">
    <token name="T_COMMENT">    level QP encoding has been tested.  base64_encode() has been in PHP for</token>
  </line>
  <line no="15">
    <token name="T_COMMENT">    years.</token>
  </line>
  <line no="16">
    <token name="T_COMMENT">    */</token>
  </line>
  <line no="17"/>
  <line no="18">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">testInputOutputRatioIs3to4Bytes</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="19">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="20">
    <token name="T_WHITESPACE">        </token>
    <token name="T_COMMENT">/*</token>
  </line>
  <line no="21">
    <token name="T_COMMENT">        RFC 2045, 6.8</token>
  </line>
  <line no="22"/>
  <line no="23">
    <token name="T_COMMENT">         The encoding process represents 24-bit groups of input bits as output</token>
  </line>
  <line no="24">
    <token name="T_COMMENT">         strings of 4 encoded characters.  Proceeding from left to right, a</token>
  </line>
  <line no="25">
    <token name="T_COMMENT">         24-bit input group is formed by concatenating 3 8bit input groups.</token>
  </line>
  <line no="26">
    <token name="T_COMMENT">         These 24 bits are then treated as 4 concatenated 6-bit groups, each</token>
  </line>
  <line no="27">
    <token name="T_COMMENT">         of which is translated into a single digit in the base64 alphabet.</token>
  </line>
  <line no="28">
    <token name="T_COMMENT">         */</token>
  </line>
  <line no="29"/>
  <line no="30">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">assertEquals</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="31">
    <token name="T_WHITESPACE">            </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'MTIz'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_encoder</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">encodeString</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'123'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="32">
    <token name="T_WHITESPACE">            </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'%s: 3 bytes of input should yield 4 bytes of output'</token>
  </line>
  <line no="33">
    <token name="T_WHITESPACE">            </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="34">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">assertEquals</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="35">
    <token name="T_WHITESPACE">            </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'MTIzNDU2'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_encoder</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">encodeString</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'123456'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="36">
    <token name="T_WHITESPACE">            </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'%s: 6 bytes in input should yield 8 bytes of output'</token>
  </line>
  <line no="37">
    <token name="T_WHITESPACE">            </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="38">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">assertEquals</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="39">
    <token name="T_WHITESPACE">            </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'MTIzNDU2Nzg5'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_encoder</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">encodeString</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'123456789'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="40">
    <token name="T_WHITESPACE">            </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'%s: 9 bytes in input should yield 12 bytes of output'</token>
  </line>
  <line no="41">
    <token name="T_WHITESPACE">            </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="42">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="43"/>
  <line no="44">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">testPadLength</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="45">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="46">
    <token name="T_WHITESPACE">        </token>
    <token name="T_COMMENT">/*</token>
  </line>
  <line no="47">
    <token name="T_COMMENT">        RFC 2045, 6.8</token>
  </line>
  <line no="48"/>
  <line no="49">
    <token name="T_COMMENT">       Special processing is performed if fewer than 24 bits are available</token>
  </line>
  <line no="50">
    <token name="T_COMMENT">       at the end of the data being encoded.  A full encoding quantum is</token>
  </line>
  <line no="51">
    <token name="T_COMMENT">       always completed at the end of a body.  When fewer than 24 input bits</token>
  </line>
  <line no="52">
    <token name="T_COMMENT">       are available in an input group, zero bits are added (on the right)</token>
  </line>
  <line no="53">
    <token name="T_COMMENT">       to form an integral number of 6-bit groups.  Padding at the end of</token>
  </line>
  <line no="54">
    <token name="T_COMMENT">       the data is performed using the "=" character.  Since all base64</token>
  </line>
  <line no="55">
    <token name="T_COMMENT">       input is an integral number of octets, only the following cases can</token>
  </line>
  <line no="56">
    <token name="T_COMMENT">       arise: (1) the final quantum of encoding input is an integral</token>
  </line>
  <line no="57">
    <token name="T_COMMENT">       multiple of 24 bits; here, the final unit of encoded output will be</token>
  </line>
  <line no="58">
    <token name="T_COMMENT">       an integral multiple of 4 characters with no "=" padding, (2) the</token>
  </line>
  <line no="59">
    <token name="T_COMMENT">       final quantum of encoding input is exactly 8 bits; here, the final</token>
  </line>
  <line no="60">
    <token name="T_COMMENT">       unit of encoded output will be two characters followed by two "="</token>
  </line>
  <line no="61">
    <token name="T_COMMENT">       padding characters, or (3) the final quantum of encoding input is</token>
  </line>
  <line no="62">
    <token name="T_COMMENT">       exactly 16 bits; here, the final unit of encoded output will be three</token>
  </line>
  <line no="63">
    <token name="T_COMMENT">       characters followed by one "=" padding character.</token>
  </line>
  <line no="64">
    <token name="T_COMMENT">       */</token>
  </line>
  <line no="65"/>
  <line no="66">
    <token name="T_WHITESPACE">        </token>
    <token name="T_FOR">for</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$i</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_LNUMBER">0</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$i</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_LT">&lt;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_LNUMBER">30</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_INC">++</token>
    <token name="T_VARIABLE">$i</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="67">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$input</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">pack</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'C'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">rand</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_LNUMBER">0</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_LNUMBER">255</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="68">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">assertRegExp</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="69">
    <token name="T_WHITESPACE">                </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'~^[a-zA-Z0-9/\+]{2}==$~'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_encoder</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">encodeString</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$input</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="70">
    <token name="T_WHITESPACE">                </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'%s: A single byte should have 2 bytes of padding'</token>
  </line>
  <line no="71">
    <token name="T_WHITESPACE">                </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="72">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="73"/>
  <line no="74">
    <token name="T_WHITESPACE">        </token>
    <token name="T_FOR">for</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$i</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_LNUMBER">0</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$i</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_LT">&lt;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_LNUMBER">30</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_INC">++</token>
    <token name="T_VARIABLE">$i</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="75">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$input</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">pack</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'C*'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">rand</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_LNUMBER">0</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_LNUMBER">255</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">rand</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_LNUMBER">0</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_LNUMBER">255</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="76">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">assertRegExp</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="77">
    <token name="T_WHITESPACE">                </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'~^[a-zA-Z0-9/\+]{3}=$~'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_encoder</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">encodeString</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$input</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="78">
    <token name="T_WHITESPACE">                </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'%s: Two bytes should have 1 byte of padding'</token>
  </line>
  <line no="79">
    <token name="T_WHITESPACE">                </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="80">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="81"/>
  <line no="82">
    <token name="T_WHITESPACE">        </token>
    <token name="T_FOR">for</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$i</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_LNUMBER">0</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$i</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_LT">&lt;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_LNUMBER">30</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_INC">++</token>
    <token name="T_VARIABLE">$i</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="83">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$input</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">pack</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'C*'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">rand</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_LNUMBER">0</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_LNUMBER">255</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">rand</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_LNUMBER">0</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_LNUMBER">255</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">rand</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_LNUMBER">0</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_LNUMBER">255</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="84">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">assertRegExp</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="85">
    <token name="T_WHITESPACE">                </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'~^[a-zA-Z0-9/\+]{4}$~'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_encoder</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">encodeString</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$input</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="86">
    <token name="T_WHITESPACE">                </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'%s: Three bytes should have no padding'</token>
  </line>
  <line no="87">
    <token name="T_WHITESPACE">                </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="88">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="89">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="90"/>
  <line no="91">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">testMaximumLineLengthIs76Characters</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="92">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="93">
    <token name="T_WHITESPACE">        </token>
    <token name="T_COMMENT">/*</token>
  </line>
  <line no="94">
    <token name="T_COMMENT">         The encoded output stream must be represented in lines of no more</token>
  </line>
  <line no="95">
    <token name="T_COMMENT">         than 76 characters each.  All line breaks or other characters not</token>
  </line>
  <line no="96">
    <token name="T_COMMENT">         found in Table 1 must be ignored by decoding software.</token>
  </line>
  <line no="97">
    <token name="T_COMMENT">         */</token>
  </line>
  <line no="98"/>
  <line no="99">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$input</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
  </line>
  <line no="100">
    <token name="T_WHITESPACE">        </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'abcdefghijklmnopqrstuvwxyz'</token>
    <token name="T_PHPDOX_DOT">.</token>
  </line>
  <line no="101">
    <token name="T_WHITESPACE">        </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'ABCDEFGHIJKLMNOPQRSTUVWXYZ'</token>
    <token name="T_PHPDOX_DOT">.</token>
  </line>
  <line no="102">
    <token name="T_WHITESPACE">        </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'1234567890'</token>
    <token name="T_PHPDOX_DOT">.</token>
  </line>
  <line no="103">
    <token name="T_WHITESPACE">        </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'abcdefghijklmnopqrstuvwxyz'</token>
    <token name="T_PHPDOX_DOT">.</token>
  </line>
  <line no="104">
    <token name="T_WHITESPACE">        </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'ABCDEFGHIJKLMNOPQRSTUVWXYZ'</token>
    <token name="T_PHPDOX_DOT">.</token>
  </line>
  <line no="105">
    <token name="T_WHITESPACE">        </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'1234567890'</token>
    <token name="T_PHPDOX_DOT">.</token>
  </line>
  <line no="106">
    <token name="T_WHITESPACE">        </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'ABCDEFGHIJKLMNOPQRSTUVWXYZ'</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="107"/>
  <line no="108">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$output</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
  </line>
  <line no="109">
    <token name="T_WHITESPACE">        </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpBQk'</token>
    <token name="T_PHPDOX_DOT">.</token>
    <token name="T_COMMENT">//38</token>
  </line>
  <line no="110">
    <token name="T_WHITESPACE">        </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'NERUZHSElKS0xNTk9QUVJTVFVWV1hZWjEyMzQ1'</token>
    <token name="T_PHPDOX_DOT">.</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">"\r\n"</token>
    <token name="T_PHPDOX_DOT">.</token>
    <token name="T_COMMENT">//76 *</token>
  </line>
  <line no="111">
    <token name="T_WHITESPACE">        </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'Njc4OTBhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3'</token>
    <token name="T_PHPDOX_DOT">.</token>
    <token name="T_COMMENT">//38</token>
  </line>
  <line no="112">
    <token name="T_WHITESPACE">        </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'h5ekFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFla'</token>
    <token name="T_PHPDOX_DOT">.</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">"\r\n"</token>
    <token name="T_PHPDOX_DOT">.</token>
    <token name="T_COMMENT">//76 *</token>
  </line>
  <line no="113">
    <token name="T_WHITESPACE">        </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'MTIzNDU2Nzg5MEFCQ0RFRkdISUpLTE1OT1BRUl'</token>
    <token name="T_PHPDOX_DOT">.</token>
    <token name="T_COMMENT">//38</token>
  </line>
  <line no="114">
    <token name="T_WHITESPACE">        </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'NUVVZXWFla'</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
    <token name="T_WHITESPACE">                                       </token>
    <token name="T_COMMENT">//48</token>
  </line>
  <line no="115"/>
  <line no="116">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">assertEquals</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="117">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$output</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_encoder</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">encodeString</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$input</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="118">
    <token name="T_WHITESPACE">            </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'%s: Lines should be no more than 76 characters'</token>
  </line>
  <line no="119">
    <token name="T_WHITESPACE">            </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="120">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="121"/>
  <line no="122">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">testMaximumLineLengthCanBeSpecified</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="123">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="124">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$input</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
  </line>
  <line no="125">
    <token name="T_WHITESPACE">        </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'abcdefghijklmnopqrstuvwxyz'</token>
    <token name="T_PHPDOX_DOT">.</token>
  </line>
  <line no="126">
    <token name="T_WHITESPACE">        </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'ABCDEFGHIJKLMNOPQRSTUVWXYZ'</token>
    <token name="T_PHPDOX_DOT">.</token>
  </line>
  <line no="127">
    <token name="T_WHITESPACE">        </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'1234567890'</token>
    <token name="T_PHPDOX_DOT">.</token>
  </line>
  <line no="128">
    <token name="T_WHITESPACE">        </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'abcdefghijklmnopqrstuvwxyz'</token>
    <token name="T_PHPDOX_DOT">.</token>
  </line>
  <line no="129">
    <token name="T_WHITESPACE">        </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'ABCDEFGHIJKLMNOPQRSTUVWXYZ'</token>
    <token name="T_PHPDOX_DOT">.</token>
  </line>
  <line no="130">
    <token name="T_WHITESPACE">        </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'1234567890'</token>
    <token name="T_PHPDOX_DOT">.</token>
  </line>
  <line no="131">
    <token name="T_WHITESPACE">        </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'ABCDEFGHIJKLMNOPQRSTUVWXYZ'</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="132"/>
  <line no="133">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$output</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
  </line>
  <line no="134">
    <token name="T_WHITESPACE">        </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpBQk'</token>
    <token name="T_PHPDOX_DOT">.</token>
    <token name="T_COMMENT">//38</token>
  </line>
  <line no="135">
    <token name="T_WHITESPACE">        </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'NERUZHSElKS0'</token>
    <token name="T_PHPDOX_DOT">.</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">"\r\n"</token>
    <token name="T_PHPDOX_DOT">.</token>
    <token name="T_COMMENT">//50 *</token>
  </line>
  <line no="136">
    <token name="T_WHITESPACE">        </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'xNTk9QUVJTVFVWV1hZWjEyMzQ1Njc4OTBhYmNk'</token>
    <token name="T_PHPDOX_DOT">.</token>
    <token name="T_COMMENT">//38</token>
  </line>
  <line no="137">
    <token name="T_WHITESPACE">        </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'ZWZnaGlqa2xt'</token>
    <token name="T_PHPDOX_DOT">.</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">"\r\n"</token>
    <token name="T_PHPDOX_DOT">.</token>
    <token name="T_COMMENT">//50 *</token>
  </line>
  <line no="138">
    <token name="T_WHITESPACE">        </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'bm9wcXJzdHV2d3h5ekFCQ0RFRkdISUpLTE1OT1'</token>
    <token name="T_PHPDOX_DOT">.</token>
    <token name="T_COMMENT">//38</token>
  </line>
  <line no="139">
    <token name="T_WHITESPACE">        </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'BRUlNUVVZXWF'</token>
    <token name="T_PHPDOX_DOT">.</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">"\r\n"</token>
    <token name="T_PHPDOX_DOT">.</token>
    <token name="T_COMMENT">//50 *</token>
  </line>
  <line no="140">
    <token name="T_WHITESPACE">        </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'laMTIzNDU2Nzg5MEFCQ0RFRkdISUpLTE1OT1BR'</token>
    <token name="T_PHPDOX_DOT">.</token>
    <token name="T_COMMENT">//38</token>
  </line>
  <line no="141">
    <token name="T_WHITESPACE">        </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'UlNUVVZXWFla'</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
    <token name="T_WHITESPACE">                                     </token>
    <token name="T_COMMENT">//50 *</token>
  </line>
  <line no="142"/>
  <line no="143">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">assertEquals</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="144">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$output</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_encoder</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">encodeString</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$input</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_LNUMBER">0</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_LNUMBER">50</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="145">
    <token name="T_WHITESPACE">            </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'%s: Lines should be no more than 100 characters'</token>
  </line>
  <line no="146">
    <token name="T_WHITESPACE">            </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="147">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="148"/>
  <line no="149">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">testFirstLineLengthCanBeDifferent</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="150">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="151">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$input</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
  </line>
  <line no="152">
    <token name="T_WHITESPACE">        </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'abcdefghijklmnopqrstuvwxyz'</token>
    <token name="T_PHPDOX_DOT">.</token>
  </line>
  <line no="153">
    <token name="T_WHITESPACE">        </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'ABCDEFGHIJKLMNOPQRSTUVWXYZ'</token>
    <token name="T_PHPDOX_DOT">.</token>
  </line>
  <line no="154">
    <token name="T_WHITESPACE">        </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'1234567890'</token>
    <token name="T_PHPDOX_DOT">.</token>
  </line>
  <line no="155">
    <token name="T_WHITESPACE">        </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'abcdefghijklmnopqrstuvwxyz'</token>
    <token name="T_PHPDOX_DOT">.</token>
  </line>
  <line no="156">
    <token name="T_WHITESPACE">        </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'ABCDEFGHIJKLMNOPQRSTUVWXYZ'</token>
    <token name="T_PHPDOX_DOT">.</token>
  </line>
  <line no="157">
    <token name="T_WHITESPACE">        </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'1234567890'</token>
    <token name="T_PHPDOX_DOT">.</token>
  </line>
  <line no="158">
    <token name="T_WHITESPACE">        </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'ABCDEFGHIJKLMNOPQRSTUVWXYZ'</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="159"/>
  <line no="160">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$output</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
  </line>
  <line no="161">
    <token name="T_WHITESPACE">        </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpBQk'</token>
    <token name="T_PHPDOX_DOT">.</token>
    <token name="T_COMMENT">//38</token>
  </line>
  <line no="162">
    <token name="T_WHITESPACE">        </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'NERUZHSElKS0xNTk9QU'</token>
    <token name="T_PHPDOX_DOT">.</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">"\r\n"</token>
    <token name="T_PHPDOX_DOT">.</token>
    <token name="T_COMMENT">//57 *</token>
  </line>
  <line no="163">
    <token name="T_WHITESPACE">        </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'VJTVFVWV1hZWjEyMzQ1Njc4OTBhYmNkZWZnaGl'</token>
    <token name="T_PHPDOX_DOT">.</token>
    <token name="T_COMMENT">//38</token>
  </line>
  <line no="164">
    <token name="T_WHITESPACE">        </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'qa2xtbm9wcXJzdHV2d3h5ekFCQ0RFRkdISUpLT'</token>
    <token name="T_PHPDOX_DOT">.</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">"\r\n"</token>
    <token name="T_PHPDOX_DOT">.</token>
    <token name="T_COMMENT">//76 *</token>
  </line>
  <line no="165">
    <token name="T_WHITESPACE">        </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'E1OT1BRUlNUVVZXWFlaMTIzNDU2Nzg5MEFCQ0R'</token>
    <token name="T_PHPDOX_DOT">.</token>
    <token name="T_COMMENT">//38</token>
  </line>
  <line no="166">
    <token name="T_WHITESPACE">        </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'FRkdISUpLTE1OT1BRUlNUVVZXWFla'</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
    <token name="T_WHITESPACE">                    </token>
    <token name="T_COMMENT">//67</token>
  </line>
  <line no="167"/>
  <line no="168">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">assertEquals</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="169">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$output</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_encoder</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">encodeString</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$input</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_LNUMBER">19</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="170">
    <token name="T_WHITESPACE">            </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'%s: First line offset is 19 so first line should be 57 chars long'</token>
  </line>
  <line no="171">
    <token name="T_WHITESPACE">            </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="172">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="173">
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="174"/>
</source>
