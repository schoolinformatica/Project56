<?xml version="1.0"?>
<source xmlns="http://xml.phpdox.net/token">
  <file xmlns="http://xml.phpdox.net/src" path="/home/robert/Desktop/Hogeschool/2ejaars Development/DevBOpdrachten/project56/http/laravel/vendor/psy/psysh/test/Psy/Test/CodeCleaner" file="ValidFunctionNamePassTest.php" realpath="/home/robert/Desktop/Hogeschool/2ejaars Development/DevBOpdrachten/project56/http/laravel/vendor/psy/psysh/test/Psy/Test/CodeCleaner/ValidFunctionNamePassTest.php" size="3974" time="2015-12-17T18:44:10+00:00" unixtime="1450377850" sha1="d29ada862e86ce5dde3672ab6564ed32d626b18b" relative="vendor/psy/psysh/test/Psy/Test/CodeCleaner/ValidFunctionNamePassTest.php"/>
  <line no="1">
    <token name="T_OPEN_TAG">&lt;?php</token>
  </line>
  <line no="2"/>
  <line no="3">
    <token name="T_COMMENT">/*</token>
  </line>
  <line no="4">
    <token name="T_COMMENT"> * This file is part of Psy Shell.</token>
  </line>
  <line no="5">
    <token name="T_COMMENT"> *</token>
  </line>
  <line no="6">
    <token name="T_COMMENT"> * (c) 2012-2015 Justin Hileman</token>
  </line>
  <line no="7">
    <token name="T_COMMENT"> *</token>
  </line>
  <line no="8">
    <token name="T_COMMENT"> * For the full copyright and license information, please view the LICENSE</token>
  </line>
  <line no="9">
    <token name="T_COMMENT"> * file that was distributed with this source code.</token>
  </line>
  <line no="10">
    <token name="T_COMMENT"> */</token>
  </line>
  <line no="11"/>
  <line no="12">
    <token name="T_NAMESPACE">namespace</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">Psy</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Test</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">CodeCleaner</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="13"/>
  <line no="14">
    <token name="T_USE">use</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">Psy</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">CodeCleaner</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">ValidFunctionNamePass</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="15"/>
  <line no="16">
    <token name="T_CLASS">class</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">ValidFunctionNamePassTest</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_EXTENDS">extends</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">CodeCleanerTestCase</token>
  </line>
  <line no="17">
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="18">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">setUp</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="19">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="20">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">setPass</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">ValidFunctionNamePass</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="21">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="22"/>
  <line no="23">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="24">
    <token name="T_DOC_COMMENT">     * @dataProvider getInvalidFunctions</token>
  </line>
  <line no="25">
    <token name="T_DOC_COMMENT">     * @expectedException \Psy\Exception\FatalErrorException</token>
  </line>
  <line no="26">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="27">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">testProcessInvalidFunctionCallsAndDeclarations</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$code</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="28">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="29">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$stmts</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">parse</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$code</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="30">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">traverse</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$stmts</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="31">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="32"/>
  <line no="33">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">getInvalidFunctions</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="34">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="35">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_ARRAY">array</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="36">
    <token name="T_WHITESPACE">            </token>
    <token name="T_COMMENT">// function declarations</token>
  </line>
  <line no="37">
    <token name="T_WHITESPACE">            </token>
    <token name="T_ARRAY">array</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'function array_merge() {}'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="38">
    <token name="T_WHITESPACE">            </token>
    <token name="T_ARRAY">array</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'function Array_Merge() {}'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="39">
    <token name="T_WHITESPACE">            </token>
    <token name="T_ARRAY">array</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'</token>
  </line>
  <line no="40">
    <token name="T_CONSTANT_ENCAPSED_STRING">                function psy_test_codecleaner_validfunctionnamepass_alpha() {}</token>
  </line>
  <line no="41">
    <token name="T_CONSTANT_ENCAPSED_STRING">                function psy_test_codecleaner_validfunctionnamepass_alpha() {}</token>
  </line>
  <line no="42">
    <token name="T_CONSTANT_ENCAPSED_STRING">            '</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="43">
    <token name="T_WHITESPACE">            </token>
    <token name="T_ARRAY">array</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'</token>
  </line>
  <line no="44">
    <token name="T_CONSTANT_ENCAPSED_STRING">                namespace Psy\\Test\\CodeCleaner\\ValidFunctionNamePass {</token>
  </line>
  <line no="45">
    <token name="T_CONSTANT_ENCAPSED_STRING">                    function beta() {}</token>
  </line>
  <line no="46">
    <token name="T_CONSTANT_ENCAPSED_STRING">                }</token>
  </line>
  <line no="47">
    <token name="T_CONSTANT_ENCAPSED_STRING">                namespace Psy\\Test\\CodeCleaner\\ValidFunctionNamePass {</token>
  </line>
  <line no="48">
    <token name="T_CONSTANT_ENCAPSED_STRING">                    function beta() {}</token>
  </line>
  <line no="49">
    <token name="T_CONSTANT_ENCAPSED_STRING">                }</token>
  </line>
  <line no="50">
    <token name="T_CONSTANT_ENCAPSED_STRING">            '</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="51"/>
  <line no="52">
    <token name="T_WHITESPACE">            </token>
    <token name="T_COMMENT">// function calls</token>
  </line>
  <line no="53">
    <token name="T_WHITESPACE">            </token>
    <token name="T_ARRAY">array</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'psy_test_codecleaner_validfunctionnamepass_gamma()'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="54">
    <token name="T_WHITESPACE">            </token>
    <token name="T_ARRAY">array</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'</token>
  </line>
  <line no="55">
    <token name="T_CONSTANT_ENCAPSED_STRING">                namespace Psy\\Test\\CodeCleaner\\ValidFunctionNamePass {</token>
  </line>
  <line no="56">
    <token name="T_CONSTANT_ENCAPSED_STRING">                    delta();</token>
  </line>
  <line no="57">
    <token name="T_CONSTANT_ENCAPSED_STRING">                }</token>
  </line>
  <line no="58">
    <token name="T_CONSTANT_ENCAPSED_STRING">            '</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="59"/>
  <line no="60">
    <token name="T_WHITESPACE">            </token>
    <token name="T_COMMENT">// recursion</token>
  </line>
  <line no="61">
    <token name="T_WHITESPACE">            </token>
    <token name="T_ARRAY">array</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'function a() { a(); } function a() {}'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="62">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="63">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="64"/>
  <line no="65">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="66">
    <token name="T_DOC_COMMENT">     * @dataProvider getValidFunctions</token>
  </line>
  <line no="67">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="68">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">testProcessValidFunctionCallsAndDeclarations</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$code</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="69">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="70">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$stmts</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">parse</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$code</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="71">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">traverse</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$stmts</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="72">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="73"/>
  <line no="74">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">getValidFunctions</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="75">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="76">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_ARRAY">array</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="77">
    <token name="T_WHITESPACE">            </token>
    <token name="T_ARRAY">array</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'function psy_test_codecleaner_validfunctionnamepass_epsilon() {}'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="78">
    <token name="T_WHITESPACE">            </token>
    <token name="T_ARRAY">array</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'</token>
  </line>
  <line no="79">
    <token name="T_CONSTANT_ENCAPSED_STRING">                namespace Psy\\Test\\CodeCleaner\\ValidFunctionNamePass {</token>
  </line>
  <line no="80">
    <token name="T_CONSTANT_ENCAPSED_STRING">                    function zeta() {}</token>
  </line>
  <line no="81">
    <token name="T_CONSTANT_ENCAPSED_STRING">                }</token>
  </line>
  <line no="82">
    <token name="T_CONSTANT_ENCAPSED_STRING">            '</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="83">
    <token name="T_WHITESPACE">            </token>
    <token name="T_ARRAY">array</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'</token>
  </line>
  <line no="84">
    <token name="T_CONSTANT_ENCAPSED_STRING">                namespace {</token>
  </line>
  <line no="85">
    <token name="T_CONSTANT_ENCAPSED_STRING">                    function psy_test_codecleaner_validfunctionnamepass_eta() {}</token>
  </line>
  <line no="86">
    <token name="T_CONSTANT_ENCAPSED_STRING">                }</token>
  </line>
  <line no="87">
    <token name="T_CONSTANT_ENCAPSED_STRING">                namespace Psy\\Test\\CodeCleaner\\ValidFunctionNamePass {</token>
  </line>
  <line no="88">
    <token name="T_CONSTANT_ENCAPSED_STRING">                    function psy_test_codecleaner_validfunctionnamepass_eta() {}</token>
  </line>
  <line no="89">
    <token name="T_CONSTANT_ENCAPSED_STRING">                }</token>
  </line>
  <line no="90">
    <token name="T_CONSTANT_ENCAPSED_STRING">            '</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="91">
    <token name="T_WHITESPACE">            </token>
    <token name="T_ARRAY">array</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'</token>
  </line>
  <line no="92">
    <token name="T_CONSTANT_ENCAPSED_STRING">                namespace Psy\\Test\\CodeCleaner\\ValidFunctionNamePass {</token>
  </line>
  <line no="93">
    <token name="T_CONSTANT_ENCAPSED_STRING">                    function psy_test_codecleaner_validfunctionnamepass_eta() {}</token>
  </line>
  <line no="94">
    <token name="T_CONSTANT_ENCAPSED_STRING">                }</token>
  </line>
  <line no="95">
    <token name="T_CONSTANT_ENCAPSED_STRING">                namespace {</token>
  </line>
  <line no="96">
    <token name="T_CONSTANT_ENCAPSED_STRING">                    function psy_test_codecleaner_validfunctionnamepass_eta() {}</token>
  </line>
  <line no="97">
    <token name="T_CONSTANT_ENCAPSED_STRING">                }</token>
  </line>
  <line no="98">
    <token name="T_CONSTANT_ENCAPSED_STRING">            '</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="99">
    <token name="T_WHITESPACE">            </token>
    <token name="T_ARRAY">array</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'</token>
  </line>
  <line no="100">
    <token name="T_CONSTANT_ENCAPSED_STRING">                namespace Psy\\Test\\CodeCleaner\\ValidFunctionNamePass {</token>
  </line>
  <line no="101">
    <token name="T_CONSTANT_ENCAPSED_STRING">                    function array_merge() {}</token>
  </line>
  <line no="102">
    <token name="T_CONSTANT_ENCAPSED_STRING">                }</token>
  </line>
  <line no="103">
    <token name="T_CONSTANT_ENCAPSED_STRING">            '</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="104"/>
  <line no="105">
    <token name="T_WHITESPACE">            </token>
    <token name="T_COMMENT">// function calls</token>
  </line>
  <line no="106">
    <token name="T_WHITESPACE">            </token>
    <token name="T_ARRAY">array</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'array_merge();'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="107">
    <token name="T_WHITESPACE">            </token>
    <token name="T_ARRAY">array</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'</token>
  </line>
  <line no="108">
    <token name="T_CONSTANT_ENCAPSED_STRING">                namespace Psy\\Test\\CodeCleaner\\ValidFunctionNamePass {</token>
  </line>
  <line no="109">
    <token name="T_CONSTANT_ENCAPSED_STRING">                    function theta() {}</token>
  </line>
  <line no="110">
    <token name="T_CONSTANT_ENCAPSED_STRING">                }</token>
  </line>
  <line no="111">
    <token name="T_CONSTANT_ENCAPSED_STRING">                namespace Psy\\Test\\CodeCleaner\\ValidFunctionNamePass {</token>
  </line>
  <line no="112">
    <token name="T_CONSTANT_ENCAPSED_STRING">                    theta();</token>
  </line>
  <line no="113">
    <token name="T_CONSTANT_ENCAPSED_STRING">                }</token>
  </line>
  <line no="114">
    <token name="T_CONSTANT_ENCAPSED_STRING">            '</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="115">
    <token name="T_WHITESPACE">            </token>
    <token name="T_COMMENT">// closures</token>
  </line>
  <line no="116">
    <token name="T_WHITESPACE">            </token>
    <token name="T_ARRAY">array</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'$test = function(){};$test()'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="117">
    <token name="T_WHITESPACE">            </token>
    <token name="T_ARRAY">array</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'</token>
  </line>
  <line no="118">
    <token name="T_CONSTANT_ENCAPSED_STRING">                namespace Psy\\Test\\CodeCleaner\\ValidFunctionNamePass {</token>
  </line>
  <line no="119">
    <token name="T_CONSTANT_ENCAPSED_STRING">                    function theta() {}</token>
  </line>
  <line no="120">
    <token name="T_CONSTANT_ENCAPSED_STRING">                }</token>
  </line>
  <line no="121">
    <token name="T_CONSTANT_ENCAPSED_STRING">                namespace {</token>
  </line>
  <line no="122">
    <token name="T_CONSTANT_ENCAPSED_STRING">                    Psy\\Test\\CodeCleaner\\ValidFunctionNamePass\\theta();</token>
  </line>
  <line no="123">
    <token name="T_CONSTANT_ENCAPSED_STRING">                }</token>
  </line>
  <line no="124">
    <token name="T_CONSTANT_ENCAPSED_STRING">            '</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="125"/>
  <line no="126">
    <token name="T_WHITESPACE">            </token>
    <token name="T_COMMENT">// recursion</token>
  </line>
  <line no="127">
    <token name="T_WHITESPACE">            </token>
    <token name="T_ARRAY">array</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'function a() { a(); }'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="128">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="129">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="130">
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="131"/>
</source>
