<?xml version="1.0"?>
<source xmlns="http://xml.phpdox.net/token">
  <file xmlns="http://xml.phpdox.net/src" path="/home/robert/Desktop/Hogeschool/2ejaars Development/DevBOpdrachten/project56/http/laravel/vendor/phpunit/phpunit-mock-objects/src/Framework/MockObject/Matcher" file="Invocation.php" realpath="/home/robert/Desktop/Hogeschool/2ejaars Development/DevBOpdrachten/project56/http/laravel/vendor/phpunit/phpunit-mock-objects/src/Framework/MockObject/Matcher/Invocation.php" size="2052" time="2015-12-17T18:44:10+00:00" unixtime="1450377850" sha1="bf785ff9030dd1c26a09b685849bcec57ec61672" relative="vendor/phpunit/phpunit-mock-objects/src/Framework/MockObject/Matcher/Invocation.php"/>
  <line no="1">
    <token name="T_OPEN_TAG">&lt;?php</token>
  </line>
  <line no="2">
    <token name="T_COMMENT">/*</token>
  </line>
  <line no="3">
    <token name="T_COMMENT"> * This file is part of the PHPUnit_MockObject package.</token>
  </line>
  <line no="4">
    <token name="T_COMMENT"> *</token>
  </line>
  <line no="5">
    <token name="T_COMMENT"> * (c) Sebastian Bergmann &lt;sebastian@phpunit.de&gt;</token>
  </line>
  <line no="6">
    <token name="T_COMMENT"> *</token>
  </line>
  <line no="7">
    <token name="T_COMMENT"> * For the full copyright and license information, please view the LICENSE</token>
  </line>
  <line no="8">
    <token name="T_COMMENT"> * file that was distributed with this source code.</token>
  </line>
  <line no="9">
    <token name="T_COMMENT"> */</token>
  </line>
  <line no="10"/>
  <line no="11">
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="12">
    <token name="T_DOC_COMMENT"> * Interface for classes which matches an invocation based on its</token>
  </line>
  <line no="13">
    <token name="T_DOC_COMMENT"> * method name, argument, order or call count.</token>
  </line>
  <line no="14">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="15">
    <token name="T_DOC_COMMENT"> * @since Interface available since Release 1.0.0</token>
  </line>
  <line no="16">
    <token name="T_DOC_COMMENT"> */</token>
  </line>
  <line no="17">
    <token name="T_INTERFACE">interface</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_MockObject_Matcher_Invocation</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_EXTENDS">extends</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_SelfDescribing</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_MockObject_Verifiable</token>
  </line>
  <line no="18">
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="19">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="20">
    <token name="T_DOC_COMMENT">     * Registers the invocation $invocation in the object as being invoked.</token>
  </line>
  <line no="21">
    <token name="T_DOC_COMMENT">     * This will only occur after matches() returns true which means the</token>
  </line>
  <line no="22">
    <token name="T_DOC_COMMENT">     * current invocation is the correct one.</token>
  </line>
  <line no="23">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="24">
    <token name="T_DOC_COMMENT">     * The matcher can store information from the invocation which can later</token>
  </line>
  <line no="25">
    <token name="T_DOC_COMMENT">     * be checked in verify(), or it can check the values directly and throw</token>
  </line>
  <line no="26">
    <token name="T_DOC_COMMENT">     * and exception if an expectation is not met.</token>
  </line>
  <line no="27">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="28">
    <token name="T_DOC_COMMENT">     * If the matcher is a stub it will also have a return value.</token>
  </line>
  <line no="29">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="30">
    <token name="T_DOC_COMMENT">     * @param  PHPUnit_Framework_MockObject_Invocation $invocation</token>
  </line>
  <line no="31">
    <token name="T_DOC_COMMENT">     *                                                             Object containing information on a mocked or stubbed method which</token>
  </line>
  <line no="32">
    <token name="T_DOC_COMMENT">     *                                                             was invoked.</token>
  </line>
  <line no="33">
    <token name="T_DOC_COMMENT">     * @return mixed</token>
  </line>
  <line no="34">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="35">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">invoked</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_STRING">PHPUnit_Framework_MockObject_Invocation</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$invocation</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="36"/>
  <line no="37">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="38">
    <token name="T_DOC_COMMENT">     * Checks if the invocation $invocation matches the current rules. If it does</token>
  </line>
  <line no="39">
    <token name="T_DOC_COMMENT">     * the matcher will get the invoked() method called which should check if an</token>
  </line>
  <line no="40">
    <token name="T_DOC_COMMENT">     * expectation is met.</token>
  </line>
  <line no="41">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="42">
    <token name="T_DOC_COMMENT">     * @param  PHPUnit_Framework_MockObject_Invocation $invocation</token>
  </line>
  <line no="43">
    <token name="T_DOC_COMMENT">     *                                                             Object containing information on a mocked or stubbed method which</token>
  </line>
  <line no="44">
    <token name="T_DOC_COMMENT">     *                                                             was invoked.</token>
  </line>
  <line no="45">
    <token name="T_DOC_COMMENT">     * @return bool</token>
  </line>
  <line no="46">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="47">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">matches</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_STRING">PHPUnit_Framework_MockObject_Invocation</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$invocation</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="48">
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="49"/>
</source>
