<?xml version="1.0"?>
<source xmlns="http://xml.phpdox.net/token">
  <file xmlns="http://xml.phpdox.net/src" path="/home/robert/Desktop/Hogeschool/2ejaars Development/DevBOpdrachten/project56/http/laravel/vendor/phpunit/phpunit/src/Framework" file="Assert.php" realpath="/home/robert/Desktop/Hogeschool/2ejaars Development/DevBOpdrachten/project56/http/laravel/vendor/phpunit/phpunit/src/Framework/Assert.php" size="97751" time="2015-12-17T18:44:10+00:00" unixtime="1450377850" sha1="f63e42f272718cfc9effed92376e1070257c04de" relative="vendor/phpunit/phpunit/src/Framework/Assert.php"/>
  <line no="1">
    <token name="T_OPEN_TAG">&lt;?php</token>
  </line>
  <line no="2">
    <token name="T_COMMENT">/*</token>
  </line>
  <line no="3">
    <token name="T_COMMENT"> * This file is part of PHPUnit.</token>
  </line>
  <line no="4">
    <token name="T_COMMENT"> *</token>
  </line>
  <line no="5">
    <token name="T_COMMENT"> * (c) Sebastian Bergmann &lt;sebastian@phpunit.de&gt;</token>
  </line>
  <line no="6">
    <token name="T_COMMENT"> *</token>
  </line>
  <line no="7">
    <token name="T_COMMENT"> * For the full copyright and license information, please view the LICENSE</token>
  </line>
  <line no="8">
    <token name="T_COMMENT"> * file that was distributed with this source code.</token>
  </line>
  <line no="9">
    <token name="T_COMMENT"> */</token>
  </line>
  <line no="10"/>
  <line no="11">
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="12">
    <token name="T_DOC_COMMENT"> * A set of assert methods.</token>
  </line>
  <line no="13">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="14">
    <token name="T_DOC_COMMENT"> * @since Class available since Release 2.0.0</token>
  </line>
  <line no="15">
    <token name="T_DOC_COMMENT"> */</token>
  </line>
  <line no="16">
    <token name="T_ABSTRACT">abstract</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CLASS">class</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Assert</token>
  </line>
  <line no="17">
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="18">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="19">
    <token name="T_DOC_COMMENT">     * @var int</token>
  </line>
  <line no="20">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="21">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PRIVATE">private</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$count</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_LNUMBER">0</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="22"/>
  <line no="23">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="24">
    <token name="T_DOC_COMMENT">     * Asserts that an array has a specified key.</token>
  </line>
  <line no="25">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="26">
    <token name="T_DOC_COMMENT">     * @param mixed             $key</token>
  </line>
  <line no="27">
    <token name="T_DOC_COMMENT">     * @param array|ArrayAccess $array</token>
  </line>
  <line no="28">
    <token name="T_DOC_COMMENT">     * @param string            $message</token>
  </line>
  <line no="29">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="30">
    <token name="T_DOC_COMMENT">     * @since Method available since Release 3.0.0</token>
  </line>
  <line no="31">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="32">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertArrayHasKey</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$key</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$array</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="33">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="34">
    <token name="T_WHITESPACE">        </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_STRING">is_integer</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$key</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_BOOLEAN_OR">||</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">is_string</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$key</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="35">
    <token name="T_WHITESPACE">            </token>
    <token name="T_THROW">throw</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Util_InvalidArgumentHelper</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">factory</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="36">
    <token name="T_WHITESPACE">                </token>
    <token name="T_LNUMBER">1</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="37">
    <token name="T_WHITESPACE">                </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'integer or string'</token>
  </line>
  <line no="38">
    <token name="T_WHITESPACE">            </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="39">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="40"/>
  <line no="41">
    <token name="T_WHITESPACE">        </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_STRING">is_array</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$array</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_BOOLEAN_OR">||</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$array</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_INSTANCEOF">instanceof</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">ArrayAccess</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="42">
    <token name="T_WHITESPACE">            </token>
    <token name="T_THROW">throw</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Util_InvalidArgumentHelper</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">factory</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="43">
    <token name="T_WHITESPACE">                </token>
    <token name="T_LNUMBER">2</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="44">
    <token name="T_WHITESPACE">                </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'array or ArrayAccess'</token>
  </line>
  <line no="45">
    <token name="T_WHITESPACE">            </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="46">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="47"/>
  <line no="48">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$constraint</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_ArrayHasKey</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$key</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="49"/>
  <line no="50">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertThat</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$array</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$constraint</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="51">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="52"/>
  <line no="53">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="54">
    <token name="T_DOC_COMMENT">     * Asserts that an array has a specified subset.</token>
  </line>
  <line no="55">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="56">
    <token name="T_DOC_COMMENT">     * @param array|ArrayAccess $subset</token>
  </line>
  <line no="57">
    <token name="T_DOC_COMMENT">     * @param array|ArrayAccess $array</token>
  </line>
  <line no="58">
    <token name="T_DOC_COMMENT">     * @param bool              $strict  Check for object identity</token>
  </line>
  <line no="59">
    <token name="T_DOC_COMMENT">     * @param string            $message</token>
  </line>
  <line no="60">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="61">
    <token name="T_DOC_COMMENT">     * @since Method available since Release 4.4.0</token>
  </line>
  <line no="62">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="63">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertArraySubset</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$subset</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$array</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$strict</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">false</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="64">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="65">
    <token name="T_WHITESPACE">        </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_STRING">is_array</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$subset</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="66">
    <token name="T_WHITESPACE">            </token>
    <token name="T_THROW">throw</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Util_InvalidArgumentHelper</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">factory</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="67">
    <token name="T_WHITESPACE">                </token>
    <token name="T_LNUMBER">1</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="68">
    <token name="T_WHITESPACE">                </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'array or ArrayAccess'</token>
  </line>
  <line no="69">
    <token name="T_WHITESPACE">            </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="70">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="71"/>
  <line no="72">
    <token name="T_WHITESPACE">        </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_STRING">is_array</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$array</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="73">
    <token name="T_WHITESPACE">            </token>
    <token name="T_THROW">throw</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Util_InvalidArgumentHelper</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">factory</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="74">
    <token name="T_WHITESPACE">                </token>
    <token name="T_LNUMBER">2</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="75">
    <token name="T_WHITESPACE">                </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'array or ArrayAccess'</token>
  </line>
  <line no="76">
    <token name="T_WHITESPACE">            </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="77">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="78"/>
  <line no="79">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$constraint</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_ArraySubset</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$subset</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$strict</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="80"/>
  <line no="81">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertThat</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$array</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$constraint</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="82">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="83"/>
  <line no="84">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="85">
    <token name="T_DOC_COMMENT">     * Asserts that an array does not have a specified key.</token>
  </line>
  <line no="86">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="87">
    <token name="T_DOC_COMMENT">     * @param mixed             $key</token>
  </line>
  <line no="88">
    <token name="T_DOC_COMMENT">     * @param array|ArrayAccess $array</token>
  </line>
  <line no="89">
    <token name="T_DOC_COMMENT">     * @param string            $message</token>
  </line>
  <line no="90">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="91">
    <token name="T_DOC_COMMENT">     * @since  Method available since Release 3.0.0</token>
  </line>
  <line no="92">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="93">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertArrayNotHasKey</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$key</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$array</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="94">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="95">
    <token name="T_WHITESPACE">        </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_STRING">is_integer</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$key</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_BOOLEAN_OR">||</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">is_string</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$key</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="96">
    <token name="T_WHITESPACE">            </token>
    <token name="T_THROW">throw</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Util_InvalidArgumentHelper</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">factory</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="97">
    <token name="T_WHITESPACE">                </token>
    <token name="T_LNUMBER">1</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="98">
    <token name="T_WHITESPACE">                </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'integer or string'</token>
  </line>
  <line no="99">
    <token name="T_WHITESPACE">            </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="100">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="101"/>
  <line no="102">
    <token name="T_WHITESPACE">        </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_STRING">is_array</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$array</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_BOOLEAN_OR">||</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$array</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_INSTANCEOF">instanceof</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">ArrayAccess</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="103">
    <token name="T_WHITESPACE">            </token>
    <token name="T_THROW">throw</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Util_InvalidArgumentHelper</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">factory</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="104">
    <token name="T_WHITESPACE">                </token>
    <token name="T_LNUMBER">2</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="105">
    <token name="T_WHITESPACE">                </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'array or ArrayAccess'</token>
  </line>
  <line no="106">
    <token name="T_WHITESPACE">            </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="107">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="108"/>
  <line no="109">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$constraint</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_Not</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="110">
    <token name="T_WHITESPACE">            </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_ArrayHasKey</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$key</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="111">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="112"/>
  <line no="113">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertThat</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$array</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$constraint</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="114">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="115"/>
  <line no="116">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="117">
    <token name="T_DOC_COMMENT">     * Asserts that a haystack contains a needle.</token>
  </line>
  <line no="118">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="119">
    <token name="T_DOC_COMMENT">     * @param mixed  $needle</token>
  </line>
  <line no="120">
    <token name="T_DOC_COMMENT">     * @param mixed  $haystack</token>
  </line>
  <line no="121">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="122">
    <token name="T_DOC_COMMENT">     * @param bool   $ignoreCase</token>
  </line>
  <line no="123">
    <token name="T_DOC_COMMENT">     * @param bool   $checkForObjectIdentity</token>
  </line>
  <line no="124">
    <token name="T_DOC_COMMENT">     * @param bool   $checkForNonObjectIdentity</token>
  </line>
  <line no="125">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="126">
    <token name="T_DOC_COMMENT">     * @since  Method available since Release 2.1.0</token>
  </line>
  <line no="127">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="128">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertContains</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$needle</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$haystack</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$ignoreCase</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">false</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$checkForObjectIdentity</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">true</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$checkForNonObjectIdentity</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">false</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="129">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="130">
    <token name="T_WHITESPACE">        </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_STRING">is_array</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$haystack</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_BOOLEAN_OR">||</token>
  </line>
  <line no="131">
    <token name="T_WHITESPACE">            </token>
    <token name="T_STRING">is_object</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$haystack</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_BOOLEAN_AND">&amp;&amp;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$haystack</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_INSTANCEOF">instanceof</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">Traversable</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="132">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$constraint</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_TraversableContains</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="133">
    <token name="T_WHITESPACE">                </token>
    <token name="T_VARIABLE">$needle</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="134">
    <token name="T_WHITESPACE">                </token>
    <token name="T_VARIABLE">$checkForObjectIdentity</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="135">
    <token name="T_WHITESPACE">                </token>
    <token name="T_VARIABLE">$checkForNonObjectIdentity</token>
  </line>
  <line no="136">
    <token name="T_WHITESPACE">            </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="137">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_ELSEIF">elseif</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_STRING">is_string</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$haystack</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="138">
    <token name="T_WHITESPACE">            </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_STRING">is_string</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$needle</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="139">
    <token name="T_WHITESPACE">                </token>
    <token name="T_THROW">throw</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Util_InvalidArgumentHelper</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">factory</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="140">
    <token name="T_WHITESPACE">                    </token>
    <token name="T_LNUMBER">1</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="141">
    <token name="T_WHITESPACE">                    </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'string'</token>
  </line>
  <line no="142">
    <token name="T_WHITESPACE">                </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="143">
    <token name="T_WHITESPACE">            </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="144"/>
  <line no="145">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$constraint</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_StringContains</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="146">
    <token name="T_WHITESPACE">                </token>
    <token name="T_VARIABLE">$needle</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="147">
    <token name="T_WHITESPACE">                </token>
    <token name="T_VARIABLE">$ignoreCase</token>
  </line>
  <line no="148">
    <token name="T_WHITESPACE">            </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="149">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_ELSE">else</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="150">
    <token name="T_WHITESPACE">            </token>
    <token name="T_THROW">throw</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Util_InvalidArgumentHelper</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">factory</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="151">
    <token name="T_WHITESPACE">                </token>
    <token name="T_LNUMBER">2</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="152">
    <token name="T_WHITESPACE">                </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'array, traversable or string'</token>
  </line>
  <line no="153">
    <token name="T_WHITESPACE">            </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="154">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="155"/>
  <line no="156">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertThat</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$haystack</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$constraint</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="157">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="158"/>
  <line no="159">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="160">
    <token name="T_DOC_COMMENT">     * Asserts that a haystack that is stored in a static attribute of a class</token>
  </line>
  <line no="161">
    <token name="T_DOC_COMMENT">     * or an attribute of an object contains a needle.</token>
  </line>
  <line no="162">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="163">
    <token name="T_DOC_COMMENT">     * @param mixed  $needle</token>
  </line>
  <line no="164">
    <token name="T_DOC_COMMENT">     * @param string $haystackAttributeName</token>
  </line>
  <line no="165">
    <token name="T_DOC_COMMENT">     * @param mixed  $haystackClassOrObject</token>
  </line>
  <line no="166">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="167">
    <token name="T_DOC_COMMENT">     * @param bool   $ignoreCase</token>
  </line>
  <line no="168">
    <token name="T_DOC_COMMENT">     * @param bool   $checkForObjectIdentity</token>
  </line>
  <line no="169">
    <token name="T_DOC_COMMENT">     * @param bool   $checkForNonObjectIdentity</token>
  </line>
  <line no="170">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="171">
    <token name="T_DOC_COMMENT">     * @since  Method available since Release 3.0.0</token>
  </line>
  <line no="172">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="173">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertAttributeContains</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$needle</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$haystackAttributeName</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$haystackClassOrObject</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$ignoreCase</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">false</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$checkForObjectIdentity</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">true</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$checkForNonObjectIdentity</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">false</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="174">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="175">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertContains</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="176">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$needle</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="177">
    <token name="T_WHITESPACE">            </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">readAttribute</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$haystackClassOrObject</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$haystackAttributeName</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="178">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="179">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$ignoreCase</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="180">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$checkForObjectIdentity</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="181">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$checkForNonObjectIdentity</token>
  </line>
  <line no="182">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="183">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="184"/>
  <line no="185">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="186">
    <token name="T_DOC_COMMENT">     * Asserts that a haystack does not contain a needle.</token>
  </line>
  <line no="187">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="188">
    <token name="T_DOC_COMMENT">     * @param mixed  $needle</token>
  </line>
  <line no="189">
    <token name="T_DOC_COMMENT">     * @param mixed  $haystack</token>
  </line>
  <line no="190">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="191">
    <token name="T_DOC_COMMENT">     * @param bool   $ignoreCase</token>
  </line>
  <line no="192">
    <token name="T_DOC_COMMENT">     * @param bool   $checkForObjectIdentity</token>
  </line>
  <line no="193">
    <token name="T_DOC_COMMENT">     * @param bool   $checkForNonObjectIdentity</token>
  </line>
  <line no="194">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="195">
    <token name="T_DOC_COMMENT">     * @since  Method available since Release 2.1.0</token>
  </line>
  <line no="196">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="197">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertNotContains</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$needle</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$haystack</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$ignoreCase</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">false</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$checkForObjectIdentity</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">true</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$checkForNonObjectIdentity</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">false</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="198">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="199">
    <token name="T_WHITESPACE">        </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_STRING">is_array</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$haystack</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_BOOLEAN_OR">||</token>
  </line>
  <line no="200">
    <token name="T_WHITESPACE">            </token>
    <token name="T_STRING">is_object</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$haystack</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_BOOLEAN_AND">&amp;&amp;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$haystack</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_INSTANCEOF">instanceof</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">Traversable</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="201">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$constraint</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_Not</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="202">
    <token name="T_WHITESPACE">                </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_TraversableContains</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="203">
    <token name="T_WHITESPACE">                    </token>
    <token name="T_VARIABLE">$needle</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="204">
    <token name="T_WHITESPACE">                    </token>
    <token name="T_VARIABLE">$checkForObjectIdentity</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="205">
    <token name="T_WHITESPACE">                    </token>
    <token name="T_VARIABLE">$checkForNonObjectIdentity</token>
  </line>
  <line no="206">
    <token name="T_WHITESPACE">                </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="207">
    <token name="T_WHITESPACE">            </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="208">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_ELSEIF">elseif</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_STRING">is_string</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$haystack</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="209">
    <token name="T_WHITESPACE">            </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_STRING">is_string</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$needle</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="210">
    <token name="T_WHITESPACE">                </token>
    <token name="T_THROW">throw</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Util_InvalidArgumentHelper</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">factory</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="211">
    <token name="T_WHITESPACE">                    </token>
    <token name="T_LNUMBER">1</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="212">
    <token name="T_WHITESPACE">                    </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'string'</token>
  </line>
  <line no="213">
    <token name="T_WHITESPACE">                </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="214">
    <token name="T_WHITESPACE">            </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="215"/>
  <line no="216">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$constraint</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_Not</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="217">
    <token name="T_WHITESPACE">                </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_StringContains</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="218">
    <token name="T_WHITESPACE">                    </token>
    <token name="T_VARIABLE">$needle</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="219">
    <token name="T_WHITESPACE">                    </token>
    <token name="T_VARIABLE">$ignoreCase</token>
  </line>
  <line no="220">
    <token name="T_WHITESPACE">                </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="221">
    <token name="T_WHITESPACE">            </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="222">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_ELSE">else</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="223">
    <token name="T_WHITESPACE">            </token>
    <token name="T_THROW">throw</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Util_InvalidArgumentHelper</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">factory</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="224">
    <token name="T_WHITESPACE">                </token>
    <token name="T_LNUMBER">2</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="225">
    <token name="T_WHITESPACE">                </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'array, traversable or string'</token>
  </line>
  <line no="226">
    <token name="T_WHITESPACE">            </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="227">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="228"/>
  <line no="229">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertThat</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$haystack</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$constraint</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="230">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="231"/>
  <line no="232">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="233">
    <token name="T_DOC_COMMENT">     * Asserts that a haystack that is stored in a static attribute of a class</token>
  </line>
  <line no="234">
    <token name="T_DOC_COMMENT">     * or an attribute of an object does not contain a needle.</token>
  </line>
  <line no="235">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="236">
    <token name="T_DOC_COMMENT">     * @param mixed  $needle</token>
  </line>
  <line no="237">
    <token name="T_DOC_COMMENT">     * @param string $haystackAttributeName</token>
  </line>
  <line no="238">
    <token name="T_DOC_COMMENT">     * @param mixed  $haystackClassOrObject</token>
  </line>
  <line no="239">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="240">
    <token name="T_DOC_COMMENT">     * @param bool   $ignoreCase</token>
  </line>
  <line no="241">
    <token name="T_DOC_COMMENT">     * @param bool   $checkForObjectIdentity</token>
  </line>
  <line no="242">
    <token name="T_DOC_COMMENT">     * @param bool   $checkForNonObjectIdentity</token>
  </line>
  <line no="243">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="244">
    <token name="T_DOC_COMMENT">     * @since  Method available since Release 3.0.0</token>
  </line>
  <line no="245">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="246">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertAttributeNotContains</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$needle</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$haystackAttributeName</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$haystackClassOrObject</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$ignoreCase</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">false</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$checkForObjectIdentity</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">true</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$checkForNonObjectIdentity</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">false</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="247">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="248">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertNotContains</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="249">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$needle</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="250">
    <token name="T_WHITESPACE">            </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">readAttribute</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$haystackClassOrObject</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$haystackAttributeName</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="251">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="252">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$ignoreCase</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="253">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$checkForObjectIdentity</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="254">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$checkForNonObjectIdentity</token>
  </line>
  <line no="255">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="256">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="257"/>
  <line no="258">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="259">
    <token name="T_DOC_COMMENT">     * Asserts that a haystack contains only values of a given type.</token>
  </line>
  <line no="260">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="261">
    <token name="T_DOC_COMMENT">     * @param string $type</token>
  </line>
  <line no="262">
    <token name="T_DOC_COMMENT">     * @param mixed  $haystack</token>
  </line>
  <line no="263">
    <token name="T_DOC_COMMENT">     * @param bool   $isNativeType</token>
  </line>
  <line no="264">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="265">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="266">
    <token name="T_DOC_COMMENT">     * @since  Method available since Release 3.1.4</token>
  </line>
  <line no="267">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="268">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertContainsOnly</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$type</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$haystack</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$isNativeType</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="269">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="270">
    <token name="T_WHITESPACE">        </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_STRING">is_array</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$haystack</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_BOOLEAN_OR">||</token>
  </line>
  <line no="271">
    <token name="T_WHITESPACE">            </token>
    <token name="T_STRING">is_object</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$haystack</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_BOOLEAN_AND">&amp;&amp;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$haystack</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_INSTANCEOF">instanceof</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">Traversable</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="272">
    <token name="T_WHITESPACE">            </token>
    <token name="T_THROW">throw</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Util_InvalidArgumentHelper</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">factory</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="273">
    <token name="T_WHITESPACE">                </token>
    <token name="T_LNUMBER">2</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="274">
    <token name="T_WHITESPACE">                </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'array or traversable'</token>
  </line>
  <line no="275">
    <token name="T_WHITESPACE">            </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="276">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="277"/>
  <line no="278">
    <token name="T_WHITESPACE">        </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$isNativeType</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_IS_EQUAL">==</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="279">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$isNativeType</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Util_Type</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">isType</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$type</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="280">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="281"/>
  <line no="282">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertThat</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="283">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$haystack</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="284">
    <token name="T_WHITESPACE">            </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_TraversableContainsOnly</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="285">
    <token name="T_WHITESPACE">                </token>
    <token name="T_VARIABLE">$type</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="286">
    <token name="T_WHITESPACE">                </token>
    <token name="T_VARIABLE">$isNativeType</token>
  </line>
  <line no="287">
    <token name="T_WHITESPACE">            </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="288">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$message</token>
  </line>
  <line no="289">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="290">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="291"/>
  <line no="292">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="293">
    <token name="T_DOC_COMMENT">     * Asserts that a haystack contains only instances of a given classname</token>
  </line>
  <line no="294">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="295">
    <token name="T_DOC_COMMENT">     * @param string            $classname</token>
  </line>
  <line no="296">
    <token name="T_DOC_COMMENT">     * @param array|Traversable $haystack</token>
  </line>
  <line no="297">
    <token name="T_DOC_COMMENT">     * @param string            $message</token>
  </line>
  <line no="298">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="299">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertContainsOnlyInstancesOf</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$classname</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$haystack</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="300">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="301">
    <token name="T_WHITESPACE">        </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_STRING">is_array</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$haystack</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_BOOLEAN_OR">||</token>
  </line>
  <line no="302">
    <token name="T_WHITESPACE">            </token>
    <token name="T_STRING">is_object</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$haystack</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_BOOLEAN_AND">&amp;&amp;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$haystack</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_INSTANCEOF">instanceof</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">Traversable</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="303">
    <token name="T_WHITESPACE">            </token>
    <token name="T_THROW">throw</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Util_InvalidArgumentHelper</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">factory</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="304">
    <token name="T_WHITESPACE">                </token>
    <token name="T_LNUMBER">2</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="305">
    <token name="T_WHITESPACE">                </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'array or traversable'</token>
  </line>
  <line no="306">
    <token name="T_WHITESPACE">            </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="307">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="308"/>
  <line no="309">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertThat</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="310">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$haystack</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="311">
    <token name="T_WHITESPACE">            </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_TraversableContainsOnly</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="312">
    <token name="T_WHITESPACE">                </token>
    <token name="T_VARIABLE">$classname</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="313">
    <token name="T_WHITESPACE">                </token>
    <token name="T_STRING">false</token>
  </line>
  <line no="314">
    <token name="T_WHITESPACE">            </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="315">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$message</token>
  </line>
  <line no="316">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="317">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="318"/>
  <line no="319">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="320">
    <token name="T_DOC_COMMENT">     * Asserts that a haystack that is stored in a static attribute of a class</token>
  </line>
  <line no="321">
    <token name="T_DOC_COMMENT">     * or an attribute of an object contains only values of a given type.</token>
  </line>
  <line no="322">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="323">
    <token name="T_DOC_COMMENT">     * @param string $type</token>
  </line>
  <line no="324">
    <token name="T_DOC_COMMENT">     * @param string $haystackAttributeName</token>
  </line>
  <line no="325">
    <token name="T_DOC_COMMENT">     * @param mixed  $haystackClassOrObject</token>
  </line>
  <line no="326">
    <token name="T_DOC_COMMENT">     * @param bool   $isNativeType</token>
  </line>
  <line no="327">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="328">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="329">
    <token name="T_DOC_COMMENT">     * @since  Method available since Release 3.1.4</token>
  </line>
  <line no="330">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="331">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertAttributeContainsOnly</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$type</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$haystackAttributeName</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$haystackClassOrObject</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$isNativeType</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="332">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="333">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertContainsOnly</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="334">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$type</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="335">
    <token name="T_WHITESPACE">            </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">readAttribute</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$haystackClassOrObject</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$haystackAttributeName</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="336">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$isNativeType</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="337">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$message</token>
  </line>
  <line no="338">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="339">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="340"/>
  <line no="341">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="342">
    <token name="T_DOC_COMMENT">     * Asserts that a haystack does not contain only values of a given type.</token>
  </line>
  <line no="343">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="344">
    <token name="T_DOC_COMMENT">     * @param string $type</token>
  </line>
  <line no="345">
    <token name="T_DOC_COMMENT">     * @param mixed  $haystack</token>
  </line>
  <line no="346">
    <token name="T_DOC_COMMENT">     * @param bool   $isNativeType</token>
  </line>
  <line no="347">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="348">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="349">
    <token name="T_DOC_COMMENT">     * @since  Method available since Release 3.1.4</token>
  </line>
  <line no="350">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="351">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertNotContainsOnly</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$type</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$haystack</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$isNativeType</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="352">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="353">
    <token name="T_WHITESPACE">        </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_STRING">is_array</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$haystack</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_BOOLEAN_OR">||</token>
  </line>
  <line no="354">
    <token name="T_WHITESPACE">            </token>
    <token name="T_STRING">is_object</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$haystack</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_BOOLEAN_AND">&amp;&amp;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$haystack</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_INSTANCEOF">instanceof</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">Traversable</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="355">
    <token name="T_WHITESPACE">            </token>
    <token name="T_THROW">throw</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Util_InvalidArgumentHelper</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">factory</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="356">
    <token name="T_WHITESPACE">                </token>
    <token name="T_LNUMBER">2</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="357">
    <token name="T_WHITESPACE">                </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'array or traversable'</token>
  </line>
  <line no="358">
    <token name="T_WHITESPACE">            </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="359">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="360"/>
  <line no="361">
    <token name="T_WHITESPACE">        </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$isNativeType</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_IS_EQUAL">==</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="362">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$isNativeType</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Util_Type</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">isType</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$type</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="363">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="364"/>
  <line no="365">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertThat</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="366">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$haystack</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="367">
    <token name="T_WHITESPACE">            </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_Not</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="368">
    <token name="T_WHITESPACE">                </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_TraversableContainsOnly</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="369">
    <token name="T_WHITESPACE">                    </token>
    <token name="T_VARIABLE">$type</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="370">
    <token name="T_WHITESPACE">                    </token>
    <token name="T_VARIABLE">$isNativeType</token>
  </line>
  <line no="371">
    <token name="T_WHITESPACE">                </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="372">
    <token name="T_WHITESPACE">            </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="373">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$message</token>
  </line>
  <line no="374">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="375">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="376"/>
  <line no="377">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="378">
    <token name="T_DOC_COMMENT">     * Asserts that a haystack that is stored in a static attribute of a class</token>
  </line>
  <line no="379">
    <token name="T_DOC_COMMENT">     * or an attribute of an object does not contain only values of a given</token>
  </line>
  <line no="380">
    <token name="T_DOC_COMMENT">     * type.</token>
  </line>
  <line no="381">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="382">
    <token name="T_DOC_COMMENT">     * @param string $type</token>
  </line>
  <line no="383">
    <token name="T_DOC_COMMENT">     * @param string $haystackAttributeName</token>
  </line>
  <line no="384">
    <token name="T_DOC_COMMENT">     * @param mixed  $haystackClassOrObject</token>
  </line>
  <line no="385">
    <token name="T_DOC_COMMENT">     * @param bool   $isNativeType</token>
  </line>
  <line no="386">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="387">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="388">
    <token name="T_DOC_COMMENT">     * @since  Method available since Release 3.1.4</token>
  </line>
  <line no="389">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="390">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertAttributeNotContainsOnly</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$type</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$haystackAttributeName</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$haystackClassOrObject</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$isNativeType</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="391">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="392">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertNotContainsOnly</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="393">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$type</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="394">
    <token name="T_WHITESPACE">            </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">readAttribute</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$haystackClassOrObject</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$haystackAttributeName</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="395">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$isNativeType</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="396">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$message</token>
  </line>
  <line no="397">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="398">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="399"/>
  <line no="400">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="401">
    <token name="T_DOC_COMMENT">     * Asserts the number of elements of an array, Countable or Traversable.</token>
  </line>
  <line no="402">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="403">
    <token name="T_DOC_COMMENT">     * @param int    $expectedCount</token>
  </line>
  <line no="404">
    <token name="T_DOC_COMMENT">     * @param mixed  $haystack</token>
  </line>
  <line no="405">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="406">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="407">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertCount</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expectedCount</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$haystack</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="408">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="409">
    <token name="T_WHITESPACE">        </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_STRING">is_int</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expectedCount</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="410">
    <token name="T_WHITESPACE">            </token>
    <token name="T_THROW">throw</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Util_InvalidArgumentHelper</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">factory</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_LNUMBER">1</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'integer'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="411">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="412"/>
  <line no="413">
    <token name="T_WHITESPACE">        </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_VARIABLE">$haystack</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_INSTANCEOF">instanceof</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">Countable</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_BOOLEAN_AND">&amp;&amp;</token>
  </line>
  <line no="414">
    <token name="T_WHITESPACE">            </token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_VARIABLE">$haystack</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_INSTANCEOF">instanceof</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">Traversable</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_BOOLEAN_AND">&amp;&amp;</token>
  </line>
  <line no="415">
    <token name="T_WHITESPACE">            </token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_STRING">is_array</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$haystack</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="416">
    <token name="T_WHITESPACE">            </token>
    <token name="T_THROW">throw</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Util_InvalidArgumentHelper</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">factory</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_LNUMBER">2</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'countable or traversable'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="417">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="418"/>
  <line no="419">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertThat</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="420">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$haystack</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="421">
    <token name="T_WHITESPACE">            </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_Count</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expectedCount</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="422">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$message</token>
  </line>
  <line no="423">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="424">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="425"/>
  <line no="426">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="427">
    <token name="T_DOC_COMMENT">     * Asserts the number of elements of an array, Countable or Traversable</token>
  </line>
  <line no="428">
    <token name="T_DOC_COMMENT">     * that is stored in an attribute.</token>
  </line>
  <line no="429">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="430">
    <token name="T_DOC_COMMENT">     * @param int    $expectedCount</token>
  </line>
  <line no="431">
    <token name="T_DOC_COMMENT">     * @param string $haystackAttributeName</token>
  </line>
  <line no="432">
    <token name="T_DOC_COMMENT">     * @param mixed  $haystackClassOrObject</token>
  </line>
  <line no="433">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="434">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="435">
    <token name="T_DOC_COMMENT">     * @since Method available since Release 3.6.0</token>
  </line>
  <line no="436">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="437">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertAttributeCount</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expectedCount</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$haystackAttributeName</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$haystackClassOrObject</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="438">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="439">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertCount</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="440">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$expectedCount</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="441">
    <token name="T_WHITESPACE">            </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">readAttribute</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$haystackClassOrObject</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$haystackAttributeName</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="442">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$message</token>
  </line>
  <line no="443">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="444">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="445"/>
  <line no="446">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="447">
    <token name="T_DOC_COMMENT">     * Asserts the number of elements of an array, Countable or Traversable.</token>
  </line>
  <line no="448">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="449">
    <token name="T_DOC_COMMENT">     * @param int    $expectedCount</token>
  </line>
  <line no="450">
    <token name="T_DOC_COMMENT">     * @param mixed  $haystack</token>
  </line>
  <line no="451">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="452">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="453">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertNotCount</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expectedCount</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$haystack</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="454">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="455">
    <token name="T_WHITESPACE">        </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_STRING">is_int</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expectedCount</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="456">
    <token name="T_WHITESPACE">            </token>
    <token name="T_THROW">throw</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Util_InvalidArgumentHelper</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">factory</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_LNUMBER">1</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'integer'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="457">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="458"/>
  <line no="459">
    <token name="T_WHITESPACE">        </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_VARIABLE">$haystack</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_INSTANCEOF">instanceof</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">Countable</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_BOOLEAN_AND">&amp;&amp;</token>
  </line>
  <line no="460">
    <token name="T_WHITESPACE">            </token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_VARIABLE">$haystack</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_INSTANCEOF">instanceof</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">Traversable</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_BOOLEAN_AND">&amp;&amp;</token>
  </line>
  <line no="461">
    <token name="T_WHITESPACE">            </token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_STRING">is_array</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$haystack</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="462">
    <token name="T_WHITESPACE">            </token>
    <token name="T_THROW">throw</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Util_InvalidArgumentHelper</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">factory</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_LNUMBER">2</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'countable or traversable'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="463">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="464"/>
  <line no="465">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$constraint</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_Not</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="466">
    <token name="T_WHITESPACE">            </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_Count</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expectedCount</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="467">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="468"/>
  <line no="469">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertThat</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$haystack</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$constraint</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="470">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="471"/>
  <line no="472">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="473">
    <token name="T_DOC_COMMENT">     * Asserts the number of elements of an array, Countable or Traversable</token>
  </line>
  <line no="474">
    <token name="T_DOC_COMMENT">     * that is stored in an attribute.</token>
  </line>
  <line no="475">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="476">
    <token name="T_DOC_COMMENT">     * @param int    $expectedCount</token>
  </line>
  <line no="477">
    <token name="T_DOC_COMMENT">     * @param string $haystackAttributeName</token>
  </line>
  <line no="478">
    <token name="T_DOC_COMMENT">     * @param mixed  $haystackClassOrObject</token>
  </line>
  <line no="479">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="480">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="481">
    <token name="T_DOC_COMMENT">     * @since Method available since Release 3.6.0</token>
  </line>
  <line no="482">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="483">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertAttributeNotCount</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expectedCount</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$haystackAttributeName</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$haystackClassOrObject</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="484">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="485">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertNotCount</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="486">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$expectedCount</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="487">
    <token name="T_WHITESPACE">            </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">readAttribute</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$haystackClassOrObject</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$haystackAttributeName</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="488">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$message</token>
  </line>
  <line no="489">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="490">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="491"/>
  <line no="492">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="493">
    <token name="T_DOC_COMMENT">     * Asserts that two variables are equal.</token>
  </line>
  <line no="494">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="495">
    <token name="T_DOC_COMMENT">     * @param mixed  $expected</token>
  </line>
  <line no="496">
    <token name="T_DOC_COMMENT">     * @param mixed  $actual</token>
  </line>
  <line no="497">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="498">
    <token name="T_DOC_COMMENT">     * @param float  $delta</token>
  </line>
  <line no="499">
    <token name="T_DOC_COMMENT">     * @param int    $maxDepth</token>
  </line>
  <line no="500">
    <token name="T_DOC_COMMENT">     * @param bool   $canonicalize</token>
  </line>
  <line no="501">
    <token name="T_DOC_COMMENT">     * @param bool   $ignoreCase</token>
  </line>
  <line no="502">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="503">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertEquals</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$delta</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_DNUMBER">0.0</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$maxDepth</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_LNUMBER">10</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$canonicalize</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">false</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$ignoreCase</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">false</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="504">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="505">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$constraint</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_IsEqual</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="506">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="507">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$delta</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="508">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$maxDepth</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="509">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$canonicalize</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="510">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$ignoreCase</token>
  </line>
  <line no="511">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="512"/>
  <line no="513">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertThat</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$constraint</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="514">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="515"/>
  <line no="516">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="517">
    <token name="T_DOC_COMMENT">     * Asserts that a variable is equal to an attribute of an object.</token>
  </line>
  <line no="518">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="519">
    <token name="T_DOC_COMMENT">     * @param mixed  $expected</token>
  </line>
  <line no="520">
    <token name="T_DOC_COMMENT">     * @param string $actualAttributeName</token>
  </line>
  <line no="521">
    <token name="T_DOC_COMMENT">     * @param string $actualClassOrObject</token>
  </line>
  <line no="522">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="523">
    <token name="T_DOC_COMMENT">     * @param float  $delta</token>
  </line>
  <line no="524">
    <token name="T_DOC_COMMENT">     * @param int    $maxDepth</token>
  </line>
  <line no="525">
    <token name="T_DOC_COMMENT">     * @param bool   $canonicalize</token>
  </line>
  <line no="526">
    <token name="T_DOC_COMMENT">     * @param bool   $ignoreCase</token>
  </line>
  <line no="527">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="528">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertAttributeEquals</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actualAttributeName</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actualClassOrObject</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$delta</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_DNUMBER">0.0</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$maxDepth</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_LNUMBER">10</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$canonicalize</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">false</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$ignoreCase</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">false</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="529">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="530">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertEquals</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="531">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="532">
    <token name="T_WHITESPACE">            </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">readAttribute</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actualClassOrObject</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actualAttributeName</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="533">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="534">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$delta</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="535">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$maxDepth</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="536">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$canonicalize</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="537">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$ignoreCase</token>
  </line>
  <line no="538">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="539">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="540"/>
  <line no="541">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="542">
    <token name="T_DOC_COMMENT">     * Asserts that two variables are not equal.</token>
  </line>
  <line no="543">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="544">
    <token name="T_DOC_COMMENT">     * @param mixed  $expected</token>
  </line>
  <line no="545">
    <token name="T_DOC_COMMENT">     * @param mixed  $actual</token>
  </line>
  <line no="546">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="547">
    <token name="T_DOC_COMMENT">     * @param float  $delta</token>
  </line>
  <line no="548">
    <token name="T_DOC_COMMENT">     * @param int    $maxDepth</token>
  </line>
  <line no="549">
    <token name="T_DOC_COMMENT">     * @param bool   $canonicalize</token>
  </line>
  <line no="550">
    <token name="T_DOC_COMMENT">     * @param bool   $ignoreCase</token>
  </line>
  <line no="551">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="552">
    <token name="T_DOC_COMMENT">     * @since  Method available since Release 2.3.0</token>
  </line>
  <line no="553">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="554">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertNotEquals</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$delta</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_DNUMBER">0.0</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$maxDepth</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_LNUMBER">10</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$canonicalize</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">false</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$ignoreCase</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">false</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="555">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="556">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$constraint</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_Not</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="557">
    <token name="T_WHITESPACE">            </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_IsEqual</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="558">
    <token name="T_WHITESPACE">                </token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="559">
    <token name="T_WHITESPACE">                </token>
    <token name="T_VARIABLE">$delta</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="560">
    <token name="T_WHITESPACE">                </token>
    <token name="T_VARIABLE">$maxDepth</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="561">
    <token name="T_WHITESPACE">                </token>
    <token name="T_VARIABLE">$canonicalize</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="562">
    <token name="T_WHITESPACE">                </token>
    <token name="T_VARIABLE">$ignoreCase</token>
  </line>
  <line no="563">
    <token name="T_WHITESPACE">            </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="564">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="565"/>
  <line no="566">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertThat</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$constraint</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="567">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="568"/>
  <line no="569">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="570">
    <token name="T_DOC_COMMENT">     * Asserts that a variable is not equal to an attribute of an object.</token>
  </line>
  <line no="571">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="572">
    <token name="T_DOC_COMMENT">     * @param mixed  $expected</token>
  </line>
  <line no="573">
    <token name="T_DOC_COMMENT">     * @param string $actualAttributeName</token>
  </line>
  <line no="574">
    <token name="T_DOC_COMMENT">     * @param string $actualClassOrObject</token>
  </line>
  <line no="575">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="576">
    <token name="T_DOC_COMMENT">     * @param float  $delta</token>
  </line>
  <line no="577">
    <token name="T_DOC_COMMENT">     * @param int    $maxDepth</token>
  </line>
  <line no="578">
    <token name="T_DOC_COMMENT">     * @param bool   $canonicalize</token>
  </line>
  <line no="579">
    <token name="T_DOC_COMMENT">     * @param bool   $ignoreCase</token>
  </line>
  <line no="580">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="581">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertAttributeNotEquals</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actualAttributeName</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actualClassOrObject</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$delta</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_DNUMBER">0.0</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$maxDepth</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_LNUMBER">10</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$canonicalize</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">false</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$ignoreCase</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">false</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="582">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="583">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertNotEquals</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="584">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="585">
    <token name="T_WHITESPACE">            </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">readAttribute</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actualClassOrObject</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actualAttributeName</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="586">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="587">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$delta</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="588">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$maxDepth</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="589">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$canonicalize</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="590">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$ignoreCase</token>
  </line>
  <line no="591">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="592">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="593"/>
  <line no="594">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="595">
    <token name="T_DOC_COMMENT">     * Asserts that a variable is empty.</token>
  </line>
  <line no="596">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="597">
    <token name="T_DOC_COMMENT">     * @param mixed  $actual</token>
  </line>
  <line no="598">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="599">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="600">
    <token name="T_DOC_COMMENT">     * @throws PHPUnit_Framework_AssertionFailedError</token>
  </line>
  <line no="601">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="602">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertEmpty</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="603">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="604">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertThat</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">isEmpty</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="605">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="606"/>
  <line no="607">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="608">
    <token name="T_DOC_COMMENT">     * Asserts that a static attribute of a class or an attribute of an object</token>
  </line>
  <line no="609">
    <token name="T_DOC_COMMENT">     * is empty.</token>
  </line>
  <line no="610">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="611">
    <token name="T_DOC_COMMENT">     * @param string $haystackAttributeName</token>
  </line>
  <line no="612">
    <token name="T_DOC_COMMENT">     * @param mixed  $haystackClassOrObject</token>
  </line>
  <line no="613">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="614">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="615">
    <token name="T_DOC_COMMENT">     * @since Method available since Release 3.5.0</token>
  </line>
  <line no="616">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="617">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertAttributeEmpty</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$haystackAttributeName</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$haystackClassOrObject</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="618">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="619">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertEmpty</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="620">
    <token name="T_WHITESPACE">            </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">readAttribute</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$haystackClassOrObject</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$haystackAttributeName</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="621">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$message</token>
  </line>
  <line no="622">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="623">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="624"/>
  <line no="625">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="626">
    <token name="T_DOC_COMMENT">     * Asserts that a variable is not empty.</token>
  </line>
  <line no="627">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="628">
    <token name="T_DOC_COMMENT">     * @param mixed  $actual</token>
  </line>
  <line no="629">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="630">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="631">
    <token name="T_DOC_COMMENT">     * @throws PHPUnit_Framework_AssertionFailedError</token>
  </line>
  <line no="632">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="633">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertNotEmpty</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="634">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="635">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertThat</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">logicalNot</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">isEmpty</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="636">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="637"/>
  <line no="638">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="639">
    <token name="T_DOC_COMMENT">     * Asserts that a static attribute of a class or an attribute of an object</token>
  </line>
  <line no="640">
    <token name="T_DOC_COMMENT">     * is not empty.</token>
  </line>
  <line no="641">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="642">
    <token name="T_DOC_COMMENT">     * @param string $haystackAttributeName</token>
  </line>
  <line no="643">
    <token name="T_DOC_COMMENT">     * @param mixed  $haystackClassOrObject</token>
  </line>
  <line no="644">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="645">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="646">
    <token name="T_DOC_COMMENT">     * @since Method available since Release 3.5.0</token>
  </line>
  <line no="647">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="648">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertAttributeNotEmpty</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$haystackAttributeName</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$haystackClassOrObject</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="649">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="650">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertNotEmpty</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="651">
    <token name="T_WHITESPACE">            </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">readAttribute</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$haystackClassOrObject</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$haystackAttributeName</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="652">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$message</token>
  </line>
  <line no="653">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="654">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="655"/>
  <line no="656">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="657">
    <token name="T_DOC_COMMENT">     * Asserts that a value is greater than another value.</token>
  </line>
  <line no="658">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="659">
    <token name="T_DOC_COMMENT">     * @param mixed  $expected</token>
  </line>
  <line no="660">
    <token name="T_DOC_COMMENT">     * @param mixed  $actual</token>
  </line>
  <line no="661">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="662">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="663">
    <token name="T_DOC_COMMENT">     * @since  Method available since Release 3.1.0</token>
  </line>
  <line no="664">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="665">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertGreaterThan</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="666">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="667">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertThat</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">greaterThan</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="668">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="669"/>
  <line no="670">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="671">
    <token name="T_DOC_COMMENT">     * Asserts that an attribute is greater than another value.</token>
  </line>
  <line no="672">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="673">
    <token name="T_DOC_COMMENT">     * @param mixed  $expected</token>
  </line>
  <line no="674">
    <token name="T_DOC_COMMENT">     * @param string $actualAttributeName</token>
  </line>
  <line no="675">
    <token name="T_DOC_COMMENT">     * @param string $actualClassOrObject</token>
  </line>
  <line no="676">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="677">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="678">
    <token name="T_DOC_COMMENT">     * @since  Method available since Release 3.1.0</token>
  </line>
  <line no="679">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="680">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertAttributeGreaterThan</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actualAttributeName</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actualClassOrObject</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="681">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="682">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertGreaterThan</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="683">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="684">
    <token name="T_WHITESPACE">            </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">readAttribute</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actualClassOrObject</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actualAttributeName</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="685">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$message</token>
  </line>
  <line no="686">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="687">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="688"/>
  <line no="689">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="690">
    <token name="T_DOC_COMMENT">     * Asserts that a value is greater than or equal to another value.</token>
  </line>
  <line no="691">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="692">
    <token name="T_DOC_COMMENT">     * @param mixed  $expected</token>
  </line>
  <line no="693">
    <token name="T_DOC_COMMENT">     * @param mixed  $actual</token>
  </line>
  <line no="694">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="695">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="696">
    <token name="T_DOC_COMMENT">     * @since  Method available since Release 3.1.0</token>
  </line>
  <line no="697">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="698">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertGreaterThanOrEqual</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="699">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="700">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertThat</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="701">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="702">
    <token name="T_WHITESPACE">            </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">greaterThanOrEqual</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="703">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$message</token>
  </line>
  <line no="704">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="705">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="706"/>
  <line no="707">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="708">
    <token name="T_DOC_COMMENT">     * Asserts that an attribute is greater than or equal to another value.</token>
  </line>
  <line no="709">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="710">
    <token name="T_DOC_COMMENT">     * @param mixed  $expected</token>
  </line>
  <line no="711">
    <token name="T_DOC_COMMENT">     * @param string $actualAttributeName</token>
  </line>
  <line no="712">
    <token name="T_DOC_COMMENT">     * @param string $actualClassOrObject</token>
  </line>
  <line no="713">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="714">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="715">
    <token name="T_DOC_COMMENT">     * @since  Method available since Release 3.1.0</token>
  </line>
  <line no="716">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="717">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertAttributeGreaterThanOrEqual</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actualAttributeName</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actualClassOrObject</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="718">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="719">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertGreaterThanOrEqual</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="720">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="721">
    <token name="T_WHITESPACE">            </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">readAttribute</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actualClassOrObject</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actualAttributeName</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="722">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$message</token>
  </line>
  <line no="723">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="724">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="725"/>
  <line no="726">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="727">
    <token name="T_DOC_COMMENT">     * Asserts that a value is smaller than another value.</token>
  </line>
  <line no="728">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="729">
    <token name="T_DOC_COMMENT">     * @param mixed  $expected</token>
  </line>
  <line no="730">
    <token name="T_DOC_COMMENT">     * @param mixed  $actual</token>
  </line>
  <line no="731">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="732">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="733">
    <token name="T_DOC_COMMENT">     * @since  Method available since Release 3.1.0</token>
  </line>
  <line no="734">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="735">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertLessThan</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="736">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="737">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertThat</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">lessThan</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="738">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="739"/>
  <line no="740">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="741">
    <token name="T_DOC_COMMENT">     * Asserts that an attribute is smaller than another value.</token>
  </line>
  <line no="742">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="743">
    <token name="T_DOC_COMMENT">     * @param mixed  $expected</token>
  </line>
  <line no="744">
    <token name="T_DOC_COMMENT">     * @param string $actualAttributeName</token>
  </line>
  <line no="745">
    <token name="T_DOC_COMMENT">     * @param string $actualClassOrObject</token>
  </line>
  <line no="746">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="747">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="748">
    <token name="T_DOC_COMMENT">     * @since  Method available since Release 3.1.0</token>
  </line>
  <line no="749">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="750">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertAttributeLessThan</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actualAttributeName</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actualClassOrObject</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="751">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="752">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertLessThan</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="753">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="754">
    <token name="T_WHITESPACE">            </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">readAttribute</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actualClassOrObject</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actualAttributeName</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="755">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$message</token>
  </line>
  <line no="756">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="757">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="758"/>
  <line no="759">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="760">
    <token name="T_DOC_COMMENT">     * Asserts that a value is smaller than or equal to another value.</token>
  </line>
  <line no="761">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="762">
    <token name="T_DOC_COMMENT">     * @param mixed  $expected</token>
  </line>
  <line no="763">
    <token name="T_DOC_COMMENT">     * @param mixed  $actual</token>
  </line>
  <line no="764">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="765">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="766">
    <token name="T_DOC_COMMENT">     * @since  Method available since Release 3.1.0</token>
  </line>
  <line no="767">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="768">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertLessThanOrEqual</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="769">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="770">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertThat</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">lessThanOrEqual</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="771">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="772"/>
  <line no="773">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="774">
    <token name="T_DOC_COMMENT">     * Asserts that an attribute is smaller than or equal to another value.</token>
  </line>
  <line no="775">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="776">
    <token name="T_DOC_COMMENT">     * @param mixed  $expected</token>
  </line>
  <line no="777">
    <token name="T_DOC_COMMENT">     * @param string $actualAttributeName</token>
  </line>
  <line no="778">
    <token name="T_DOC_COMMENT">     * @param string $actualClassOrObject</token>
  </line>
  <line no="779">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="780">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="781">
    <token name="T_DOC_COMMENT">     * @since  Method available since Release 3.1.0</token>
  </line>
  <line no="782">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="783">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertAttributeLessThanOrEqual</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actualAttributeName</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actualClassOrObject</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="784">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="785">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertLessThanOrEqual</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="786">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="787">
    <token name="T_WHITESPACE">            </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">readAttribute</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actualClassOrObject</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actualAttributeName</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="788">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$message</token>
  </line>
  <line no="789">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="790">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="791"/>
  <line no="792">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="793">
    <token name="T_DOC_COMMENT">     * Asserts that the contents of one file is equal to the contents of another</token>
  </line>
  <line no="794">
    <token name="T_DOC_COMMENT">     * file.</token>
  </line>
  <line no="795">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="796">
    <token name="T_DOC_COMMENT">     * @param string $expected</token>
  </line>
  <line no="797">
    <token name="T_DOC_COMMENT">     * @param string $actual</token>
  </line>
  <line no="798">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="799">
    <token name="T_DOC_COMMENT">     * @param bool   $canonicalize</token>
  </line>
  <line no="800">
    <token name="T_DOC_COMMENT">     * @param bool   $ignoreCase</token>
  </line>
  <line no="801">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="802">
    <token name="T_DOC_COMMENT">     * @since  Method available since Release 3.2.14</token>
  </line>
  <line no="803">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="804">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertFileEquals</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$canonicalize</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">false</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$ignoreCase</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">false</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="805">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="806">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertFileExists</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="807">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertFileExists</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="808"/>
  <line no="809">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertEquals</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="810">
    <token name="T_WHITESPACE">            </token>
    <token name="T_STRING">file_get_contents</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="811">
    <token name="T_WHITESPACE">            </token>
    <token name="T_STRING">file_get_contents</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="812">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="813">
    <token name="T_WHITESPACE">            </token>
    <token name="T_LNUMBER">0</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="814">
    <token name="T_WHITESPACE">            </token>
    <token name="T_LNUMBER">10</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="815">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$canonicalize</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="816">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$ignoreCase</token>
  </line>
  <line no="817">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="818">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="819"/>
  <line no="820">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="821">
    <token name="T_DOC_COMMENT">     * Asserts that the contents of one file is not equal to the contents of</token>
  </line>
  <line no="822">
    <token name="T_DOC_COMMENT">     * another file.</token>
  </line>
  <line no="823">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="824">
    <token name="T_DOC_COMMENT">     * @param string $expected</token>
  </line>
  <line no="825">
    <token name="T_DOC_COMMENT">     * @param string $actual</token>
  </line>
  <line no="826">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="827">
    <token name="T_DOC_COMMENT">     * @param bool   $canonicalize</token>
  </line>
  <line no="828">
    <token name="T_DOC_COMMENT">     * @param bool   $ignoreCase</token>
  </line>
  <line no="829">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="830">
    <token name="T_DOC_COMMENT">     * @since  Method available since Release 3.2.14</token>
  </line>
  <line no="831">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="832">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertFileNotEquals</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$canonicalize</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">false</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$ignoreCase</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">false</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="833">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="834">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertFileExists</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="835">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertFileExists</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="836"/>
  <line no="837">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertNotEquals</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="838">
    <token name="T_WHITESPACE">            </token>
    <token name="T_STRING">file_get_contents</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="839">
    <token name="T_WHITESPACE">            </token>
    <token name="T_STRING">file_get_contents</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="840">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="841">
    <token name="T_WHITESPACE">            </token>
    <token name="T_LNUMBER">0</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="842">
    <token name="T_WHITESPACE">            </token>
    <token name="T_LNUMBER">10</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="843">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$canonicalize</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="844">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$ignoreCase</token>
  </line>
  <line no="845">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="846">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="847"/>
  <line no="848">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="849">
    <token name="T_DOC_COMMENT">     * Asserts that the contents of a string is equal</token>
  </line>
  <line no="850">
    <token name="T_DOC_COMMENT">     * to the contents of a file.</token>
  </line>
  <line no="851">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="852">
    <token name="T_DOC_COMMENT">     * @param string $expectedFile</token>
  </line>
  <line no="853">
    <token name="T_DOC_COMMENT">     * @param string $actualString</token>
  </line>
  <line no="854">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="855">
    <token name="T_DOC_COMMENT">     * @param bool   $canonicalize</token>
  </line>
  <line no="856">
    <token name="T_DOC_COMMENT">     * @param bool   $ignoreCase</token>
  </line>
  <line no="857">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="858">
    <token name="T_DOC_COMMENT">     * @since  Method available since Release 3.3.0</token>
  </line>
  <line no="859">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="860">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertStringEqualsFile</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expectedFile</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actualString</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$canonicalize</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">false</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$ignoreCase</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">false</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="861">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="862">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertFileExists</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expectedFile</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="863"/>
  <line no="864">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertEquals</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="865">
    <token name="T_WHITESPACE">            </token>
    <token name="T_STRING">file_get_contents</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expectedFile</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="866">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$actualString</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="867">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="868">
    <token name="T_WHITESPACE">            </token>
    <token name="T_LNUMBER">0</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="869">
    <token name="T_WHITESPACE">            </token>
    <token name="T_LNUMBER">10</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="870">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$canonicalize</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="871">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$ignoreCase</token>
  </line>
  <line no="872">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="873">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="874"/>
  <line no="875">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="876">
    <token name="T_DOC_COMMENT">     * Asserts that the contents of a string is not equal</token>
  </line>
  <line no="877">
    <token name="T_DOC_COMMENT">     * to the contents of a file.</token>
  </line>
  <line no="878">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="879">
    <token name="T_DOC_COMMENT">     * @param string $expectedFile</token>
  </line>
  <line no="880">
    <token name="T_DOC_COMMENT">     * @param string $actualString</token>
  </line>
  <line no="881">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="882">
    <token name="T_DOC_COMMENT">     * @param bool   $canonicalize</token>
  </line>
  <line no="883">
    <token name="T_DOC_COMMENT">     * @param bool   $ignoreCase</token>
  </line>
  <line no="884">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="885">
    <token name="T_DOC_COMMENT">     * @since  Method available since Release 3.3.0</token>
  </line>
  <line no="886">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="887">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertStringNotEqualsFile</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expectedFile</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actualString</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$canonicalize</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">false</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$ignoreCase</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">false</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="888">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="889">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertFileExists</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expectedFile</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="890"/>
  <line no="891">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertNotEquals</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="892">
    <token name="T_WHITESPACE">            </token>
    <token name="T_STRING">file_get_contents</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expectedFile</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="893">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$actualString</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="894">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="895">
    <token name="T_WHITESPACE">            </token>
    <token name="T_LNUMBER">0</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="896">
    <token name="T_WHITESPACE">            </token>
    <token name="T_LNUMBER">10</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="897">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$canonicalize</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="898">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$ignoreCase</token>
  </line>
  <line no="899">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="900">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="901"/>
  <line no="902">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="903">
    <token name="T_DOC_COMMENT">     * Asserts that a file exists.</token>
  </line>
  <line no="904">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="905">
    <token name="T_DOC_COMMENT">     * @param string $filename</token>
  </line>
  <line no="906">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="907">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="908">
    <token name="T_DOC_COMMENT">     * @since  Method available since Release 3.0.0</token>
  </line>
  <line no="909">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="910">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertFileExists</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$filename</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="911">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="912">
    <token name="T_WHITESPACE">        </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_STRING">is_string</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$filename</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="913">
    <token name="T_WHITESPACE">            </token>
    <token name="T_THROW">throw</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Util_InvalidArgumentHelper</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">factory</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_LNUMBER">1</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'string'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="914">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="915"/>
  <line no="916">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$constraint</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_FileExists</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="917"/>
  <line no="918">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertThat</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$filename</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$constraint</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="919">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="920"/>
  <line no="921">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="922">
    <token name="T_DOC_COMMENT">     * Asserts that a file does not exist.</token>
  </line>
  <line no="923">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="924">
    <token name="T_DOC_COMMENT">     * @param string $filename</token>
  </line>
  <line no="925">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="926">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="927">
    <token name="T_DOC_COMMENT">     * @since  Method available since Release 3.0.0</token>
  </line>
  <line no="928">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="929">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertFileNotExists</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$filename</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="930">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="931">
    <token name="T_WHITESPACE">        </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_STRING">is_string</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$filename</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="932">
    <token name="T_WHITESPACE">            </token>
    <token name="T_THROW">throw</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Util_InvalidArgumentHelper</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">factory</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_LNUMBER">1</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'string'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="933">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="934"/>
  <line no="935">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$constraint</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_Not</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="936">
    <token name="T_WHITESPACE">            </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_FileExists</token>
  </line>
  <line no="937">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="938"/>
  <line no="939">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertThat</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$filename</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$constraint</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="940">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="941"/>
  <line no="942">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="943">
    <token name="T_DOC_COMMENT">     * Asserts that a condition is true.</token>
  </line>
  <line no="944">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="945">
    <token name="T_DOC_COMMENT">     * @param bool   $condition</token>
  </line>
  <line no="946">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="947">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="948">
    <token name="T_DOC_COMMENT">     * @throws PHPUnit_Framework_AssertionFailedError</token>
  </line>
  <line no="949">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="950">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertTrue</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$condition</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="951">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="952">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertThat</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$condition</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">isTrue</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="953">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="954"/>
  <line no="955">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="956">
    <token name="T_DOC_COMMENT">     * Asserts that a condition is not true.</token>
  </line>
  <line no="957">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="958">
    <token name="T_DOC_COMMENT">     * @param bool   $condition</token>
  </line>
  <line no="959">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="960">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="961">
    <token name="T_DOC_COMMENT">     * @throws PHPUnit_Framework_AssertionFailedError</token>
  </line>
  <line no="962">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="963">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertNotTrue</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$condition</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="964">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="965">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertThat</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$condition</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">logicalNot</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">isTrue</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="966">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="967"/>
  <line no="968">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="969">
    <token name="T_DOC_COMMENT">     * Asserts that a condition is false.</token>
  </line>
  <line no="970">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="971">
    <token name="T_DOC_COMMENT">     * @param bool   $condition</token>
  </line>
  <line no="972">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="973">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="974">
    <token name="T_DOC_COMMENT">     * @throws PHPUnit_Framework_AssertionFailedError</token>
  </line>
  <line no="975">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="976">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertFalse</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$condition</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="977">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="978">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertThat</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$condition</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">isFalse</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="979">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="980"/>
  <line no="981">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="982">
    <token name="T_DOC_COMMENT">     * Asserts that a condition is not false.</token>
  </line>
  <line no="983">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="984">
    <token name="T_DOC_COMMENT">     * @param bool   $condition</token>
  </line>
  <line no="985">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="986">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="987">
    <token name="T_DOC_COMMENT">     * @throws PHPUnit_Framework_AssertionFailedError</token>
  </line>
  <line no="988">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="989">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertNotFalse</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$condition</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="990">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="991">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertThat</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$condition</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">logicalNot</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">isFalse</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="992">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="993"/>
  <line no="994">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="995">
    <token name="T_DOC_COMMENT">     * Asserts that a variable is not null.</token>
  </line>
  <line no="996">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="997">
    <token name="T_DOC_COMMENT">     * @param mixed  $actual</token>
  </line>
  <line no="998">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="999">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1000">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertNotNull</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="1001">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1002">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertThat</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">logicalNot</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">isNull</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1003">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1004"/>
  <line no="1005">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1006">
    <token name="T_DOC_COMMENT">     * Asserts that a variable is null.</token>
  </line>
  <line no="1007">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1008">
    <token name="T_DOC_COMMENT">     * @param mixed  $actual</token>
  </line>
  <line no="1009">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1010">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1011">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertNull</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="1012">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1013">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertThat</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">isNull</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1014">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1015"/>
  <line no="1016">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1017">
    <token name="T_DOC_COMMENT">     * Asserts that a class has a specified attribute.</token>
  </line>
  <line no="1018">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1019">
    <token name="T_DOC_COMMENT">     * @param string $attributeName</token>
  </line>
  <line no="1020">
    <token name="T_DOC_COMMENT">     * @param string $className</token>
  </line>
  <line no="1021">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1022">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1023">
    <token name="T_DOC_COMMENT">     * @since  Method available since Release 3.1.0</token>
  </line>
  <line no="1024">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1025">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertClassHasAttribute</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$attributeName</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$className</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="1026">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1027">
    <token name="T_WHITESPACE">        </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_STRING">is_string</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$attributeName</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1028">
    <token name="T_WHITESPACE">            </token>
    <token name="T_THROW">throw</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Util_InvalidArgumentHelper</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">factory</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_LNUMBER">1</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'string'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1029">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1030"/>
  <line no="1031">
    <token name="T_WHITESPACE">        </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_STRING">preg_match</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'/[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*/'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$attributeName</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1032">
    <token name="T_WHITESPACE">            </token>
    <token name="T_THROW">throw</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Util_InvalidArgumentHelper</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">factory</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_LNUMBER">1</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'valid attribute name'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1033">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1034"/>
  <line no="1035">
    <token name="T_WHITESPACE">        </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_STRING">is_string</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$className</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_BOOLEAN_OR">||</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_STRING">class_exists</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$className</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1036">
    <token name="T_WHITESPACE">            </token>
    <token name="T_THROW">throw</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Util_InvalidArgumentHelper</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">factory</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_LNUMBER">2</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'class name'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$className</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1037">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1038"/>
  <line no="1039">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$constraint</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_ClassHasAttribute</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="1040">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$attributeName</token>
  </line>
  <line no="1041">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1042"/>
  <line no="1043">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertThat</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$className</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$constraint</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1044">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1045"/>
  <line no="1046">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1047">
    <token name="T_DOC_COMMENT">     * Asserts that a class does not have a specified attribute.</token>
  </line>
  <line no="1048">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1049">
    <token name="T_DOC_COMMENT">     * @param string $attributeName</token>
  </line>
  <line no="1050">
    <token name="T_DOC_COMMENT">     * @param string $className</token>
  </line>
  <line no="1051">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1052">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1053">
    <token name="T_DOC_COMMENT">     * @since  Method available since Release 3.1.0</token>
  </line>
  <line no="1054">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1055">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertClassNotHasAttribute</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$attributeName</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$className</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="1056">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1057">
    <token name="T_WHITESPACE">        </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_STRING">is_string</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$attributeName</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1058">
    <token name="T_WHITESPACE">            </token>
    <token name="T_THROW">throw</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Util_InvalidArgumentHelper</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">factory</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_LNUMBER">1</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'string'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1059">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1060"/>
  <line no="1061">
    <token name="T_WHITESPACE">        </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_STRING">preg_match</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'/[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*/'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$attributeName</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1062">
    <token name="T_WHITESPACE">            </token>
    <token name="T_THROW">throw</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Util_InvalidArgumentHelper</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">factory</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_LNUMBER">1</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'valid attribute name'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1063">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1064"/>
  <line no="1065">
    <token name="T_WHITESPACE">        </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_STRING">is_string</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$className</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_BOOLEAN_OR">||</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_STRING">class_exists</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$className</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1066">
    <token name="T_WHITESPACE">            </token>
    <token name="T_THROW">throw</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Util_InvalidArgumentHelper</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">factory</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_LNUMBER">2</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'class name'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$className</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1067">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1068"/>
  <line no="1069">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$constraint</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_Not</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="1070">
    <token name="T_WHITESPACE">            </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_ClassHasAttribute</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$attributeName</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="1071">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1072"/>
  <line no="1073">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertThat</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$className</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$constraint</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1074">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1075"/>
  <line no="1076">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1077">
    <token name="T_DOC_COMMENT">     * Asserts that a class has a specified static attribute.</token>
  </line>
  <line no="1078">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1079">
    <token name="T_DOC_COMMENT">     * @param string $attributeName</token>
  </line>
  <line no="1080">
    <token name="T_DOC_COMMENT">     * @param string $className</token>
  </line>
  <line no="1081">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1082">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1083">
    <token name="T_DOC_COMMENT">     * @since  Method available since Release 3.1.0</token>
  </line>
  <line no="1084">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1085">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertClassHasStaticAttribute</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$attributeName</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$className</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="1086">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1087">
    <token name="T_WHITESPACE">        </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_STRING">is_string</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$attributeName</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1088">
    <token name="T_WHITESPACE">            </token>
    <token name="T_THROW">throw</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Util_InvalidArgumentHelper</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">factory</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_LNUMBER">1</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'string'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1089">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1090"/>
  <line no="1091">
    <token name="T_WHITESPACE">        </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_STRING">preg_match</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'/[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*/'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$attributeName</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1092">
    <token name="T_WHITESPACE">            </token>
    <token name="T_THROW">throw</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Util_InvalidArgumentHelper</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">factory</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_LNUMBER">1</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'valid attribute name'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1093">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1094"/>
  <line no="1095">
    <token name="T_WHITESPACE">        </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_STRING">is_string</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$className</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_BOOLEAN_OR">||</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_STRING">class_exists</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$className</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1096">
    <token name="T_WHITESPACE">            </token>
    <token name="T_THROW">throw</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Util_InvalidArgumentHelper</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">factory</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_LNUMBER">2</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'class name'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$className</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1097">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1098"/>
  <line no="1099">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$constraint</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_ClassHasStaticAttribute</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="1100">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$attributeName</token>
  </line>
  <line no="1101">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1102"/>
  <line no="1103">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertThat</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$className</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$constraint</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1104">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1105"/>
  <line no="1106">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1107">
    <token name="T_DOC_COMMENT">     * Asserts that a class does not have a specified static attribute.</token>
  </line>
  <line no="1108">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1109">
    <token name="T_DOC_COMMENT">     * @param string $attributeName</token>
  </line>
  <line no="1110">
    <token name="T_DOC_COMMENT">     * @param string $className</token>
  </line>
  <line no="1111">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1112">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1113">
    <token name="T_DOC_COMMENT">     * @since  Method available since Release 3.1.0</token>
  </line>
  <line no="1114">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1115">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertClassNotHasStaticAttribute</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$attributeName</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$className</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="1116">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1117">
    <token name="T_WHITESPACE">        </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_STRING">is_string</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$attributeName</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1118">
    <token name="T_WHITESPACE">            </token>
    <token name="T_THROW">throw</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Util_InvalidArgumentHelper</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">factory</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_LNUMBER">1</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'string'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1119">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1120"/>
  <line no="1121">
    <token name="T_WHITESPACE">        </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_STRING">preg_match</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'/[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*/'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$attributeName</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1122">
    <token name="T_WHITESPACE">            </token>
    <token name="T_THROW">throw</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Util_InvalidArgumentHelper</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">factory</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_LNUMBER">1</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'valid attribute name'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1123">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1124"/>
  <line no="1125">
    <token name="T_WHITESPACE">        </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_STRING">is_string</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$className</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_BOOLEAN_OR">||</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_STRING">class_exists</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$className</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1126">
    <token name="T_WHITESPACE">            </token>
    <token name="T_THROW">throw</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Util_InvalidArgumentHelper</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">factory</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_LNUMBER">2</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'class name'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$className</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1127">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1128"/>
  <line no="1129">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$constraint</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_Not</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="1130">
    <token name="T_WHITESPACE">            </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_ClassHasStaticAttribute</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="1131">
    <token name="T_WHITESPACE">                </token>
    <token name="T_VARIABLE">$attributeName</token>
  </line>
  <line no="1132">
    <token name="T_WHITESPACE">            </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="1133">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1134"/>
  <line no="1135">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertThat</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$className</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$constraint</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1136">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1137"/>
  <line no="1138">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1139">
    <token name="T_DOC_COMMENT">     * Asserts that an object has a specified attribute.</token>
  </line>
  <line no="1140">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1141">
    <token name="T_DOC_COMMENT">     * @param string $attributeName</token>
  </line>
  <line no="1142">
    <token name="T_DOC_COMMENT">     * @param object $object</token>
  </line>
  <line no="1143">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1144">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1145">
    <token name="T_DOC_COMMENT">     * @since  Method available since Release 3.0.0</token>
  </line>
  <line no="1146">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1147">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertObjectHasAttribute</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$attributeName</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$object</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="1148">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1149">
    <token name="T_WHITESPACE">        </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_STRING">is_string</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$attributeName</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1150">
    <token name="T_WHITESPACE">            </token>
    <token name="T_THROW">throw</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Util_InvalidArgumentHelper</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">factory</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_LNUMBER">1</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'string'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1151">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1152"/>
  <line no="1153">
    <token name="T_WHITESPACE">        </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_STRING">preg_match</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'/[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*/'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$attributeName</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1154">
    <token name="T_WHITESPACE">            </token>
    <token name="T_THROW">throw</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Util_InvalidArgumentHelper</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">factory</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_LNUMBER">1</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'valid attribute name'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1155">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1156"/>
  <line no="1157">
    <token name="T_WHITESPACE">        </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_STRING">is_object</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$object</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1158">
    <token name="T_WHITESPACE">            </token>
    <token name="T_THROW">throw</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Util_InvalidArgumentHelper</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">factory</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_LNUMBER">2</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'object'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1159">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1160"/>
  <line no="1161">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$constraint</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_ObjectHasAttribute</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="1162">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$attributeName</token>
  </line>
  <line no="1163">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1164"/>
  <line no="1165">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertThat</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$object</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$constraint</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1166">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1167"/>
  <line no="1168">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1169">
    <token name="T_DOC_COMMENT">     * Asserts that an object does not have a specified attribute.</token>
  </line>
  <line no="1170">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1171">
    <token name="T_DOC_COMMENT">     * @param string $attributeName</token>
  </line>
  <line no="1172">
    <token name="T_DOC_COMMENT">     * @param object $object</token>
  </line>
  <line no="1173">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1174">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1175">
    <token name="T_DOC_COMMENT">     * @since  Method available since Release 3.0.0</token>
  </line>
  <line no="1176">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1177">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertObjectNotHasAttribute</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$attributeName</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$object</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="1178">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1179">
    <token name="T_WHITESPACE">        </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_STRING">is_string</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$attributeName</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1180">
    <token name="T_WHITESPACE">            </token>
    <token name="T_THROW">throw</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Util_InvalidArgumentHelper</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">factory</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_LNUMBER">1</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'string'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1181">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1182"/>
  <line no="1183">
    <token name="T_WHITESPACE">        </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_STRING">preg_match</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'/[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*/'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$attributeName</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1184">
    <token name="T_WHITESPACE">            </token>
    <token name="T_THROW">throw</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Util_InvalidArgumentHelper</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">factory</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_LNUMBER">1</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'valid attribute name'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1185">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1186"/>
  <line no="1187">
    <token name="T_WHITESPACE">        </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_STRING">is_object</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$object</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1188">
    <token name="T_WHITESPACE">            </token>
    <token name="T_THROW">throw</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Util_InvalidArgumentHelper</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">factory</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_LNUMBER">2</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'object'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1189">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1190"/>
  <line no="1191">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$constraint</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_Not</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="1192">
    <token name="T_WHITESPACE">            </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_ObjectHasAttribute</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$attributeName</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="1193">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1194"/>
  <line no="1195">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertThat</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$object</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$constraint</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1196">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1197"/>
  <line no="1198">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1199">
    <token name="T_DOC_COMMENT">     * Asserts that two variables have the same type and value.</token>
  </line>
  <line no="1200">
    <token name="T_DOC_COMMENT">     * Used on objects, it asserts that two variables reference</token>
  </line>
  <line no="1201">
    <token name="T_DOC_COMMENT">     * the same object.</token>
  </line>
  <line no="1202">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1203">
    <token name="T_DOC_COMMENT">     * @param mixed  $expected</token>
  </line>
  <line no="1204">
    <token name="T_DOC_COMMENT">     * @param mixed  $actual</token>
  </line>
  <line no="1205">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1206">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1207">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertSame</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="1208">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1209">
    <token name="T_WHITESPACE">        </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_STRING">is_bool</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_BOOLEAN_AND">&amp;&amp;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">is_bool</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1210">
    <token name="T_WHITESPACE">            </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertEquals</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1211">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_ELSE">else</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1212">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$constraint</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_IsIdentical</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="1213">
    <token name="T_WHITESPACE">                </token>
    <token name="T_VARIABLE">$expected</token>
  </line>
  <line no="1214">
    <token name="T_WHITESPACE">            </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1215"/>
  <line no="1216">
    <token name="T_WHITESPACE">            </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertThat</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$constraint</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1217">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1218">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1219"/>
  <line no="1220">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1221">
    <token name="T_DOC_COMMENT">     * Asserts that a variable and an attribute of an object have the same type</token>
  </line>
  <line no="1222">
    <token name="T_DOC_COMMENT">     * and value.</token>
  </line>
  <line no="1223">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1224">
    <token name="T_DOC_COMMENT">     * @param mixed  $expected</token>
  </line>
  <line no="1225">
    <token name="T_DOC_COMMENT">     * @param string $actualAttributeName</token>
  </line>
  <line no="1226">
    <token name="T_DOC_COMMENT">     * @param object $actualClassOrObject</token>
  </line>
  <line no="1227">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1228">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1229">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertAttributeSame</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actualAttributeName</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actualClassOrObject</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="1230">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1231">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertSame</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="1232">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="1233">
    <token name="T_WHITESPACE">            </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">readAttribute</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actualClassOrObject</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actualAttributeName</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="1234">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$message</token>
  </line>
  <line no="1235">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1236">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1237"/>
  <line no="1238">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1239">
    <token name="T_DOC_COMMENT">     * Asserts that two variables do not have the same type and value.</token>
  </line>
  <line no="1240">
    <token name="T_DOC_COMMENT">     * Used on objects, it asserts that two variables do not reference</token>
  </line>
  <line no="1241">
    <token name="T_DOC_COMMENT">     * the same object.</token>
  </line>
  <line no="1242">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1243">
    <token name="T_DOC_COMMENT">     * @param mixed  $expected</token>
  </line>
  <line no="1244">
    <token name="T_DOC_COMMENT">     * @param mixed  $actual</token>
  </line>
  <line no="1245">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1246">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1247">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertNotSame</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="1248">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1249">
    <token name="T_WHITESPACE">        </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_STRING">is_bool</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_BOOLEAN_AND">&amp;&amp;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">is_bool</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1250">
    <token name="T_WHITESPACE">            </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertNotEquals</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1251">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_ELSE">else</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1252">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$constraint</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_Not</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="1253">
    <token name="T_WHITESPACE">                </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_IsIdentical</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="1254">
    <token name="T_WHITESPACE">            </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1255"/>
  <line no="1256">
    <token name="T_WHITESPACE">            </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertThat</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$constraint</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1257">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1258">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1259"/>
  <line no="1260">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1261">
    <token name="T_DOC_COMMENT">     * Asserts that a variable and an attribute of an object do not have the</token>
  </line>
  <line no="1262">
    <token name="T_DOC_COMMENT">     * same type and value.</token>
  </line>
  <line no="1263">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1264">
    <token name="T_DOC_COMMENT">     * @param mixed  $expected</token>
  </line>
  <line no="1265">
    <token name="T_DOC_COMMENT">     * @param string $actualAttributeName</token>
  </line>
  <line no="1266">
    <token name="T_DOC_COMMENT">     * @param object $actualClassOrObject</token>
  </line>
  <line no="1267">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1268">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1269">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertAttributeNotSame</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actualAttributeName</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actualClassOrObject</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="1270">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1271">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertNotSame</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="1272">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="1273">
    <token name="T_WHITESPACE">            </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">readAttribute</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actualClassOrObject</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actualAttributeName</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="1274">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$message</token>
  </line>
  <line no="1275">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1276">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1277"/>
  <line no="1278">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1279">
    <token name="T_DOC_COMMENT">     * Asserts that a variable is of a given type.</token>
  </line>
  <line no="1280">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1281">
    <token name="T_DOC_COMMENT">     * @param string $expected</token>
  </line>
  <line no="1282">
    <token name="T_DOC_COMMENT">     * @param mixed  $actual</token>
  </line>
  <line no="1283">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1284">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1285">
    <token name="T_DOC_COMMENT">     * @since Method available since Release 3.5.0</token>
  </line>
  <line no="1286">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1287">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertInstanceOf</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="1288">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1289">
    <token name="T_WHITESPACE">        </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_STRING">is_string</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_BOOLEAN_AND">&amp;&amp;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_STRING">class_exists</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_BOOLEAN_OR">||</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">interface_exists</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1290">
    <token name="T_WHITESPACE">            </token>
    <token name="T_THROW">throw</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Util_InvalidArgumentHelper</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">factory</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_LNUMBER">1</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'class or interface name'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1291">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1292"/>
  <line no="1293">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$constraint</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_IsInstanceOf</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="1294">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$expected</token>
  </line>
  <line no="1295">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1296"/>
  <line no="1297">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertThat</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$constraint</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1298">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1299"/>
  <line no="1300">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1301">
    <token name="T_DOC_COMMENT">     * Asserts that an attribute is of a given type.</token>
  </line>
  <line no="1302">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1303">
    <token name="T_DOC_COMMENT">     * @param string $expected</token>
  </line>
  <line no="1304">
    <token name="T_DOC_COMMENT">     * @param string $attributeName</token>
  </line>
  <line no="1305">
    <token name="T_DOC_COMMENT">     * @param mixed  $classOrObject</token>
  </line>
  <line no="1306">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1307">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1308">
    <token name="T_DOC_COMMENT">     * @since Method available since Release 3.5.0</token>
  </line>
  <line no="1309">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1310">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertAttributeInstanceOf</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$attributeName</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$classOrObject</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="1311">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1312">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertInstanceOf</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="1313">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="1314">
    <token name="T_WHITESPACE">            </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">readAttribute</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$classOrObject</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$attributeName</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="1315">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$message</token>
  </line>
  <line no="1316">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1317">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1318"/>
  <line no="1319">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1320">
    <token name="T_DOC_COMMENT">     * Asserts that a variable is not of a given type.</token>
  </line>
  <line no="1321">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1322">
    <token name="T_DOC_COMMENT">     * @param string $expected</token>
  </line>
  <line no="1323">
    <token name="T_DOC_COMMENT">     * @param mixed  $actual</token>
  </line>
  <line no="1324">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1325">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1326">
    <token name="T_DOC_COMMENT">     * @since Method available since Release 3.5.0</token>
  </line>
  <line no="1327">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1328">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertNotInstanceOf</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="1329">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1330">
    <token name="T_WHITESPACE">        </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_STRING">is_string</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_BOOLEAN_AND">&amp;&amp;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_STRING">class_exists</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_BOOLEAN_OR">||</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">interface_exists</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1331">
    <token name="T_WHITESPACE">            </token>
    <token name="T_THROW">throw</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Util_InvalidArgumentHelper</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">factory</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_LNUMBER">1</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'class or interface name'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1332">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1333"/>
  <line no="1334">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$constraint</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_Not</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="1335">
    <token name="T_WHITESPACE">            </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_IsInstanceOf</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="1336">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1337"/>
  <line no="1338">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertThat</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$constraint</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1339">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1340"/>
  <line no="1341">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1342">
    <token name="T_DOC_COMMENT">     * Asserts that an attribute is of a given type.</token>
  </line>
  <line no="1343">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1344">
    <token name="T_DOC_COMMENT">     * @param string $expected</token>
  </line>
  <line no="1345">
    <token name="T_DOC_COMMENT">     * @param string $attributeName</token>
  </line>
  <line no="1346">
    <token name="T_DOC_COMMENT">     * @param mixed  $classOrObject</token>
  </line>
  <line no="1347">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1348">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1349">
    <token name="T_DOC_COMMENT">     * @since Method available since Release 3.5.0</token>
  </line>
  <line no="1350">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1351">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertAttributeNotInstanceOf</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$attributeName</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$classOrObject</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="1352">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1353">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertNotInstanceOf</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="1354">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="1355">
    <token name="T_WHITESPACE">            </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">readAttribute</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$classOrObject</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$attributeName</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="1356">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$message</token>
  </line>
  <line no="1357">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1358">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1359"/>
  <line no="1360">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1361">
    <token name="T_DOC_COMMENT">     * Asserts that a variable is of a given type.</token>
  </line>
  <line no="1362">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1363">
    <token name="T_DOC_COMMENT">     * @param string $expected</token>
  </line>
  <line no="1364">
    <token name="T_DOC_COMMENT">     * @param mixed  $actual</token>
  </line>
  <line no="1365">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1366">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1367">
    <token name="T_DOC_COMMENT">     * @since Method available since Release 3.5.0</token>
  </line>
  <line no="1368">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1369">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertInternalType</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="1370">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1371">
    <token name="T_WHITESPACE">        </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_STRING">is_string</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1372">
    <token name="T_WHITESPACE">            </token>
    <token name="T_THROW">throw</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Util_InvalidArgumentHelper</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">factory</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_LNUMBER">1</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'string'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1373">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1374"/>
  <line no="1375">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$constraint</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_IsType</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="1376">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$expected</token>
  </line>
  <line no="1377">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1378"/>
  <line no="1379">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertThat</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$constraint</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1380">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1381"/>
  <line no="1382">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1383">
    <token name="T_DOC_COMMENT">     * Asserts that an attribute is of a given type.</token>
  </line>
  <line no="1384">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1385">
    <token name="T_DOC_COMMENT">     * @param string $expected</token>
  </line>
  <line no="1386">
    <token name="T_DOC_COMMENT">     * @param string $attributeName</token>
  </line>
  <line no="1387">
    <token name="T_DOC_COMMENT">     * @param mixed  $classOrObject</token>
  </line>
  <line no="1388">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1389">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1390">
    <token name="T_DOC_COMMENT">     * @since Method available since Release 3.5.0</token>
  </line>
  <line no="1391">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1392">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertAttributeInternalType</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$attributeName</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$classOrObject</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="1393">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1394">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertInternalType</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="1395">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="1396">
    <token name="T_WHITESPACE">            </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">readAttribute</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$classOrObject</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$attributeName</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="1397">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$message</token>
  </line>
  <line no="1398">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1399">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1400"/>
  <line no="1401">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1402">
    <token name="T_DOC_COMMENT">     * Asserts that a variable is not of a given type.</token>
  </line>
  <line no="1403">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1404">
    <token name="T_DOC_COMMENT">     * @param string $expected</token>
  </line>
  <line no="1405">
    <token name="T_DOC_COMMENT">     * @param mixed  $actual</token>
  </line>
  <line no="1406">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1407">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1408">
    <token name="T_DOC_COMMENT">     * @since Method available since Release 3.5.0</token>
  </line>
  <line no="1409">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1410">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertNotInternalType</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="1411">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1412">
    <token name="T_WHITESPACE">        </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_STRING">is_string</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1413">
    <token name="T_WHITESPACE">            </token>
    <token name="T_THROW">throw</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Util_InvalidArgumentHelper</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">factory</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_LNUMBER">1</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'string'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1414">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1415"/>
  <line no="1416">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$constraint</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_Not</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="1417">
    <token name="T_WHITESPACE">            </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_IsType</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="1418">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1419"/>
  <line no="1420">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertThat</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$constraint</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1421">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1422"/>
  <line no="1423">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1424">
    <token name="T_DOC_COMMENT">     * Asserts that an attribute is of a given type.</token>
  </line>
  <line no="1425">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1426">
    <token name="T_DOC_COMMENT">     * @param string $expected</token>
  </line>
  <line no="1427">
    <token name="T_DOC_COMMENT">     * @param string $attributeName</token>
  </line>
  <line no="1428">
    <token name="T_DOC_COMMENT">     * @param mixed  $classOrObject</token>
  </line>
  <line no="1429">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1430">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1431">
    <token name="T_DOC_COMMENT">     * @since Method available since Release 3.5.0</token>
  </line>
  <line no="1432">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1433">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertAttributeNotInternalType</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$attributeName</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$classOrObject</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="1434">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1435">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertNotInternalType</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="1436">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="1437">
    <token name="T_WHITESPACE">            </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">readAttribute</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$classOrObject</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$attributeName</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="1438">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$message</token>
  </line>
  <line no="1439">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1440">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1441"/>
  <line no="1442">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1443">
    <token name="T_DOC_COMMENT">     * Asserts that a string matches a given regular expression.</token>
  </line>
  <line no="1444">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1445">
    <token name="T_DOC_COMMENT">     * @param string $pattern</token>
  </line>
  <line no="1446">
    <token name="T_DOC_COMMENT">     * @param string $string</token>
  </line>
  <line no="1447">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1448">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1449">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertRegExp</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$pattern</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$string</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="1450">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1451">
    <token name="T_WHITESPACE">        </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_STRING">is_string</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$pattern</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1452">
    <token name="T_WHITESPACE">            </token>
    <token name="T_THROW">throw</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Util_InvalidArgumentHelper</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">factory</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_LNUMBER">1</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'string'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1453">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1454"/>
  <line no="1455">
    <token name="T_WHITESPACE">        </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_STRING">is_string</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$string</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1456">
    <token name="T_WHITESPACE">            </token>
    <token name="T_THROW">throw</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Util_InvalidArgumentHelper</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">factory</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_LNUMBER">2</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'string'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1457">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1458"/>
  <line no="1459">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$constraint</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_PCREMatch</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$pattern</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1460"/>
  <line no="1461">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertThat</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$string</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$constraint</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1462">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1463"/>
  <line no="1464">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1465">
    <token name="T_DOC_COMMENT">     * Asserts that a string does not match a given regular expression.</token>
  </line>
  <line no="1466">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1467">
    <token name="T_DOC_COMMENT">     * @param string $pattern</token>
  </line>
  <line no="1468">
    <token name="T_DOC_COMMENT">     * @param string $string</token>
  </line>
  <line no="1469">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1470">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1471">
    <token name="T_DOC_COMMENT">     * @since  Method available since Release 2.1.0</token>
  </line>
  <line no="1472">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1473">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertNotRegExp</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$pattern</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$string</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="1474">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1475">
    <token name="T_WHITESPACE">        </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_STRING">is_string</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$pattern</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1476">
    <token name="T_WHITESPACE">            </token>
    <token name="T_THROW">throw</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Util_InvalidArgumentHelper</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">factory</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_LNUMBER">1</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'string'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1477">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1478"/>
  <line no="1479">
    <token name="T_WHITESPACE">        </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_STRING">is_string</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$string</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1480">
    <token name="T_WHITESPACE">            </token>
    <token name="T_THROW">throw</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Util_InvalidArgumentHelper</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">factory</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_LNUMBER">2</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'string'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1481">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1482"/>
  <line no="1483">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$constraint</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_Not</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="1484">
    <token name="T_WHITESPACE">            </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_PCREMatch</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$pattern</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="1485">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1486"/>
  <line no="1487">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertThat</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$string</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$constraint</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1488">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1489"/>
  <line no="1490">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1491">
    <token name="T_DOC_COMMENT">     * Assert that the size of two arrays (or `Countable` or `Traversable` objects)</token>
  </line>
  <line no="1492">
    <token name="T_DOC_COMMENT">     * is the same.</token>
  </line>
  <line no="1493">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1494">
    <token name="T_DOC_COMMENT">     * @param array|Countable|Traversable $expected</token>
  </line>
  <line no="1495">
    <token name="T_DOC_COMMENT">     * @param array|Countable|Traversable $actual</token>
  </line>
  <line no="1496">
    <token name="T_DOC_COMMENT">     * @param string                      $message</token>
  </line>
  <line no="1497">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1498">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertSameSize</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="1499">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1500">
    <token name="T_WHITESPACE">        </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_INSTANCEOF">instanceof</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">Countable</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_BOOLEAN_AND">&amp;&amp;</token>
  </line>
  <line no="1501">
    <token name="T_WHITESPACE">            </token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_INSTANCEOF">instanceof</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">Traversable</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_BOOLEAN_AND">&amp;&amp;</token>
  </line>
  <line no="1502">
    <token name="T_WHITESPACE">            </token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_STRING">is_array</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1503">
    <token name="T_WHITESPACE">            </token>
    <token name="T_THROW">throw</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Util_InvalidArgumentHelper</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">factory</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_LNUMBER">1</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'countable or traversable'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1504">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1505"/>
  <line no="1506">
    <token name="T_WHITESPACE">        </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_INSTANCEOF">instanceof</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">Countable</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_BOOLEAN_AND">&amp;&amp;</token>
  </line>
  <line no="1507">
    <token name="T_WHITESPACE">            </token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_INSTANCEOF">instanceof</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">Traversable</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_BOOLEAN_AND">&amp;&amp;</token>
  </line>
  <line no="1508">
    <token name="T_WHITESPACE">            </token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_STRING">is_array</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1509">
    <token name="T_WHITESPACE">            </token>
    <token name="T_THROW">throw</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Util_InvalidArgumentHelper</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">factory</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_LNUMBER">2</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'countable or traversable'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1510">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1511"/>
  <line no="1512">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertThat</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="1513">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="1514">
    <token name="T_WHITESPACE">            </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_SameSize</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="1515">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$message</token>
  </line>
  <line no="1516">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1517">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1518"/>
  <line no="1519">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1520">
    <token name="T_DOC_COMMENT">     * Assert that the size of two arrays (or `Countable` or `Traversable` objects)</token>
  </line>
  <line no="1521">
    <token name="T_DOC_COMMENT">     * is not the same.</token>
  </line>
  <line no="1522">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1523">
    <token name="T_DOC_COMMENT">     * @param array|Countable|Traversable $expected</token>
  </line>
  <line no="1524">
    <token name="T_DOC_COMMENT">     * @param array|Countable|Traversable $actual</token>
  </line>
  <line no="1525">
    <token name="T_DOC_COMMENT">     * @param string                      $message</token>
  </line>
  <line no="1526">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1527">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertNotSameSize</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="1528">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1529">
    <token name="T_WHITESPACE">        </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_INSTANCEOF">instanceof</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">Countable</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_BOOLEAN_AND">&amp;&amp;</token>
  </line>
  <line no="1530">
    <token name="T_WHITESPACE">            </token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_INSTANCEOF">instanceof</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">Traversable</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_BOOLEAN_AND">&amp;&amp;</token>
  </line>
  <line no="1531">
    <token name="T_WHITESPACE">            </token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_STRING">is_array</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1532">
    <token name="T_WHITESPACE">            </token>
    <token name="T_THROW">throw</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Util_InvalidArgumentHelper</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">factory</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_LNUMBER">1</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'countable or traversable'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1533">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1534"/>
  <line no="1535">
    <token name="T_WHITESPACE">        </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_INSTANCEOF">instanceof</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">Countable</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_BOOLEAN_AND">&amp;&amp;</token>
  </line>
  <line no="1536">
    <token name="T_WHITESPACE">            </token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_INSTANCEOF">instanceof</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">Traversable</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_BOOLEAN_AND">&amp;&amp;</token>
  </line>
  <line no="1537">
    <token name="T_WHITESPACE">            </token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_STRING">is_array</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1538">
    <token name="T_WHITESPACE">            </token>
    <token name="T_THROW">throw</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Util_InvalidArgumentHelper</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">factory</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_LNUMBER">2</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'countable or traversable'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1539">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1540"/>
  <line no="1541">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$constraint</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_Not</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="1542">
    <token name="T_WHITESPACE">            </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_SameSize</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="1543">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1544"/>
  <line no="1545">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertThat</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$constraint</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1546">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1547"/>
  <line no="1548">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1549">
    <token name="T_DOC_COMMENT">     * Asserts that a string matches a given format string.</token>
  </line>
  <line no="1550">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1551">
    <token name="T_DOC_COMMENT">     * @param string $format</token>
  </line>
  <line no="1552">
    <token name="T_DOC_COMMENT">     * @param string $string</token>
  </line>
  <line no="1553">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1554">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1555">
    <token name="T_DOC_COMMENT">     * @since  Method available since Release 3.5.0</token>
  </line>
  <line no="1556">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1557">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertStringMatchesFormat</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$format</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$string</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="1558">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1559">
    <token name="T_WHITESPACE">        </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_STRING">is_string</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$format</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1560">
    <token name="T_WHITESPACE">            </token>
    <token name="T_THROW">throw</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Util_InvalidArgumentHelper</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">factory</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_LNUMBER">1</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'string'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1561">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1562"/>
  <line no="1563">
    <token name="T_WHITESPACE">        </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_STRING">is_string</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$string</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1564">
    <token name="T_WHITESPACE">            </token>
    <token name="T_THROW">throw</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Util_InvalidArgumentHelper</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">factory</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_LNUMBER">2</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'string'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1565">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1566"/>
  <line no="1567">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$constraint</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_StringMatches</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$format</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1568"/>
  <line no="1569">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertThat</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$string</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$constraint</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1570">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1571"/>
  <line no="1572">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1573">
    <token name="T_DOC_COMMENT">     * Asserts that a string does not match a given format string.</token>
  </line>
  <line no="1574">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1575">
    <token name="T_DOC_COMMENT">     * @param string $format</token>
  </line>
  <line no="1576">
    <token name="T_DOC_COMMENT">     * @param string $string</token>
  </line>
  <line no="1577">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1578">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1579">
    <token name="T_DOC_COMMENT">     * @since  Method available since Release 3.5.0</token>
  </line>
  <line no="1580">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1581">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertStringNotMatchesFormat</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$format</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$string</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="1582">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1583">
    <token name="T_WHITESPACE">        </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_STRING">is_string</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$format</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1584">
    <token name="T_WHITESPACE">            </token>
    <token name="T_THROW">throw</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Util_InvalidArgumentHelper</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">factory</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_LNUMBER">1</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'string'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1585">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1586"/>
  <line no="1587">
    <token name="T_WHITESPACE">        </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_STRING">is_string</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$string</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1588">
    <token name="T_WHITESPACE">            </token>
    <token name="T_THROW">throw</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Util_InvalidArgumentHelper</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">factory</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_LNUMBER">2</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'string'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1589">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1590"/>
  <line no="1591">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$constraint</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_Not</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="1592">
    <token name="T_WHITESPACE">            </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_StringMatches</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$format</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="1593">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1594"/>
  <line no="1595">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertThat</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$string</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$constraint</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1596">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1597"/>
  <line no="1598">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1599">
    <token name="T_DOC_COMMENT">     * Asserts that a string matches a given format file.</token>
  </line>
  <line no="1600">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1601">
    <token name="T_DOC_COMMENT">     * @param string $formatFile</token>
  </line>
  <line no="1602">
    <token name="T_DOC_COMMENT">     * @param string $string</token>
  </line>
  <line no="1603">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1604">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1605">
    <token name="T_DOC_COMMENT">     * @since  Method available since Release 3.5.0</token>
  </line>
  <line no="1606">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1607">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertStringMatchesFormatFile</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$formatFile</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$string</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="1608">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1609">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertFileExists</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$formatFile</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1610"/>
  <line no="1611">
    <token name="T_WHITESPACE">        </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_STRING">is_string</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$string</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1612">
    <token name="T_WHITESPACE">            </token>
    <token name="T_THROW">throw</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Util_InvalidArgumentHelper</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">factory</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_LNUMBER">2</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'string'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1613">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1614"/>
  <line no="1615">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$constraint</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_StringMatches</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="1616">
    <token name="T_WHITESPACE">            </token>
    <token name="T_STRING">file_get_contents</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$formatFile</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="1617">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1618"/>
  <line no="1619">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertThat</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$string</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$constraint</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1620">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1621"/>
  <line no="1622">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1623">
    <token name="T_DOC_COMMENT">     * Asserts that a string does not match a given format string.</token>
  </line>
  <line no="1624">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1625">
    <token name="T_DOC_COMMENT">     * @param string $formatFile</token>
  </line>
  <line no="1626">
    <token name="T_DOC_COMMENT">     * @param string $string</token>
  </line>
  <line no="1627">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1628">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1629">
    <token name="T_DOC_COMMENT">     * @since  Method available since Release 3.5.0</token>
  </line>
  <line no="1630">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1631">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertStringNotMatchesFormatFile</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$formatFile</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$string</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="1632">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1633">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertFileExists</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$formatFile</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1634"/>
  <line no="1635">
    <token name="T_WHITESPACE">        </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_STRING">is_string</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$string</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1636">
    <token name="T_WHITESPACE">            </token>
    <token name="T_THROW">throw</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Util_InvalidArgumentHelper</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">factory</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_LNUMBER">2</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'string'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1637">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1638"/>
  <line no="1639">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$constraint</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_Not</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="1640">
    <token name="T_WHITESPACE">            </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_StringMatches</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="1641">
    <token name="T_WHITESPACE">                </token>
    <token name="T_STRING">file_get_contents</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$formatFile</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="1642">
    <token name="T_WHITESPACE">            </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="1643">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1644"/>
  <line no="1645">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertThat</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$string</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$constraint</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1646">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1647"/>
  <line no="1648">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1649">
    <token name="T_DOC_COMMENT">     * Asserts that a string starts with a given prefix.</token>
  </line>
  <line no="1650">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1651">
    <token name="T_DOC_COMMENT">     * @param string $prefix</token>
  </line>
  <line no="1652">
    <token name="T_DOC_COMMENT">     * @param string $string</token>
  </line>
  <line no="1653">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1654">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1655">
    <token name="T_DOC_COMMENT">     * @since  Method available since Release 3.4.0</token>
  </line>
  <line no="1656">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1657">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertStringStartsWith</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$prefix</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$string</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="1658">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1659">
    <token name="T_WHITESPACE">        </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_STRING">is_string</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$prefix</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1660">
    <token name="T_WHITESPACE">            </token>
    <token name="T_THROW">throw</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Util_InvalidArgumentHelper</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">factory</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_LNUMBER">1</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'string'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1661">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1662"/>
  <line no="1663">
    <token name="T_WHITESPACE">        </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_STRING">is_string</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$string</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1664">
    <token name="T_WHITESPACE">            </token>
    <token name="T_THROW">throw</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Util_InvalidArgumentHelper</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">factory</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_LNUMBER">2</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'string'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1665">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1666"/>
  <line no="1667">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$constraint</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_StringStartsWith</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="1668">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$prefix</token>
  </line>
  <line no="1669">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1670"/>
  <line no="1671">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertThat</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$string</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$constraint</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1672">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1673"/>
  <line no="1674">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1675">
    <token name="T_DOC_COMMENT">     * Asserts that a string starts not with a given prefix.</token>
  </line>
  <line no="1676">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1677">
    <token name="T_DOC_COMMENT">     * @param string $prefix</token>
  </line>
  <line no="1678">
    <token name="T_DOC_COMMENT">     * @param string $string</token>
  </line>
  <line no="1679">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1680">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1681">
    <token name="T_DOC_COMMENT">     * @since  Method available since Release 3.4.0</token>
  </line>
  <line no="1682">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1683">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertStringStartsNotWith</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$prefix</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$string</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="1684">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1685">
    <token name="T_WHITESPACE">        </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_STRING">is_string</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$prefix</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1686">
    <token name="T_WHITESPACE">            </token>
    <token name="T_THROW">throw</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Util_InvalidArgumentHelper</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">factory</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_LNUMBER">1</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'string'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1687">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1688"/>
  <line no="1689">
    <token name="T_WHITESPACE">        </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_STRING">is_string</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$string</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1690">
    <token name="T_WHITESPACE">            </token>
    <token name="T_THROW">throw</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Util_InvalidArgumentHelper</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">factory</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_LNUMBER">2</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'string'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1691">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1692"/>
  <line no="1693">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$constraint</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_Not</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="1694">
    <token name="T_WHITESPACE">            </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_StringStartsWith</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$prefix</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="1695">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1696"/>
  <line no="1697">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertThat</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$string</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$constraint</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1698">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1699"/>
  <line no="1700">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1701">
    <token name="T_DOC_COMMENT">     * Asserts that a string ends with a given suffix.</token>
  </line>
  <line no="1702">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1703">
    <token name="T_DOC_COMMENT">     * @param string $suffix</token>
  </line>
  <line no="1704">
    <token name="T_DOC_COMMENT">     * @param string $string</token>
  </line>
  <line no="1705">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1706">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1707">
    <token name="T_DOC_COMMENT">     * @since  Method available since Release 3.4.0</token>
  </line>
  <line no="1708">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1709">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertStringEndsWith</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$suffix</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$string</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="1710">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1711">
    <token name="T_WHITESPACE">        </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_STRING">is_string</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$suffix</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1712">
    <token name="T_WHITESPACE">            </token>
    <token name="T_THROW">throw</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Util_InvalidArgumentHelper</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">factory</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_LNUMBER">1</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'string'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1713">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1714"/>
  <line no="1715">
    <token name="T_WHITESPACE">        </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_STRING">is_string</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$string</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1716">
    <token name="T_WHITESPACE">            </token>
    <token name="T_THROW">throw</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Util_InvalidArgumentHelper</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">factory</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_LNUMBER">2</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'string'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1717">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1718"/>
  <line no="1719">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$constraint</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_StringEndsWith</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$suffix</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1720"/>
  <line no="1721">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertThat</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$string</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$constraint</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1722">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1723"/>
  <line no="1724">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1725">
    <token name="T_DOC_COMMENT">     * Asserts that a string ends not with a given suffix.</token>
  </line>
  <line no="1726">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1727">
    <token name="T_DOC_COMMENT">     * @param string $suffix</token>
  </line>
  <line no="1728">
    <token name="T_DOC_COMMENT">     * @param string $string</token>
  </line>
  <line no="1729">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1730">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1731">
    <token name="T_DOC_COMMENT">     * @since  Method available since Release 3.4.0</token>
  </line>
  <line no="1732">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1733">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertStringEndsNotWith</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$suffix</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$string</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="1734">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1735">
    <token name="T_WHITESPACE">        </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_STRING">is_string</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$suffix</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1736">
    <token name="T_WHITESPACE">            </token>
    <token name="T_THROW">throw</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Util_InvalidArgumentHelper</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">factory</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_LNUMBER">1</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'string'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1737">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1738"/>
  <line no="1739">
    <token name="T_WHITESPACE">        </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_STRING">is_string</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$string</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1740">
    <token name="T_WHITESPACE">            </token>
    <token name="T_THROW">throw</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Util_InvalidArgumentHelper</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">factory</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_LNUMBER">2</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'string'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1741">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1742"/>
  <line no="1743">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$constraint</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_Not</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="1744">
    <token name="T_WHITESPACE">            </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_StringEndsWith</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$suffix</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="1745">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1746"/>
  <line no="1747">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertThat</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$string</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$constraint</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1748">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1749"/>
  <line no="1750">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1751">
    <token name="T_DOC_COMMENT">     * Asserts that two XML files are equal.</token>
  </line>
  <line no="1752">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1753">
    <token name="T_DOC_COMMENT">     * @param string $expectedFile</token>
  </line>
  <line no="1754">
    <token name="T_DOC_COMMENT">     * @param string $actualFile</token>
  </line>
  <line no="1755">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1756">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1757">
    <token name="T_DOC_COMMENT">     * @since  Method available since Release 3.1.0</token>
  </line>
  <line no="1758">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1759">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertXmlFileEqualsXmlFile</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expectedFile</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actualFile</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="1760">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1761">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Util_XML</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">loadFile</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expectedFile</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1762">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_WHITESPACE">   </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Util_XML</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">loadFile</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actualFile</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1763"/>
  <line no="1764">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertEquals</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1765">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1766"/>
  <line no="1767">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1768">
    <token name="T_DOC_COMMENT">     * Asserts that two XML files are not equal.</token>
  </line>
  <line no="1769">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1770">
    <token name="T_DOC_COMMENT">     * @param string $expectedFile</token>
  </line>
  <line no="1771">
    <token name="T_DOC_COMMENT">     * @param string $actualFile</token>
  </line>
  <line no="1772">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1773">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1774">
    <token name="T_DOC_COMMENT">     * @since  Method available since Release 3.1.0</token>
  </line>
  <line no="1775">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1776">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertXmlFileNotEqualsXmlFile</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expectedFile</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actualFile</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="1777">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1778">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Util_XML</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">loadFile</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expectedFile</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1779">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_WHITESPACE">   </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Util_XML</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">loadFile</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actualFile</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1780"/>
  <line no="1781">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertNotEquals</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1782">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1783"/>
  <line no="1784">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1785">
    <token name="T_DOC_COMMENT">     * Asserts that two XML documents are equal.</token>
  </line>
  <line no="1786">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1787">
    <token name="T_DOC_COMMENT">     * @param string $expectedFile</token>
  </line>
  <line no="1788">
    <token name="T_DOC_COMMENT">     * @param string $actualXml</token>
  </line>
  <line no="1789">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1790">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1791">
    <token name="T_DOC_COMMENT">     * @since  Method available since Release 3.3.0</token>
  </line>
  <line no="1792">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1793">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertXmlStringEqualsXmlFile</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expectedFile</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actualXml</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="1794">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1795">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Util_XML</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">loadFile</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expectedFile</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1796">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_WHITESPACE">   </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Util_XML</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">load</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actualXml</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1797"/>
  <line no="1798">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertEquals</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1799">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1800"/>
  <line no="1801">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1802">
    <token name="T_DOC_COMMENT">     * Asserts that two XML documents are not equal.</token>
  </line>
  <line no="1803">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1804">
    <token name="T_DOC_COMMENT">     * @param string $expectedFile</token>
  </line>
  <line no="1805">
    <token name="T_DOC_COMMENT">     * @param string $actualXml</token>
  </line>
  <line no="1806">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1807">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1808">
    <token name="T_DOC_COMMENT">     * @since  Method available since Release 3.3.0</token>
  </line>
  <line no="1809">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1810">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertXmlStringNotEqualsXmlFile</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expectedFile</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actualXml</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="1811">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1812">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Util_XML</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">loadFile</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expectedFile</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1813">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_WHITESPACE">   </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Util_XML</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">load</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actualXml</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1814"/>
  <line no="1815">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertNotEquals</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1816">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1817"/>
  <line no="1818">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1819">
    <token name="T_DOC_COMMENT">     * Asserts that two XML documents are equal.</token>
  </line>
  <line no="1820">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1821">
    <token name="T_DOC_COMMENT">     * @param string $expectedXml</token>
  </line>
  <line no="1822">
    <token name="T_DOC_COMMENT">     * @param string $actualXml</token>
  </line>
  <line no="1823">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1824">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1825">
    <token name="T_DOC_COMMENT">     * @since  Method available since Release 3.1.0</token>
  </line>
  <line no="1826">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1827">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertXmlStringEqualsXmlString</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expectedXml</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actualXml</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="1828">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1829">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Util_XML</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">load</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expectedXml</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1830">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_WHITESPACE">   </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Util_XML</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">load</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actualXml</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1831"/>
  <line no="1832">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertEquals</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1833">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1834"/>
  <line no="1835">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1836">
    <token name="T_DOC_COMMENT">     * Asserts that two XML documents are not equal.</token>
  </line>
  <line no="1837">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1838">
    <token name="T_DOC_COMMENT">     * @param string $expectedXml</token>
  </line>
  <line no="1839">
    <token name="T_DOC_COMMENT">     * @param string $actualXml</token>
  </line>
  <line no="1840">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="1841">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1842">
    <token name="T_DOC_COMMENT">     * @since  Method available since Release 3.1.0</token>
  </line>
  <line no="1843">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1844">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertXmlStringNotEqualsXmlString</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expectedXml</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actualXml</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="1845">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1846">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Util_XML</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">load</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expectedXml</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1847">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_WHITESPACE">   </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Util_XML</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">load</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actualXml</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1848"/>
  <line no="1849">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertNotEquals</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1850">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1851"/>
  <line no="1852">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1853">
    <token name="T_DOC_COMMENT">     * Asserts that a hierarchy of DOMElements matches.</token>
  </line>
  <line no="1854">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1855">
    <token name="T_DOC_COMMENT">     * @param DOMElement $expectedElement</token>
  </line>
  <line no="1856">
    <token name="T_DOC_COMMENT">     * @param DOMElement $actualElement</token>
  </line>
  <line no="1857">
    <token name="T_DOC_COMMENT">     * @param bool       $checkAttributes</token>
  </line>
  <line no="1858">
    <token name="T_DOC_COMMENT">     * @param string     $message</token>
  </line>
  <line no="1859">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1860">
    <token name="T_DOC_COMMENT">     * @since  Method available since Release 3.3.0</token>
  </line>
  <line no="1861">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1862">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertEqualXMLStructure</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_STRING">DOMElement</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$expectedElement</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">DOMElement</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actualElement</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$checkAttributes</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">false</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="1863">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1864">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$tmp</token>
    <token name="T_WHITESPACE">             </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">DOMDocument</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1865">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$expectedElement</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$tmp</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">importNode</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expectedElement</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">true</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1866"/>
  <line no="1867">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$tmp</token>
    <token name="T_WHITESPACE">           </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">DOMDocument</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1868">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$actualElement</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$tmp</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">importNode</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actualElement</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">true</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1869"/>
  <line no="1870">
    <token name="T_WHITESPACE">        </token>
    <token name="T_UNSET">unset</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$tmp</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1871"/>
  <line no="1872">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertEquals</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="1873">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$expectedElement</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">tagName</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="1874">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$actualElement</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">tagName</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="1875">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$message</token>
  </line>
  <line no="1876">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1877"/>
  <line no="1878">
    <token name="T_WHITESPACE">        </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$checkAttributes</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1879">
    <token name="T_WHITESPACE">            </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertEquals</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="1880">
    <token name="T_WHITESPACE">                </token>
    <token name="T_VARIABLE">$expectedElement</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">attributes</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">length</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="1881">
    <token name="T_WHITESPACE">                </token>
    <token name="T_VARIABLE">$actualElement</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">attributes</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">length</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="1882">
    <token name="T_WHITESPACE">                </token>
    <token name="T_STRING">sprintf</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="1883">
    <token name="T_WHITESPACE">                    </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'%s%sNumber of attributes on node "%s" does not match'</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="1884">
    <token name="T_WHITESPACE">                    </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="1885">
    <token name="T_WHITESPACE">                    </token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_EMPTY">empty</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_QUESTION_MARK">?</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">"\n"</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_COLON">:</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="1886">
    <token name="T_WHITESPACE">                    </token>
    <token name="T_VARIABLE">$expectedElement</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">tagName</token>
  </line>
  <line no="1887">
    <token name="T_WHITESPACE">                </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="1888">
    <token name="T_WHITESPACE">            </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1889"/>
  <line no="1890">
    <token name="T_WHITESPACE">            </token>
    <token name="T_FOR">for</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$i</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_LNUMBER">0</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$i</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_LT">&lt;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$expectedElement</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">attributes</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">length</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$i</token>
    <token name="T_INC">++</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1891">
    <token name="T_WHITESPACE">                </token>
    <token name="T_VARIABLE">$expectedAttribute</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$expectedElement</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">attributes</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">item</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$i</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1892">
    <token name="T_WHITESPACE">                </token>
    <token name="T_VARIABLE">$actualAttribute</token>
    <token name="T_WHITESPACE">   </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actualElement</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">attributes</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getNamedItem</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="1893">
    <token name="T_WHITESPACE">                    </token>
    <token name="T_VARIABLE">$expectedAttribute</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">name</token>
  </line>
  <line no="1894">
    <token name="T_WHITESPACE">                </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1895"/>
  <line no="1896">
    <token name="T_WHITESPACE">                </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_VARIABLE">$actualAttribute</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1897">
    <token name="T_WHITESPACE">                    </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">fail</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="1898">
    <token name="T_WHITESPACE">                        </token>
    <token name="T_STRING">sprintf</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="1899">
    <token name="T_WHITESPACE">                            </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'%s%sCould not find attribute "%s" on node "%s"'</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="1900">
    <token name="T_WHITESPACE">                            </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="1901">
    <token name="T_WHITESPACE">                            </token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_EMPTY">empty</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_QUESTION_MARK">?</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">"\n"</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_COLON">:</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="1902">
    <token name="T_WHITESPACE">                            </token>
    <token name="T_VARIABLE">$expectedAttribute</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">name</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="1903">
    <token name="T_WHITESPACE">                            </token>
    <token name="T_VARIABLE">$expectedElement</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">tagName</token>
  </line>
  <line no="1904">
    <token name="T_WHITESPACE">                        </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="1905">
    <token name="T_WHITESPACE">                    </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1906">
    <token name="T_WHITESPACE">                </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1907">
    <token name="T_WHITESPACE">            </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1908">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1909"/>
  <line no="1910">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">PHPUnit_Util_XML</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">removeCharacterDataNodes</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expectedElement</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1911">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">PHPUnit_Util_XML</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">removeCharacterDataNodes</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actualElement</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1912"/>
  <line no="1913">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertEquals</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="1914">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$expectedElement</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">childNodes</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">length</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="1915">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$actualElement</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">childNodes</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">length</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="1916">
    <token name="T_WHITESPACE">            </token>
    <token name="T_STRING">sprintf</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="1917">
    <token name="T_WHITESPACE">                </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'%s%sNumber of child nodes of "%s" differs'</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="1918">
    <token name="T_WHITESPACE">                </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="1919">
    <token name="T_WHITESPACE">                </token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_EMPTY">empty</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_QUESTION_MARK">?</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">"\n"</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_COLON">:</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="1920">
    <token name="T_WHITESPACE">                </token>
    <token name="T_VARIABLE">$expectedElement</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">tagName</token>
  </line>
  <line no="1921">
    <token name="T_WHITESPACE">            </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="1922">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1923"/>
  <line no="1924">
    <token name="T_WHITESPACE">        </token>
    <token name="T_FOR">for</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$i</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_LNUMBER">0</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$i</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_LT">&lt;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$expectedElement</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">childNodes</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">length</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$i</token>
    <token name="T_INC">++</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1925">
    <token name="T_WHITESPACE">            </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertEqualXMLStructure</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="1926">
    <token name="T_WHITESPACE">                </token>
    <token name="T_VARIABLE">$expectedElement</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">childNodes</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">item</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$i</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="1927">
    <token name="T_WHITESPACE">                </token>
    <token name="T_VARIABLE">$actualElement</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">childNodes</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">item</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$i</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="1928">
    <token name="T_WHITESPACE">                </token>
    <token name="T_VARIABLE">$checkAttributes</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="1929">
    <token name="T_WHITESPACE">                </token>
    <token name="T_VARIABLE">$message</token>
  </line>
  <line no="1930">
    <token name="T_WHITESPACE">            </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1931">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1932">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1933"/>
  <line no="1934">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1935">
    <token name="T_DOC_COMMENT">     * Assert the presence, absence, or count of elements in a document matching</token>
  </line>
  <line no="1936">
    <token name="T_DOC_COMMENT">     * the CSS $selector, regardless of the contents of those elements.</token>
  </line>
  <line no="1937">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1938">
    <token name="T_DOC_COMMENT">     * The first argument, $selector, is the CSS selector used to match</token>
  </line>
  <line no="1939">
    <token name="T_DOC_COMMENT">     * the elements in the $actual document.</token>
  </line>
  <line no="1940">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1941">
    <token name="T_DOC_COMMENT">     * The second argument, $count, can be either boolean or numeric.</token>
  </line>
  <line no="1942">
    <token name="T_DOC_COMMENT">     * When boolean, it asserts for presence of elements matching the selector</token>
  </line>
  <line no="1943">
    <token name="T_DOC_COMMENT">     * (true) or absence of elements (false).</token>
  </line>
  <line no="1944">
    <token name="T_DOC_COMMENT">     * When numeric, it asserts the count of elements.</token>
  </line>
  <line no="1945">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1946">
    <token name="T_DOC_COMMENT">     * assertSelectCount("#binder", true, $xml);  // any?</token>
  </line>
  <line no="1947">
    <token name="T_DOC_COMMENT">     * assertSelectCount(".binder", 3, $xml);     // exactly 3?</token>
  </line>
  <line no="1948">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1949">
    <token name="T_DOC_COMMENT">     * @param array          $selector</token>
  </line>
  <line no="1950">
    <token name="T_DOC_COMMENT">     * @param int|bool|array $count</token>
  </line>
  <line no="1951">
    <token name="T_DOC_COMMENT">     * @param mixed          $actual</token>
  </line>
  <line no="1952">
    <token name="T_DOC_COMMENT">     * @param string         $message</token>
  </line>
  <line no="1953">
    <token name="T_DOC_COMMENT">     * @param bool           $isHtml</token>
  </line>
  <line no="1954">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1955">
    <token name="T_DOC_COMMENT">     * @since  Method available since Release 3.3.0</token>
  </line>
  <line no="1956">
    <token name="T_DOC_COMMENT">     * @deprecated</token>
  </line>
  <line no="1957">
    <token name="T_DOC_COMMENT">     * @codeCoverageIgnore</token>
  </line>
  <line no="1958">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1959">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertSelectCount</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$selector</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$count</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$isHtml</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">true</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="1960">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1961">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">trigger_error</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_METHOD_C">__METHOD__</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_DOT">.</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">' is deprecated'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">E_USER_DEPRECATED</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1962"/>
  <line no="1963">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertSelectEquals</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="1964">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$selector</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="1965">
    <token name="T_WHITESPACE">            </token>
    <token name="T_STRING">true</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="1966">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$count</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="1967">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="1968">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="1969">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$isHtml</token>
  </line>
  <line no="1970">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1971">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="1972"/>
  <line no="1973">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="1974">
    <token name="T_DOC_COMMENT">     * assertSelectRegExp("#binder .name", "/Mike|Derek/", true, $xml); // any?</token>
  </line>
  <line no="1975">
    <token name="T_DOC_COMMENT">     * assertSelectRegExp("#binder .name", "/Mike|Derek/", 3, $xml);    // 3?</token>
  </line>
  <line no="1976">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1977">
    <token name="T_DOC_COMMENT">     * @param array          $selector</token>
  </line>
  <line no="1978">
    <token name="T_DOC_COMMENT">     * @param string         $pattern</token>
  </line>
  <line no="1979">
    <token name="T_DOC_COMMENT">     * @param int|bool|array $count</token>
  </line>
  <line no="1980">
    <token name="T_DOC_COMMENT">     * @param mixed          $actual</token>
  </line>
  <line no="1981">
    <token name="T_DOC_COMMENT">     * @param string         $message</token>
  </line>
  <line no="1982">
    <token name="T_DOC_COMMENT">     * @param bool           $isHtml</token>
  </line>
  <line no="1983">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="1984">
    <token name="T_DOC_COMMENT">     * @since  Method available since Release 3.3.0</token>
  </line>
  <line no="1985">
    <token name="T_DOC_COMMENT">     * @deprecated</token>
  </line>
  <line no="1986">
    <token name="T_DOC_COMMENT">     * @codeCoverageIgnore</token>
  </line>
  <line no="1987">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="1988">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertSelectRegExp</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$selector</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$pattern</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$count</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$isHtml</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">true</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="1989">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="1990">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">trigger_error</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_METHOD_C">__METHOD__</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_DOT">.</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">' is deprecated'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">E_USER_DEPRECATED</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="1991"/>
  <line no="1992">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertSelectEquals</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="1993">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$selector</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="1994">
    <token name="T_WHITESPACE">            </token>
    <token name="T_PHPDOX_DOUBLE_QUOTES">"</token>
    <token name="T_ENCAPSED_AND_WHITESPACE">regexp:</token>
    <token name="T_VARIABLE">$pattern</token>
    <token name="T_PHPDOX_DOUBLE_QUOTES">"</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="1995">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$count</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="1996">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="1997">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="1998">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$isHtml</token>
  </line>
  <line no="1999">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2000">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="2001"/>
  <line no="2002">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="2003">
    <token name="T_DOC_COMMENT">     * assertSelectEquals("#binder .name", "Chuck", true,  $xml);  // any?</token>
  </line>
  <line no="2004">
    <token name="T_DOC_COMMENT">     * assertSelectEquals("#binder .name", "Chuck", false, $xml);  // none?</token>
  </line>
  <line no="2005">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2006">
    <token name="T_DOC_COMMENT">     * @param array          $selector</token>
  </line>
  <line no="2007">
    <token name="T_DOC_COMMENT">     * @param string         $content</token>
  </line>
  <line no="2008">
    <token name="T_DOC_COMMENT">     * @param int|bool|array $count</token>
  </line>
  <line no="2009">
    <token name="T_DOC_COMMENT">     * @param mixed          $actual</token>
  </line>
  <line no="2010">
    <token name="T_DOC_COMMENT">     * @param string         $message</token>
  </line>
  <line no="2011">
    <token name="T_DOC_COMMENT">     * @param bool           $isHtml</token>
  </line>
  <line no="2012">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2013">
    <token name="T_DOC_COMMENT">     * @since  Method available since Release 3.3.0</token>
  </line>
  <line no="2014">
    <token name="T_DOC_COMMENT">     * @deprecated</token>
  </line>
  <line no="2015">
    <token name="T_DOC_COMMENT">     * @codeCoverageIgnore</token>
  </line>
  <line no="2016">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="2017">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertSelectEquals</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$selector</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$content</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$count</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$isHtml</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">true</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="2018">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="2019">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">trigger_error</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_METHOD_C">__METHOD__</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_DOT">.</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">' is deprecated'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">E_USER_DEPRECATED</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2020"/>
  <line no="2021">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$tags</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Util_XML</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">cssSelect</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="2022">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$selector</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="2023">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$content</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="2024">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="2025">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$isHtml</token>
  </line>
  <line no="2026">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2027"/>
  <line no="2028">
    <token name="T_WHITESPACE">        </token>
    <token name="T_COMMENT">// assert specific number of elements</token>
  </line>
  <line no="2029">
    <token name="T_WHITESPACE">        </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_STRING">is_numeric</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$count</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="2030">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$counted</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$tags</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_QUESTION_MARK">?</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">count</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$tags</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_COLON">:</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_LNUMBER">0</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2031">
    <token name="T_WHITESPACE">            </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertEquals</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$count</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$counted</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2032">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_COMMENT">// assert any elements exist if true, assert no elements exist if false</token>
  </line>
  <line no="2033">
    <token name="T_WHITESPACE">        </token>
    <token name="T_ELSEIF">elseif</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_STRING">is_bool</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$count</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="2034">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$any</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">count</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$tags</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_GT">&gt;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_LNUMBER">0</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_BOOLEAN_AND">&amp;&amp;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$tags</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_LNUMBER">0</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_INSTANCEOF">instanceof</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">DOMNode</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2035"/>
  <line no="2036">
    <token name="T_WHITESPACE">            </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$count</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="2037">
    <token name="T_WHITESPACE">                </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertTrue</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$any</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2038">
    <token name="T_WHITESPACE">            </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_ELSE">else</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="2039">
    <token name="T_WHITESPACE">                </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertFalse</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$any</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2040">
    <token name="T_WHITESPACE">            </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="2041">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_COMMENT">// check for range number of elements</token>
  </line>
  <line no="2042">
    <token name="T_WHITESPACE">        </token>
    <token name="T_ELSEIF">elseif</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_STRING">is_array</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$count</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_BOOLEAN_AND">&amp;&amp;</token>
  </line>
  <line no="2043">
    <token name="T_WHITESPACE">                </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_ISSET">isset</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$count</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'&gt;'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_BOOLEAN_OR">||</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_ISSET">isset</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$count</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'&lt;'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_BOOLEAN_OR">||</token>
  </line>
  <line no="2044">
    <token name="T_WHITESPACE">                </token>
    <token name="T_ISSET">isset</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$count</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'&gt;='</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_BOOLEAN_OR">||</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_ISSET">isset</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$count</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'&lt;='</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="2045">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$counted</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$tags</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_QUESTION_MARK">?</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">count</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$tags</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_COLON">:</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_LNUMBER">0</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2046"/>
  <line no="2047">
    <token name="T_WHITESPACE">            </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_ISSET">isset</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$count</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'&gt;'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="2048">
    <token name="T_WHITESPACE">                </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertTrue</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$counted</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_GT">&gt;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$count</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'&gt;'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2049">
    <token name="T_WHITESPACE">            </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="2050"/>
  <line no="2051">
    <token name="T_WHITESPACE">            </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_ISSET">isset</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$count</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'&gt;='</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="2052">
    <token name="T_WHITESPACE">                </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertTrue</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$counted</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_IS_GREATER_OR_EQUAL">&gt;=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$count</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'&gt;='</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2053">
    <token name="T_WHITESPACE">            </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="2054"/>
  <line no="2055">
    <token name="T_WHITESPACE">            </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_ISSET">isset</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$count</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'&lt;'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="2056">
    <token name="T_WHITESPACE">                </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertTrue</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$counted</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_LT">&lt;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$count</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'&lt;'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2057">
    <token name="T_WHITESPACE">            </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="2058"/>
  <line no="2059">
    <token name="T_WHITESPACE">            </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_ISSET">isset</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$count</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'&lt;='</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="2060">
    <token name="T_WHITESPACE">                </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertTrue</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$counted</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_IS_SMALLER_OR_EQUAL">&lt;=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$count</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'&lt;='</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2061">
    <token name="T_WHITESPACE">            </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="2062">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_ELSE">else</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="2063">
    <token name="T_WHITESPACE">            </token>
    <token name="T_THROW">throw</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Exception</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2064">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="2065">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="2066"/>
  <line no="2067">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="2068">
    <token name="T_DOC_COMMENT">     * Evaluate an HTML or XML string and assert its structure and/or contents.</token>
  </line>
  <line no="2069">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2070">
    <token name="T_DOC_COMMENT">     * The first argument ($matcher) is an associative array that specifies the</token>
  </line>
  <line no="2071">
    <token name="T_DOC_COMMENT">     * match criteria for the assertion:</token>
  </line>
  <line no="2072">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2073">
    <token name="T_DOC_COMMENT">     *  - `id`           : the node with the given id attribute must match the</token>
  </line>
  <line no="2074">
    <token name="T_DOC_COMMENT">     *                     corresponding value.</token>
  </line>
  <line no="2075">
    <token name="T_DOC_COMMENT">     *  - `tag`          : the node type must match the corresponding value.</token>
  </line>
  <line no="2076">
    <token name="T_DOC_COMMENT">     *  - `attributes`   : a hash. The node's attributes must match the</token>
  </line>
  <line no="2077">
    <token name="T_DOC_COMMENT">     *                     corresponding values in the hash.</token>
  </line>
  <line no="2078">
    <token name="T_DOC_COMMENT">     *  - `content`      : The text content must match the given value.</token>
  </line>
  <line no="2079">
    <token name="T_DOC_COMMENT">     *  - `parent`       : a hash. The node's parent must match the</token>
  </line>
  <line no="2080">
    <token name="T_DOC_COMMENT">     *                     corresponding hash.</token>
  </line>
  <line no="2081">
    <token name="T_DOC_COMMENT">     *  - `child`        : a hash. At least one of the node's immediate children</token>
  </line>
  <line no="2082">
    <token name="T_DOC_COMMENT">     *                     must meet the criteria described by the hash.</token>
  </line>
  <line no="2083">
    <token name="T_DOC_COMMENT">     *  - `ancestor`     : a hash. At least one of the node's ancestors must</token>
  </line>
  <line no="2084">
    <token name="T_DOC_COMMENT">     *                     meet the criteria described by the hash.</token>
  </line>
  <line no="2085">
    <token name="T_DOC_COMMENT">     *  - `descendant`   : a hash. At least one of the node's descendants must</token>
  </line>
  <line no="2086">
    <token name="T_DOC_COMMENT">     *                     meet the criteria described by the hash.</token>
  </line>
  <line no="2087">
    <token name="T_DOC_COMMENT">     *  - `children`     : a hash, for counting children of a node.</token>
  </line>
  <line no="2088">
    <token name="T_DOC_COMMENT">     *                     Accepts the keys:</token>
  </line>
  <line no="2089">
    <token name="T_DOC_COMMENT">     *    - `count`        : a number which must equal the number of children</token>
  </line>
  <line no="2090">
    <token name="T_DOC_COMMENT">     *                       that match</token>
  </line>
  <line no="2091">
    <token name="T_DOC_COMMENT">     *    - `less_than`    : the number of matching children must be greater</token>
  </line>
  <line no="2092">
    <token name="T_DOC_COMMENT">     *                       than this number</token>
  </line>
  <line no="2093">
    <token name="T_DOC_COMMENT">     *    - `greater_than` : the number of matching children must be less than</token>
  </line>
  <line no="2094">
    <token name="T_DOC_COMMENT">     *                       this number</token>
  </line>
  <line no="2095">
    <token name="T_DOC_COMMENT">     *    - `only`         : another hash consisting of the keys to use to match</token>
  </line>
  <line no="2096">
    <token name="T_DOC_COMMENT">     *                       on the children, and only matching children will be</token>
  </line>
  <line no="2097">
    <token name="T_DOC_COMMENT">     *                       counted</token>
  </line>
  <line no="2098">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2099">
    <token name="T_DOC_COMMENT">     * &lt;code&gt;</token>
  </line>
  <line no="2100">
    <token name="T_DOC_COMMENT">     * // Matcher that asserts that there is an element with an id="my_id".</token>
  </line>
  <line no="2101">
    <token name="T_DOC_COMMENT">     * $matcher = array('id' =&gt; 'my_id');</token>
  </line>
  <line no="2102">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2103">
    <token name="T_DOC_COMMENT">     * // Matcher that asserts that there is a "span" tag.</token>
  </line>
  <line no="2104">
    <token name="T_DOC_COMMENT">     * $matcher = array('tag' =&gt; 'span');</token>
  </line>
  <line no="2105">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2106">
    <token name="T_DOC_COMMENT">     * // Matcher that asserts that there is a "span" tag with the content</token>
  </line>
  <line no="2107">
    <token name="T_DOC_COMMENT">     * // "Hello World".</token>
  </line>
  <line no="2108">
    <token name="T_DOC_COMMENT">     * $matcher = array('tag' =&gt; 'span', 'content' =&gt; 'Hello World');</token>
  </line>
  <line no="2109">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2110">
    <token name="T_DOC_COMMENT">     * // Matcher that asserts that there is a "span" tag with content matching</token>
  </line>
  <line no="2111">
    <token name="T_DOC_COMMENT">     * // the regular expression pattern.</token>
  </line>
  <line no="2112">
    <token name="T_DOC_COMMENT">     * $matcher = array('tag' =&gt; 'span', 'content' =&gt; 'regexp:/Try P(HP|ython)/');</token>
  </line>
  <line no="2113">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2114">
    <token name="T_DOC_COMMENT">     * // Matcher that asserts that there is a "span" with an "list" class</token>
  </line>
  <line no="2115">
    <token name="T_DOC_COMMENT">     * // attribute.</token>
  </line>
  <line no="2116">
    <token name="T_DOC_COMMENT">     * $matcher = array(</token>
  </line>
  <line no="2117">
    <token name="T_DOC_COMMENT">     *   'tag'        =&gt; 'span',</token>
  </line>
  <line no="2118">
    <token name="T_DOC_COMMENT">     *   'attributes' =&gt; array('class' =&gt; 'list')</token>
  </line>
  <line no="2119">
    <token name="T_DOC_COMMENT">     * );</token>
  </line>
  <line no="2120">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2121">
    <token name="T_DOC_COMMENT">     * // Matcher that asserts that there is a "span" inside of a "div".</token>
  </line>
  <line no="2122">
    <token name="T_DOC_COMMENT">     * $matcher = array(</token>
  </line>
  <line no="2123">
    <token name="T_DOC_COMMENT">     *   'tag'    =&gt; 'span',</token>
  </line>
  <line no="2124">
    <token name="T_DOC_COMMENT">     *   'parent' =&gt; array('tag' =&gt; 'div')</token>
  </line>
  <line no="2125">
    <token name="T_DOC_COMMENT">     * );</token>
  </line>
  <line no="2126">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2127">
    <token name="T_DOC_COMMENT">     * // Matcher that asserts that there is a "span" somewhere inside a</token>
  </line>
  <line no="2128">
    <token name="T_DOC_COMMENT">     * // "table".</token>
  </line>
  <line no="2129">
    <token name="T_DOC_COMMENT">     * $matcher = array(</token>
  </line>
  <line no="2130">
    <token name="T_DOC_COMMENT">     *   'tag'      =&gt; 'span',</token>
  </line>
  <line no="2131">
    <token name="T_DOC_COMMENT">     *   'ancestor' =&gt; array('tag' =&gt; 'table')</token>
  </line>
  <line no="2132">
    <token name="T_DOC_COMMENT">     * );</token>
  </line>
  <line no="2133">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2134">
    <token name="T_DOC_COMMENT">     * // Matcher that asserts that there is a "span" with at least one "em"</token>
  </line>
  <line no="2135">
    <token name="T_DOC_COMMENT">     * // child.</token>
  </line>
  <line no="2136">
    <token name="T_DOC_COMMENT">     * $matcher = array(</token>
  </line>
  <line no="2137">
    <token name="T_DOC_COMMENT">     *   'tag'   =&gt; 'span',</token>
  </line>
  <line no="2138">
    <token name="T_DOC_COMMENT">     *   'child' =&gt; array('tag' =&gt; 'em')</token>
  </line>
  <line no="2139">
    <token name="T_DOC_COMMENT">     * );</token>
  </line>
  <line no="2140">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2141">
    <token name="T_DOC_COMMENT">     * // Matcher that asserts that there is a "span" containing a (possibly</token>
  </line>
  <line no="2142">
    <token name="T_DOC_COMMENT">     * // nested) "strong" tag.</token>
  </line>
  <line no="2143">
    <token name="T_DOC_COMMENT">     * $matcher = array(</token>
  </line>
  <line no="2144">
    <token name="T_DOC_COMMENT">     *   'tag'        =&gt; 'span',</token>
  </line>
  <line no="2145">
    <token name="T_DOC_COMMENT">     *   'descendant' =&gt; array('tag' =&gt; 'strong')</token>
  </line>
  <line no="2146">
    <token name="T_DOC_COMMENT">     * );</token>
  </line>
  <line no="2147">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2148">
    <token name="T_DOC_COMMENT">     * // Matcher that asserts that there is a "span" containing 5-10 "em" tags</token>
  </line>
  <line no="2149">
    <token name="T_DOC_COMMENT">     * // as immediate children.</token>
  </line>
  <line no="2150">
    <token name="T_DOC_COMMENT">     * $matcher = array(</token>
  </line>
  <line no="2151">
    <token name="T_DOC_COMMENT">     *   'tag'      =&gt; 'span',</token>
  </line>
  <line no="2152">
    <token name="T_DOC_COMMENT">     *   'children' =&gt; array(</token>
  </line>
  <line no="2153">
    <token name="T_DOC_COMMENT">     *     'less_than'    =&gt; 11,</token>
  </line>
  <line no="2154">
    <token name="T_DOC_COMMENT">     *     'greater_than' =&gt; 4,</token>
  </line>
  <line no="2155">
    <token name="T_DOC_COMMENT">     *     'only'         =&gt; array('tag' =&gt; 'em')</token>
  </line>
  <line no="2156">
    <token name="T_DOC_COMMENT">     *   )</token>
  </line>
  <line no="2157">
    <token name="T_DOC_COMMENT">     * );</token>
  </line>
  <line no="2158">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2159">
    <token name="T_DOC_COMMENT">     * // Matcher that asserts that there is a "div", with an "ul" ancestor and</token>
  </line>
  <line no="2160">
    <token name="T_DOC_COMMENT">     * // a "li" parent (with class="enum"), and containing a "span" descendant</token>
  </line>
  <line no="2161">
    <token name="T_DOC_COMMENT">     * // that contains an element with id="my_test" and the text "Hello World".</token>
  </line>
  <line no="2162">
    <token name="T_DOC_COMMENT">     * $matcher = array(</token>
  </line>
  <line no="2163">
    <token name="T_DOC_COMMENT">     *   'tag'        =&gt; 'div',</token>
  </line>
  <line no="2164">
    <token name="T_DOC_COMMENT">     *   'ancestor'   =&gt; array('tag' =&gt; 'ul'),</token>
  </line>
  <line no="2165">
    <token name="T_DOC_COMMENT">     *   'parent'     =&gt; array(</token>
  </line>
  <line no="2166">
    <token name="T_DOC_COMMENT">     *     'tag'        =&gt; 'li',</token>
  </line>
  <line no="2167">
    <token name="T_DOC_COMMENT">     *     'attributes' =&gt; array('class' =&gt; 'enum')</token>
  </line>
  <line no="2168">
    <token name="T_DOC_COMMENT">     *   ),</token>
  </line>
  <line no="2169">
    <token name="T_DOC_COMMENT">     *   'descendant' =&gt; array(</token>
  </line>
  <line no="2170">
    <token name="T_DOC_COMMENT">     *     'tag'   =&gt; 'span',</token>
  </line>
  <line no="2171">
    <token name="T_DOC_COMMENT">     *     'child' =&gt; array(</token>
  </line>
  <line no="2172">
    <token name="T_DOC_COMMENT">     *       'id'      =&gt; 'my_test',</token>
  </line>
  <line no="2173">
    <token name="T_DOC_COMMENT">     *       'content' =&gt; 'Hello World'</token>
  </line>
  <line no="2174">
    <token name="T_DOC_COMMENT">     *     )</token>
  </line>
  <line no="2175">
    <token name="T_DOC_COMMENT">     *   )</token>
  </line>
  <line no="2176">
    <token name="T_DOC_COMMENT">     * );</token>
  </line>
  <line no="2177">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2178">
    <token name="T_DOC_COMMENT">     * // Use assertTag() to apply a $matcher to a piece of $html.</token>
  </line>
  <line no="2179">
    <token name="T_DOC_COMMENT">     * $this-&gt;assertTag($matcher, $html);</token>
  </line>
  <line no="2180">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2181">
    <token name="T_DOC_COMMENT">     * // Use assertTag() to apply a $matcher to a piece of $xml.</token>
  </line>
  <line no="2182">
    <token name="T_DOC_COMMENT">     * $this-&gt;assertTag($matcher, $xml, '', false);</token>
  </line>
  <line no="2183">
    <token name="T_DOC_COMMENT">     * &lt;/code&gt;</token>
  </line>
  <line no="2184">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2185">
    <token name="T_DOC_COMMENT">     * The second argument ($actual) is a string containing either HTML or</token>
  </line>
  <line no="2186">
    <token name="T_DOC_COMMENT">     * XML text to be tested.</token>
  </line>
  <line no="2187">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2188">
    <token name="T_DOC_COMMENT">     * The third argument ($message) is an optional message that will be</token>
  </line>
  <line no="2189">
    <token name="T_DOC_COMMENT">     * used if the assertion fails.</token>
  </line>
  <line no="2190">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2191">
    <token name="T_DOC_COMMENT">     * The fourth argument ($html) is an optional flag specifying whether</token>
  </line>
  <line no="2192">
    <token name="T_DOC_COMMENT">     * to load the $actual string into a DOMDocument using the HTML or</token>
  </line>
  <line no="2193">
    <token name="T_DOC_COMMENT">     * XML load strategy.  It is true by default, which assumes the HTML</token>
  </line>
  <line no="2194">
    <token name="T_DOC_COMMENT">     * load strategy.  In many cases, this will be acceptable for XML as well.</token>
  </line>
  <line no="2195">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2196">
    <token name="T_DOC_COMMENT">     * @param array  $matcher</token>
  </line>
  <line no="2197">
    <token name="T_DOC_COMMENT">     * @param string $actual</token>
  </line>
  <line no="2198">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="2199">
    <token name="T_DOC_COMMENT">     * @param bool   $isHtml</token>
  </line>
  <line no="2200">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2201">
    <token name="T_DOC_COMMENT">     * @since  Method available since Release 3.3.0</token>
  </line>
  <line no="2202">
    <token name="T_DOC_COMMENT">     * @deprecated</token>
  </line>
  <line no="2203">
    <token name="T_DOC_COMMENT">     * @codeCoverageIgnore</token>
  </line>
  <line no="2204">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="2205">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertTag</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$matcher</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$isHtml</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">true</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="2206">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="2207">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">trigger_error</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_METHOD_C">__METHOD__</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_DOT">.</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">' is deprecated'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">E_USER_DEPRECATED</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2208"/>
  <line no="2209">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$dom</token>
    <token name="T_WHITESPACE">     </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Util_XML</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">load</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$isHtml</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2210">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$tags</token>
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Util_XML</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">findNodes</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$dom</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$matcher</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$isHtml</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2211">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$matched</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">count</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$tags</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_GT">&gt;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_LNUMBER">0</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_BOOLEAN_AND">&amp;&amp;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$tags</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_LNUMBER">0</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_INSTANCEOF">instanceof</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">DOMNode</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2212"/>
  <line no="2213">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertTrue</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$matched</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2214">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="2215"/>
  <line no="2216">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="2217">
    <token name="T_DOC_COMMENT">     * This assertion is the exact opposite of assertTag().</token>
  </line>
  <line no="2218">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2219">
    <token name="T_DOC_COMMENT">     * Rather than asserting that $matcher results in a match, it asserts that</token>
  </line>
  <line no="2220">
    <token name="T_DOC_COMMENT">     * $matcher does not match.</token>
  </line>
  <line no="2221">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2222">
    <token name="T_DOC_COMMENT">     * @param array  $matcher</token>
  </line>
  <line no="2223">
    <token name="T_DOC_COMMENT">     * @param string $actual</token>
  </line>
  <line no="2224">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="2225">
    <token name="T_DOC_COMMENT">     * @param bool   $isHtml</token>
  </line>
  <line no="2226">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2227">
    <token name="T_DOC_COMMENT">     * @since  Method available since Release 3.3.0</token>
  </line>
  <line no="2228">
    <token name="T_DOC_COMMENT">     * @deprecated</token>
  </line>
  <line no="2229">
    <token name="T_DOC_COMMENT">     * @codeCoverageIgnore</token>
  </line>
  <line no="2230">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="2231">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertNotTag</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$matcher</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$isHtml</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">true</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="2232">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="2233">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">trigger_error</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_METHOD_C">__METHOD__</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_DOT">.</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">' is deprecated'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">E_USER_DEPRECATED</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2234"/>
  <line no="2235">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$dom</token>
    <token name="T_WHITESPACE">     </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Util_XML</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">load</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$isHtml</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2236">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$tags</token>
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Util_XML</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">findNodes</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$dom</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$matcher</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$isHtml</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2237">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$matched</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">count</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$tags</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_GT">&gt;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_LNUMBER">0</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_BOOLEAN_AND">&amp;&amp;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$tags</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_LNUMBER">0</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_INSTANCEOF">instanceof</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">DOMNode</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2238"/>
  <line no="2239">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertFalse</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$matched</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2240">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="2241"/>
  <line no="2242">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="2243">
    <token name="T_DOC_COMMENT">     * Evaluates a PHPUnit_Framework_Constraint matcher object.</token>
  </line>
  <line no="2244">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2245">
    <token name="T_DOC_COMMENT">     * @param mixed                        $value</token>
  </line>
  <line no="2246">
    <token name="T_DOC_COMMENT">     * @param PHPUnit_Framework_Constraint $constraint</token>
  </line>
  <line no="2247">
    <token name="T_DOC_COMMENT">     * @param string                       $message</token>
  </line>
  <line no="2248">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2249">
    <token name="T_DOC_COMMENT">     * @since  Method available since Release 3.0.0</token>
  </line>
  <line no="2250">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="2251">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertThat</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$value</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$constraint</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="2252">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="2253">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_VARIABLE">$count</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PLUS_EQUAL">+=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">count</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$constraint</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2254"/>
  <line no="2255">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$constraint</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">evaluate</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$value</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2256">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="2257"/>
  <line no="2258">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="2259">
    <token name="T_DOC_COMMENT">     * Asserts that a string is a valid JSON string.</token>
  </line>
  <line no="2260">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2261">
    <token name="T_DOC_COMMENT">     * @param string $actualJson</token>
  </line>
  <line no="2262">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="2263">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2264">
    <token name="T_DOC_COMMENT">     * @since  Method available since Release 3.7.20</token>
  </line>
  <line no="2265">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="2266">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertJson</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actualJson</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="2267">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="2268">
    <token name="T_WHITESPACE">        </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_STRING">is_string</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actualJson</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="2269">
    <token name="T_WHITESPACE">            </token>
    <token name="T_THROW">throw</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Util_InvalidArgumentHelper</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">factory</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_LNUMBER">1</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'string'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2270">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="2271"/>
  <line no="2272">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertThat</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actualJson</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">isJson</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2273">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="2274"/>
  <line no="2275">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="2276">
    <token name="T_DOC_COMMENT">     * Asserts that two given JSON encoded objects or arrays are equal.</token>
  </line>
  <line no="2277">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2278">
    <token name="T_DOC_COMMENT">     * @param string $expectedJson</token>
  </line>
  <line no="2279">
    <token name="T_DOC_COMMENT">     * @param string $actualJson</token>
  </line>
  <line no="2280">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="2281">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="2282">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertJsonStringEqualsJsonString</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expectedJson</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actualJson</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="2283">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="2284">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertJson</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expectedJson</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2285">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertJson</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actualJson</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2286"/>
  <line no="2287">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">json_decode</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expectedJson</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2288">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_WHITESPACE">   </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">json_decode</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actualJson</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2289"/>
  <line no="2290">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertEquals</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2291">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="2292"/>
  <line no="2293">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="2294">
    <token name="T_DOC_COMMENT">     * Asserts that two given JSON encoded objects or arrays are not equal.</token>
  </line>
  <line no="2295">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2296">
    <token name="T_DOC_COMMENT">     * @param string $expectedJson</token>
  </line>
  <line no="2297">
    <token name="T_DOC_COMMENT">     * @param string $actualJson</token>
  </line>
  <line no="2298">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="2299">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="2300">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertJsonStringNotEqualsJsonString</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expectedJson</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actualJson</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="2301">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="2302">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertJson</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expectedJson</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2303">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertJson</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actualJson</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2304"/>
  <line no="2305">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">json_decode</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expectedJson</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2306">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_WHITESPACE">   </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">json_decode</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actualJson</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2307"/>
  <line no="2308">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertNotEquals</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expected</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2309">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="2310"/>
  <line no="2311">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="2312">
    <token name="T_DOC_COMMENT">     * Asserts that the generated JSON encoded object and the content of the given file are equal.</token>
  </line>
  <line no="2313">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2314">
    <token name="T_DOC_COMMENT">     * @param string $expectedFile</token>
  </line>
  <line no="2315">
    <token name="T_DOC_COMMENT">     * @param string $actualJson</token>
  </line>
  <line no="2316">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="2317">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="2318">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertJsonStringEqualsJsonFile</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expectedFile</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actualJson</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="2319">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="2320">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertFileExists</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expectedFile</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2321">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$expectedJson</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">file_get_contents</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expectedFile</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2322"/>
  <line no="2323">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertJson</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expectedJson</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2324">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertJson</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actualJson</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2325"/>
  <line no="2326">
    <token name="T_WHITESPACE">        </token>
    <token name="T_COMMENT">// call constraint</token>
  </line>
  <line no="2327">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$constraint</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_JsonMatches</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="2328">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$expectedJson</token>
  </line>
  <line no="2329">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2330"/>
  <line no="2331">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertThat</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actualJson</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$constraint</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2332">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="2333"/>
  <line no="2334">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="2335">
    <token name="T_DOC_COMMENT">     * Asserts that the generated JSON encoded object and the content of the given file are not equal.</token>
  </line>
  <line no="2336">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2337">
    <token name="T_DOC_COMMENT">     * @param string $expectedFile</token>
  </line>
  <line no="2338">
    <token name="T_DOC_COMMENT">     * @param string $actualJson</token>
  </line>
  <line no="2339">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="2340">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="2341">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertJsonStringNotEqualsJsonFile</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expectedFile</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actualJson</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="2342">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="2343">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertFileExists</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expectedFile</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2344">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$expectedJson</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">file_get_contents</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expectedFile</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2345"/>
  <line no="2346">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertJson</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expectedJson</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2347">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertJson</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actualJson</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2348"/>
  <line no="2349">
    <token name="T_WHITESPACE">        </token>
    <token name="T_COMMENT">// call constraint</token>
  </line>
  <line no="2350">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$constraint</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_JsonMatches</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="2351">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$expectedJson</token>
  </line>
  <line no="2352">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2353"/>
  <line no="2354">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertThat</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actualJson</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_Not</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$constraint</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2355">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="2356"/>
  <line no="2357">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="2358">
    <token name="T_DOC_COMMENT">     * Asserts that two JSON files are not equal.</token>
  </line>
  <line no="2359">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2360">
    <token name="T_DOC_COMMENT">     * @param string $expectedFile</token>
  </line>
  <line no="2361">
    <token name="T_DOC_COMMENT">     * @param string $actualFile</token>
  </line>
  <line no="2362">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="2363">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="2364">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertJsonFileNotEqualsJsonFile</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expectedFile</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actualFile</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="2365">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="2366">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertFileExists</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expectedFile</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2367">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertFileExists</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actualFile</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2368"/>
  <line no="2369">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$actualJson</token>
    <token name="T_WHITESPACE">   </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">file_get_contents</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actualFile</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2370">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$expectedJson</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">file_get_contents</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expectedFile</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2371"/>
  <line no="2372">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertJson</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expectedJson</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2373">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertJson</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actualJson</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2374"/>
  <line no="2375">
    <token name="T_WHITESPACE">        </token>
    <token name="T_COMMENT">// call constraint</token>
  </line>
  <line no="2376">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$constraintExpected</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_JsonMatches</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="2377">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$expectedJson</token>
  </line>
  <line no="2378">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2379"/>
  <line no="2380">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$constraintActual</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_JsonMatches</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actualJson</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2381"/>
  <line no="2382">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertThat</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expectedJson</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_Not</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$constraintActual</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2383">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertThat</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actualJson</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_Not</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$constraintExpected</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2384">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="2385"/>
  <line no="2386">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="2387">
    <token name="T_DOC_COMMENT">     * Asserts that two JSON files are equal.</token>
  </line>
  <line no="2388">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2389">
    <token name="T_DOC_COMMENT">     * @param string $expectedFile</token>
  </line>
  <line no="2390">
    <token name="T_DOC_COMMENT">     * @param string $actualFile</token>
  </line>
  <line no="2391">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="2392">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="2393">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">assertJsonFileEqualsJsonFile</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expectedFile</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$actualFile</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="2394">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="2395">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertFileExists</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expectedFile</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2396">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertFileExists</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actualFile</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2397"/>
  <line no="2398">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$actualJson</token>
    <token name="T_WHITESPACE">   </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">file_get_contents</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actualFile</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2399">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$expectedJson</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">file_get_contents</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expectedFile</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2400"/>
  <line no="2401">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertJson</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expectedJson</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2402">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertJson</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actualJson</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2403"/>
  <line no="2404">
    <token name="T_WHITESPACE">        </token>
    <token name="T_COMMENT">// call constraint</token>
  </line>
  <line no="2405">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$constraintExpected</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_JsonMatches</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="2406">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$expectedJson</token>
  </line>
  <line no="2407">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2408"/>
  <line no="2409">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$constraintActual</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_JsonMatches</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actualJson</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2410"/>
  <line no="2411">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertThat</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expectedJson</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$constraintActual</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2412">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">assertThat</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$actualJson</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$constraintExpected</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2413">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="2414"/>
  <line no="2415">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="2416">
    <token name="T_DOC_COMMENT">     * Returns a PHPUnit_Framework_Constraint_And matcher object.</token>
  </line>
  <line no="2417">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2418">
    <token name="T_DOC_COMMENT">     * @return PHPUnit_Framework_Constraint_And</token>
  </line>
  <line no="2419">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2420">
    <token name="T_DOC_COMMENT">     * @since  Method available since Release 3.0.0</token>
  </line>
  <line no="2421">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="2422">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">logicalAnd</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="2423">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="2424">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$constraints</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2425"/>
  <line no="2426">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$constraint</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_And</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2427">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$constraint</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">setConstraints</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$constraints</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2428"/>
  <line no="2429">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$constraint</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2430">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="2431"/>
  <line no="2432">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="2433">
    <token name="T_DOC_COMMENT">     * Returns a PHPUnit_Framework_Constraint_Or matcher object.</token>
  </line>
  <line no="2434">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2435">
    <token name="T_DOC_COMMENT">     * @return PHPUnit_Framework_Constraint_Or</token>
  </line>
  <line no="2436">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2437">
    <token name="T_DOC_COMMENT">     * @since  Method available since Release 3.0.0</token>
  </line>
  <line no="2438">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="2439">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">logicalOr</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="2440">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="2441">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$constraints</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2442"/>
  <line no="2443">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$constraint</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_Or</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2444">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$constraint</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">setConstraints</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$constraints</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2445"/>
  <line no="2446">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$constraint</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2447">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="2448"/>
  <line no="2449">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="2450">
    <token name="T_DOC_COMMENT">     * Returns a PHPUnit_Framework_Constraint_Not matcher object.</token>
  </line>
  <line no="2451">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2452">
    <token name="T_DOC_COMMENT">     * @param PHPUnit_Framework_Constraint $constraint</token>
  </line>
  <line no="2453">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2454">
    <token name="T_DOC_COMMENT">     * @return PHPUnit_Framework_Constraint_Not</token>
  </line>
  <line no="2455">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2456">
    <token name="T_DOC_COMMENT">     * @since  Method available since Release 3.0.0</token>
  </line>
  <line no="2457">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="2458">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">logicalNot</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_STRING">PHPUnit_Framework_Constraint</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$constraint</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="2459">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="2460">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_Not</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$constraint</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2461">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="2462"/>
  <line no="2463">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="2464">
    <token name="T_DOC_COMMENT">     * Returns a PHPUnit_Framework_Constraint_Xor matcher object.</token>
  </line>
  <line no="2465">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2466">
    <token name="T_DOC_COMMENT">     * @return PHPUnit_Framework_Constraint_Xor</token>
  </line>
  <line no="2467">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2468">
    <token name="T_DOC_COMMENT">     * @since  Method available since Release 3.0.0</token>
  </line>
  <line no="2469">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="2470">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">logicalXor</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="2471">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="2472">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$constraints</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">func_get_args</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2473"/>
  <line no="2474">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$constraint</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_Xor</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2475">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$constraint</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">setConstraints</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$constraints</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2476"/>
  <line no="2477">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$constraint</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2478">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="2479"/>
  <line no="2480">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="2481">
    <token name="T_DOC_COMMENT">     * Returns a PHPUnit_Framework_Constraint_IsAnything matcher object.</token>
  </line>
  <line no="2482">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2483">
    <token name="T_DOC_COMMENT">     * @return PHPUnit_Framework_Constraint_IsAnything</token>
  </line>
  <line no="2484">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2485">
    <token name="T_DOC_COMMENT">     * @since  Method available since Release 3.0.0</token>
  </line>
  <line no="2486">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="2487">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">anything</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="2488">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="2489">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_IsAnything</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2490">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="2491"/>
  <line no="2492">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="2493">
    <token name="T_DOC_COMMENT">     * Returns a PHPUnit_Framework_Constraint_IsTrue matcher object.</token>
  </line>
  <line no="2494">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2495">
    <token name="T_DOC_COMMENT">     * @return PHPUnit_Framework_Constraint_IsTrue</token>
  </line>
  <line no="2496">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2497">
    <token name="T_DOC_COMMENT">     * @since  Method available since Release 3.3.0</token>
  </line>
  <line no="2498">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="2499">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">isTrue</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="2500">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="2501">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_IsTrue</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2502">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="2503"/>
  <line no="2504">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="2505">
    <token name="T_DOC_COMMENT">     * Returns a PHPUnit_Framework_Constraint_Callback matcher object.</token>
  </line>
  <line no="2506">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2507">
    <token name="T_DOC_COMMENT">     * @param callable $callback</token>
  </line>
  <line no="2508">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2509">
    <token name="T_DOC_COMMENT">     * @return PHPUnit_Framework_Constraint_Callback</token>
  </line>
  <line no="2510">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="2511">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">callback</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$callback</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="2512">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="2513">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_Callback</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$callback</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2514">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="2515"/>
  <line no="2516">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="2517">
    <token name="T_DOC_COMMENT">     * Returns a PHPUnit_Framework_Constraint_IsFalse matcher object.</token>
  </line>
  <line no="2518">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2519">
    <token name="T_DOC_COMMENT">     * @return PHPUnit_Framework_Constraint_IsFalse</token>
  </line>
  <line no="2520">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2521">
    <token name="T_DOC_COMMENT">     * @since  Method available since Release 3.3.0</token>
  </line>
  <line no="2522">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="2523">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">isFalse</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="2524">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="2525">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_IsFalse</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2526">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="2527"/>
  <line no="2528">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="2529">
    <token name="T_DOC_COMMENT">     * Returns a PHPUnit_Framework_Constraint_IsJson matcher object.</token>
  </line>
  <line no="2530">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2531">
    <token name="T_DOC_COMMENT">     * @return PHPUnit_Framework_Constraint_IsJson</token>
  </line>
  <line no="2532">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2533">
    <token name="T_DOC_COMMENT">     * @since  Method available since Release 3.7.20</token>
  </line>
  <line no="2534">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="2535">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">isJson</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="2536">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="2537">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_IsJson</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2538">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="2539"/>
  <line no="2540">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="2541">
    <token name="T_DOC_COMMENT">     * Returns a PHPUnit_Framework_Constraint_IsNull matcher object.</token>
  </line>
  <line no="2542">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2543">
    <token name="T_DOC_COMMENT">     * @return PHPUnit_Framework_Constraint_IsNull</token>
  </line>
  <line no="2544">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2545">
    <token name="T_DOC_COMMENT">     * @since  Method available since Release 3.3.0</token>
  </line>
  <line no="2546">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="2547">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">isNull</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="2548">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="2549">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_IsNull</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2550">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="2551"/>
  <line no="2552">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="2553">
    <token name="T_DOC_COMMENT">     * Returns a PHPUnit_Framework_Constraint_Attribute matcher object.</token>
  </line>
  <line no="2554">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2555">
    <token name="T_DOC_COMMENT">     * @param PHPUnit_Framework_Constraint $constraint</token>
  </line>
  <line no="2556">
    <token name="T_DOC_COMMENT">     * @param string                       $attributeName</token>
  </line>
  <line no="2557">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2558">
    <token name="T_DOC_COMMENT">     * @return PHPUnit_Framework_Constraint_Attribute</token>
  </line>
  <line no="2559">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2560">
    <token name="T_DOC_COMMENT">     * @since  Method available since Release 3.1.0</token>
  </line>
  <line no="2561">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="2562">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">attribute</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_STRING">PHPUnit_Framework_Constraint</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$constraint</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$attributeName</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="2563">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="2564">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_Attribute</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="2565">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$constraint</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="2566">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$attributeName</token>
  </line>
  <line no="2567">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2568">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="2569"/>
  <line no="2570">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="2571">
    <token name="T_DOC_COMMENT">     * Returns a PHPUnit_Framework_Constraint_TraversableContains matcher</token>
  </line>
  <line no="2572">
    <token name="T_DOC_COMMENT">     * object.</token>
  </line>
  <line no="2573">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2574">
    <token name="T_DOC_COMMENT">     * @param mixed $value</token>
  </line>
  <line no="2575">
    <token name="T_DOC_COMMENT">     * @param bool  $checkForObjectIdentity</token>
  </line>
  <line no="2576">
    <token name="T_DOC_COMMENT">     * @param bool  $checkForNonObjectIdentity</token>
  </line>
  <line no="2577">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2578">
    <token name="T_DOC_COMMENT">     * @return PHPUnit_Framework_Constraint_TraversableContains</token>
  </line>
  <line no="2579">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2580">
    <token name="T_DOC_COMMENT">     * @since  Method available since Release 3.0.0</token>
  </line>
  <line no="2581">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="2582">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">contains</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$value</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$checkForObjectIdentity</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">true</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$checkForNonObjectIdentity</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">false</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="2583">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="2584">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_TraversableContains</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$value</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$checkForObjectIdentity</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$checkForNonObjectIdentity</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2585">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="2586"/>
  <line no="2587">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="2588">
    <token name="T_DOC_COMMENT">     * Returns a PHPUnit_Framework_Constraint_TraversableContainsOnly matcher</token>
  </line>
  <line no="2589">
    <token name="T_DOC_COMMENT">     * object.</token>
  </line>
  <line no="2590">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2591">
    <token name="T_DOC_COMMENT">     * @param string $type</token>
  </line>
  <line no="2592">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2593">
    <token name="T_DOC_COMMENT">     * @return PHPUnit_Framework_Constraint_TraversableContainsOnly</token>
  </line>
  <line no="2594">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2595">
    <token name="T_DOC_COMMENT">     * @since  Method available since Release 3.1.4</token>
  </line>
  <line no="2596">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="2597">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">containsOnly</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$type</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="2598">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="2599">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_TraversableContainsOnly</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$type</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2600">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="2601"/>
  <line no="2602">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="2603">
    <token name="T_DOC_COMMENT">     * Returns a PHPUnit_Framework_Constraint_TraversableContainsOnly matcher</token>
  </line>
  <line no="2604">
    <token name="T_DOC_COMMENT">     * object.</token>
  </line>
  <line no="2605">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2606">
    <token name="T_DOC_COMMENT">     * @param string $classname</token>
  </line>
  <line no="2607">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2608">
    <token name="T_DOC_COMMENT">     * @return PHPUnit_Framework_Constraint_TraversableContainsOnly</token>
  </line>
  <line no="2609">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="2610">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">containsOnlyInstancesOf</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$classname</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="2611">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="2612">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_TraversableContainsOnly</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$classname</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">false</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2613">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="2614"/>
  <line no="2615">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="2616">
    <token name="T_DOC_COMMENT">     * Returns a PHPUnit_Framework_Constraint_ArrayHasKey matcher object.</token>
  </line>
  <line no="2617">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2618">
    <token name="T_DOC_COMMENT">     * @param mixed $key</token>
  </line>
  <line no="2619">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2620">
    <token name="T_DOC_COMMENT">     * @return PHPUnit_Framework_Constraint_ArrayHasKey</token>
  </line>
  <line no="2621">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2622">
    <token name="T_DOC_COMMENT">     * @since  Method available since Release 3.0.0</token>
  </line>
  <line no="2623">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="2624">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">arrayHasKey</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$key</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="2625">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="2626">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_ArrayHasKey</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$key</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2627">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="2628"/>
  <line no="2629">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="2630">
    <token name="T_DOC_COMMENT">     * Returns a PHPUnit_Framework_Constraint_IsEqual matcher object.</token>
  </line>
  <line no="2631">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2632">
    <token name="T_DOC_COMMENT">     * @param mixed $value</token>
  </line>
  <line no="2633">
    <token name="T_DOC_COMMENT">     * @param float $delta</token>
  </line>
  <line no="2634">
    <token name="T_DOC_COMMENT">     * @param int   $maxDepth</token>
  </line>
  <line no="2635">
    <token name="T_DOC_COMMENT">     * @param bool  $canonicalize</token>
  </line>
  <line no="2636">
    <token name="T_DOC_COMMENT">     * @param bool  $ignoreCase</token>
  </line>
  <line no="2637">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2638">
    <token name="T_DOC_COMMENT">     * @return PHPUnit_Framework_Constraint_IsEqual</token>
  </line>
  <line no="2639">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2640">
    <token name="T_DOC_COMMENT">     * @since  Method available since Release 3.0.0</token>
  </line>
  <line no="2641">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="2642">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">equalTo</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$value</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$delta</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_DNUMBER">0.0</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$maxDepth</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_LNUMBER">10</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$canonicalize</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">false</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$ignoreCase</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">false</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="2643">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="2644">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_IsEqual</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="2645">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$value</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="2646">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$delta</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="2647">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$maxDepth</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="2648">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$canonicalize</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="2649">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$ignoreCase</token>
  </line>
  <line no="2650">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2651">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="2652"/>
  <line no="2653">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="2654">
    <token name="T_DOC_COMMENT">     * Returns a PHPUnit_Framework_Constraint_IsEqual matcher object</token>
  </line>
  <line no="2655">
    <token name="T_DOC_COMMENT">     * that is wrapped in a PHPUnit_Framework_Constraint_Attribute matcher</token>
  </line>
  <line no="2656">
    <token name="T_DOC_COMMENT">     * object.</token>
  </line>
  <line no="2657">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2658">
    <token name="T_DOC_COMMENT">     * @param string $attributeName</token>
  </line>
  <line no="2659">
    <token name="T_DOC_COMMENT">     * @param mixed  $value</token>
  </line>
  <line no="2660">
    <token name="T_DOC_COMMENT">     * @param float  $delta</token>
  </line>
  <line no="2661">
    <token name="T_DOC_COMMENT">     * @param int    $maxDepth</token>
  </line>
  <line no="2662">
    <token name="T_DOC_COMMENT">     * @param bool   $canonicalize</token>
  </line>
  <line no="2663">
    <token name="T_DOC_COMMENT">     * @param bool   $ignoreCase</token>
  </line>
  <line no="2664">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2665">
    <token name="T_DOC_COMMENT">     * @return PHPUnit_Framework_Constraint_Attribute</token>
  </line>
  <line no="2666">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2667">
    <token name="T_DOC_COMMENT">     * @since  Method available since Release 3.1.0</token>
  </line>
  <line no="2668">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="2669">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">attributeEqualTo</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$attributeName</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$value</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$delta</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_DNUMBER">0.0</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$maxDepth</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_LNUMBER">10</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$canonicalize</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">false</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$ignoreCase</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">false</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="2670">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="2671">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">attribute</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="2672">
    <token name="T_WHITESPACE">            </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">equalTo</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="2673">
    <token name="T_WHITESPACE">                </token>
    <token name="T_VARIABLE">$value</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="2674">
    <token name="T_WHITESPACE">                </token>
    <token name="T_VARIABLE">$delta</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="2675">
    <token name="T_WHITESPACE">                </token>
    <token name="T_VARIABLE">$maxDepth</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="2676">
    <token name="T_WHITESPACE">                </token>
    <token name="T_VARIABLE">$canonicalize</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="2677">
    <token name="T_WHITESPACE">                </token>
    <token name="T_VARIABLE">$ignoreCase</token>
  </line>
  <line no="2678">
    <token name="T_WHITESPACE">            </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="2679">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$attributeName</token>
  </line>
  <line no="2680">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2681">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="2682"/>
  <line no="2683">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="2684">
    <token name="T_DOC_COMMENT">     * Returns a PHPUnit_Framework_Constraint_IsEmpty matcher object.</token>
  </line>
  <line no="2685">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2686">
    <token name="T_DOC_COMMENT">     * @return PHPUnit_Framework_Constraint_IsEmpty</token>
  </line>
  <line no="2687">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2688">
    <token name="T_DOC_COMMENT">     * @since  Method available since Release 3.5.0</token>
  </line>
  <line no="2689">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="2690">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">isEmpty</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="2691">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="2692">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_IsEmpty</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2693">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="2694"/>
  <line no="2695">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="2696">
    <token name="T_DOC_COMMENT">     * Returns a PHPUnit_Framework_Constraint_FileExists matcher object.</token>
  </line>
  <line no="2697">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2698">
    <token name="T_DOC_COMMENT">     * @return PHPUnit_Framework_Constraint_FileExists</token>
  </line>
  <line no="2699">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2700">
    <token name="T_DOC_COMMENT">     * @since  Method available since Release 3.0.0</token>
  </line>
  <line no="2701">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="2702">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">fileExists</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="2703">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="2704">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_FileExists</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2705">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="2706"/>
  <line no="2707">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="2708">
    <token name="T_DOC_COMMENT">     * Returns a PHPUnit_Framework_Constraint_GreaterThan matcher object.</token>
  </line>
  <line no="2709">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2710">
    <token name="T_DOC_COMMENT">     * @param mixed $value</token>
  </line>
  <line no="2711">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2712">
    <token name="T_DOC_COMMENT">     * @return PHPUnit_Framework_Constraint_GreaterThan</token>
  </line>
  <line no="2713">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2714">
    <token name="T_DOC_COMMENT">     * @since  Method available since Release 3.0.0</token>
  </line>
  <line no="2715">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="2716">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">greaterThan</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$value</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="2717">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="2718">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_GreaterThan</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$value</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2719">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="2720"/>
  <line no="2721">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="2722">
    <token name="T_DOC_COMMENT">     * Returns a PHPUnit_Framework_Constraint_Or matcher object that wraps</token>
  </line>
  <line no="2723">
    <token name="T_DOC_COMMENT">     * a PHPUnit_Framework_Constraint_IsEqual and a</token>
  </line>
  <line no="2724">
    <token name="T_DOC_COMMENT">     * PHPUnit_Framework_Constraint_GreaterThan matcher object.</token>
  </line>
  <line no="2725">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2726">
    <token name="T_DOC_COMMENT">     * @param mixed $value</token>
  </line>
  <line no="2727">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2728">
    <token name="T_DOC_COMMENT">     * @return PHPUnit_Framework_Constraint_Or</token>
  </line>
  <line no="2729">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2730">
    <token name="T_DOC_COMMENT">     * @since  Method available since Release 3.1.0</token>
  </line>
  <line no="2731">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="2732">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">greaterThanOrEqual</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$value</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="2733">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="2734">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">logicalOr</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="2735">
    <token name="T_WHITESPACE">            </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_IsEqual</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$value</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="2736">
    <token name="T_WHITESPACE">            </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_GreaterThan</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$value</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="2737">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2738">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="2739"/>
  <line no="2740">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="2741">
    <token name="T_DOC_COMMENT">     * Returns a PHPUnit_Framework_Constraint_ClassHasAttribute matcher object.</token>
  </line>
  <line no="2742">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2743">
    <token name="T_DOC_COMMENT">     * @param string $attributeName</token>
  </line>
  <line no="2744">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2745">
    <token name="T_DOC_COMMENT">     * @return PHPUnit_Framework_Constraint_ClassHasAttribute</token>
  </line>
  <line no="2746">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2747">
    <token name="T_DOC_COMMENT">     * @since  Method available since Release 3.1.0</token>
  </line>
  <line no="2748">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="2749">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">classHasAttribute</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$attributeName</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="2750">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="2751">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_ClassHasAttribute</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="2752">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$attributeName</token>
  </line>
  <line no="2753">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2754">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="2755"/>
  <line no="2756">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="2757">
    <token name="T_DOC_COMMENT">     * Returns a PHPUnit_Framework_Constraint_ClassHasStaticAttribute matcher</token>
  </line>
  <line no="2758">
    <token name="T_DOC_COMMENT">     * object.</token>
  </line>
  <line no="2759">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2760">
    <token name="T_DOC_COMMENT">     * @param string $attributeName</token>
  </line>
  <line no="2761">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2762">
    <token name="T_DOC_COMMENT">     * @return PHPUnit_Framework_Constraint_ClassHasStaticAttribute</token>
  </line>
  <line no="2763">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2764">
    <token name="T_DOC_COMMENT">     * @since  Method available since Release 3.1.0</token>
  </line>
  <line no="2765">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="2766">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">classHasStaticAttribute</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$attributeName</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="2767">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="2768">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_ClassHasStaticAttribute</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="2769">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$attributeName</token>
  </line>
  <line no="2770">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2771">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="2772"/>
  <line no="2773">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="2774">
    <token name="T_DOC_COMMENT">     * Returns a PHPUnit_Framework_Constraint_ObjectHasAttribute matcher object.</token>
  </line>
  <line no="2775">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2776">
    <token name="T_DOC_COMMENT">     * @param string $attributeName</token>
  </line>
  <line no="2777">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2778">
    <token name="T_DOC_COMMENT">     * @return PHPUnit_Framework_Constraint_ObjectHasAttribute</token>
  </line>
  <line no="2779">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2780">
    <token name="T_DOC_COMMENT">     * @since  Method available since Release 3.0.0</token>
  </line>
  <line no="2781">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="2782">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">objectHasAttribute</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$attributeName</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="2783">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="2784">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_ObjectHasAttribute</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="2785">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$attributeName</token>
  </line>
  <line no="2786">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2787">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="2788"/>
  <line no="2789">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="2790">
    <token name="T_DOC_COMMENT">     * Returns a PHPUnit_Framework_Constraint_IsIdentical matcher object.</token>
  </line>
  <line no="2791">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2792">
    <token name="T_DOC_COMMENT">     * @param mixed $value</token>
  </line>
  <line no="2793">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2794">
    <token name="T_DOC_COMMENT">     * @return PHPUnit_Framework_Constraint_IsIdentical</token>
  </line>
  <line no="2795">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2796">
    <token name="T_DOC_COMMENT">     * @since  Method available since Release 3.0.0</token>
  </line>
  <line no="2797">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="2798">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">identicalTo</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$value</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="2799">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="2800">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_IsIdentical</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$value</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2801">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="2802"/>
  <line no="2803">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="2804">
    <token name="T_DOC_COMMENT">     * Returns a PHPUnit_Framework_Constraint_IsInstanceOf matcher object.</token>
  </line>
  <line no="2805">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2806">
    <token name="T_DOC_COMMENT">     * @param string $className</token>
  </line>
  <line no="2807">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2808">
    <token name="T_DOC_COMMENT">     * @return PHPUnit_Framework_Constraint_IsInstanceOf</token>
  </line>
  <line no="2809">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2810">
    <token name="T_DOC_COMMENT">     * @since  Method available since Release 3.0.0</token>
  </line>
  <line no="2811">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="2812">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">isInstanceOf</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$className</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="2813">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="2814">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_IsInstanceOf</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$className</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2815">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="2816"/>
  <line no="2817">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="2818">
    <token name="T_DOC_COMMENT">     * Returns a PHPUnit_Framework_Constraint_IsType matcher object.</token>
  </line>
  <line no="2819">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2820">
    <token name="T_DOC_COMMENT">     * @param string $type</token>
  </line>
  <line no="2821">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2822">
    <token name="T_DOC_COMMENT">     * @return PHPUnit_Framework_Constraint_IsType</token>
  </line>
  <line no="2823">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2824">
    <token name="T_DOC_COMMENT">     * @since  Method available since Release 3.0.0</token>
  </line>
  <line no="2825">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="2826">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">isType</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$type</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="2827">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="2828">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_IsType</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$type</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2829">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="2830"/>
  <line no="2831">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="2832">
    <token name="T_DOC_COMMENT">     * Returns a PHPUnit_Framework_Constraint_LessThan matcher object.</token>
  </line>
  <line no="2833">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2834">
    <token name="T_DOC_COMMENT">     * @param mixed $value</token>
  </line>
  <line no="2835">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2836">
    <token name="T_DOC_COMMENT">     * @return PHPUnit_Framework_Constraint_LessThan</token>
  </line>
  <line no="2837">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2838">
    <token name="T_DOC_COMMENT">     * @since  Method available since Release 3.0.0</token>
  </line>
  <line no="2839">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="2840">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">lessThan</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$value</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="2841">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="2842">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_LessThan</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$value</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2843">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="2844"/>
  <line no="2845">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="2846">
    <token name="T_DOC_COMMENT">     * Returns a PHPUnit_Framework_Constraint_Or matcher object that wraps</token>
  </line>
  <line no="2847">
    <token name="T_DOC_COMMENT">     * a PHPUnit_Framework_Constraint_IsEqual and a</token>
  </line>
  <line no="2848">
    <token name="T_DOC_COMMENT">     * PHPUnit_Framework_Constraint_LessThan matcher object.</token>
  </line>
  <line no="2849">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2850">
    <token name="T_DOC_COMMENT">     * @param mixed $value</token>
  </line>
  <line no="2851">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2852">
    <token name="T_DOC_COMMENT">     * @return PHPUnit_Framework_Constraint_Or</token>
  </line>
  <line no="2853">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2854">
    <token name="T_DOC_COMMENT">     * @since  Method available since Release 3.1.0</token>
  </line>
  <line no="2855">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="2856">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">lessThanOrEqual</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$value</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="2857">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="2858">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">logicalOr</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="2859">
    <token name="T_WHITESPACE">            </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_IsEqual</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$value</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="2860">
    <token name="T_WHITESPACE">            </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_LessThan</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$value</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="2861">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2862">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="2863"/>
  <line no="2864">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="2865">
    <token name="T_DOC_COMMENT">     * Returns a PHPUnit_Framework_Constraint_PCREMatch matcher object.</token>
  </line>
  <line no="2866">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2867">
    <token name="T_DOC_COMMENT">     * @param string $pattern</token>
  </line>
  <line no="2868">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2869">
    <token name="T_DOC_COMMENT">     * @return PHPUnit_Framework_Constraint_PCREMatch</token>
  </line>
  <line no="2870">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2871">
    <token name="T_DOC_COMMENT">     * @since  Method available since Release 3.0.0</token>
  </line>
  <line no="2872">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="2873">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">matchesRegularExpression</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$pattern</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="2874">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="2875">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_PCREMatch</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$pattern</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2876">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="2877"/>
  <line no="2878">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="2879">
    <token name="T_DOC_COMMENT">     * Returns a PHPUnit_Framework_Constraint_StringMatches matcher object.</token>
  </line>
  <line no="2880">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2881">
    <token name="T_DOC_COMMENT">     * @param string $string</token>
  </line>
  <line no="2882">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2883">
    <token name="T_DOC_COMMENT">     * @return PHPUnit_Framework_Constraint_StringMatches</token>
  </line>
  <line no="2884">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2885">
    <token name="T_DOC_COMMENT">     * @since  Method available since Release 3.5.0</token>
  </line>
  <line no="2886">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="2887">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">matches</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$string</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="2888">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="2889">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_StringMatches</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$string</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2890">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="2891"/>
  <line no="2892">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="2893">
    <token name="T_DOC_COMMENT">     * Returns a PHPUnit_Framework_Constraint_StringStartsWith matcher object.</token>
  </line>
  <line no="2894">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2895">
    <token name="T_DOC_COMMENT">     * @param mixed $prefix</token>
  </line>
  <line no="2896">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2897">
    <token name="T_DOC_COMMENT">     * @return PHPUnit_Framework_Constraint_StringStartsWith</token>
  </line>
  <line no="2898">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2899">
    <token name="T_DOC_COMMENT">     * @since  Method available since Release 3.4.0</token>
  </line>
  <line no="2900">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="2901">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">stringStartsWith</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$prefix</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="2902">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="2903">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_StringStartsWith</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$prefix</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2904">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="2905"/>
  <line no="2906">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="2907">
    <token name="T_DOC_COMMENT">     * Returns a PHPUnit_Framework_Constraint_StringContains matcher object.</token>
  </line>
  <line no="2908">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2909">
    <token name="T_DOC_COMMENT">     * @param string $string</token>
  </line>
  <line no="2910">
    <token name="T_DOC_COMMENT">     * @param bool   $case</token>
  </line>
  <line no="2911">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2912">
    <token name="T_DOC_COMMENT">     * @return PHPUnit_Framework_Constraint_StringContains</token>
  </line>
  <line no="2913">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2914">
    <token name="T_DOC_COMMENT">     * @since  Method available since Release 3.0.0</token>
  </line>
  <line no="2915">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="2916">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">stringContains</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$string</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$case</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">true</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="2917">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="2918">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_StringContains</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$string</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$case</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2919">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="2920"/>
  <line no="2921">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="2922">
    <token name="T_DOC_COMMENT">     * Returns a PHPUnit_Framework_Constraint_StringEndsWith matcher object.</token>
  </line>
  <line no="2923">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2924">
    <token name="T_DOC_COMMENT">     * @param mixed $suffix</token>
  </line>
  <line no="2925">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2926">
    <token name="T_DOC_COMMENT">     * @return PHPUnit_Framework_Constraint_StringEndsWith</token>
  </line>
  <line no="2927">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2928">
    <token name="T_DOC_COMMENT">     * @since  Method available since Release 3.4.0</token>
  </line>
  <line no="2929">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="2930">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">stringEndsWith</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$suffix</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="2931">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="2932">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_StringEndsWith</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$suffix</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2933">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="2934"/>
  <line no="2935">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="2936">
    <token name="T_DOC_COMMENT">     * Returns a PHPUnit_Framework_Constraint_Count matcher object.</token>
  </line>
  <line no="2937">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2938">
    <token name="T_DOC_COMMENT">     * @param int $count</token>
  </line>
  <line no="2939">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2940">
    <token name="T_DOC_COMMENT">     * @return PHPUnit_Framework_Constraint_Count</token>
  </line>
  <line no="2941">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="2942">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">countOf</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$count</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="2943">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="2944">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Constraint_Count</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$count</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2945">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="2946">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="2947">
    <token name="T_DOC_COMMENT">     * Fails a test with the given message.</token>
  </line>
  <line no="2948">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2949">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="2950">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2951">
    <token name="T_DOC_COMMENT">     * @throws PHPUnit_Framework_AssertionFailedError</token>
  </line>
  <line no="2952">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="2953">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">fail</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="2954">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="2955">
    <token name="T_WHITESPACE">        </token>
    <token name="T_THROW">throw</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_AssertionFailedError</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2956">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="2957"/>
  <line no="2958">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="2959">
    <token name="T_DOC_COMMENT">     * Returns the value of an attribute of a class or an object.</token>
  </line>
  <line no="2960">
    <token name="T_DOC_COMMENT">     * This also works for attributes that are declared protected or private.</token>
  </line>
  <line no="2961">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2962">
    <token name="T_DOC_COMMENT">     * @param mixed  $classOrObject</token>
  </line>
  <line no="2963">
    <token name="T_DOC_COMMENT">     * @param string $attributeName</token>
  </line>
  <line no="2964">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2965">
    <token name="T_DOC_COMMENT">     * @return mixed</token>
  </line>
  <line no="2966">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="2967">
    <token name="T_DOC_COMMENT">     * @throws PHPUnit_Framework_Exception</token>
  </line>
  <line no="2968">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="2969">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">readAttribute</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$classOrObject</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$attributeName</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="2970">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="2971">
    <token name="T_WHITESPACE">        </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_STRING">is_string</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$attributeName</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="2972">
    <token name="T_WHITESPACE">            </token>
    <token name="T_THROW">throw</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Util_InvalidArgumentHelper</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">factory</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_LNUMBER">2</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'string'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2973">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="2974"/>
  <line no="2975">
    <token name="T_WHITESPACE">        </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_STRING">preg_match</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'/[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*/'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$attributeName</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="2976">
    <token name="T_WHITESPACE">            </token>
    <token name="T_THROW">throw</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Util_InvalidArgumentHelper</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">factory</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_LNUMBER">2</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'valid attribute name'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2977">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="2978"/>
  <line no="2979">
    <token name="T_WHITESPACE">        </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_STRING">is_string</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$classOrObject</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="2980">
    <token name="T_WHITESPACE">            </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_STRING">class_exists</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$classOrObject</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="2981">
    <token name="T_WHITESPACE">                </token>
    <token name="T_THROW">throw</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Util_InvalidArgumentHelper</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">factory</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="2982">
    <token name="T_WHITESPACE">                    </token>
    <token name="T_LNUMBER">1</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="2983">
    <token name="T_WHITESPACE">                    </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'class name'</token>
  </line>
  <line no="2984">
    <token name="T_WHITESPACE">                </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2985">
    <token name="T_WHITESPACE">            </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="2986"/>
  <line no="2987">
    <token name="T_WHITESPACE">            </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">getStaticAttribute</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="2988">
    <token name="T_WHITESPACE">                </token>
    <token name="T_VARIABLE">$classOrObject</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="2989">
    <token name="T_WHITESPACE">                </token>
    <token name="T_VARIABLE">$attributeName</token>
  </line>
  <line no="2990">
    <token name="T_WHITESPACE">            </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2991">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_ELSEIF">elseif</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_STRING">is_object</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$classOrObject</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="2992">
    <token name="T_WHITESPACE">            </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">getObjectAttribute</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="2993">
    <token name="T_WHITESPACE">                </token>
    <token name="T_VARIABLE">$classOrObject</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="2994">
    <token name="T_WHITESPACE">                </token>
    <token name="T_VARIABLE">$attributeName</token>
  </line>
  <line no="2995">
    <token name="T_WHITESPACE">            </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2996">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_ELSE">else</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="2997">
    <token name="T_WHITESPACE">            </token>
    <token name="T_THROW">throw</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Util_InvalidArgumentHelper</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">factory</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="2998">
    <token name="T_WHITESPACE">                </token>
    <token name="T_LNUMBER">1</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="2999">
    <token name="T_WHITESPACE">                </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'class name or object'</token>
  </line>
  <line no="3000">
    <token name="T_WHITESPACE">            </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="3001">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="3002">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="3003"/>
  <line no="3004">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="3005">
    <token name="T_DOC_COMMENT">     * Returns the value of a static attribute.</token>
  </line>
  <line no="3006">
    <token name="T_DOC_COMMENT">     * This also works for attributes that are declared protected or private.</token>
  </line>
  <line no="3007">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="3008">
    <token name="T_DOC_COMMENT">     * @param string $className</token>
  </line>
  <line no="3009">
    <token name="T_DOC_COMMENT">     * @param string $attributeName</token>
  </line>
  <line no="3010">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="3011">
    <token name="T_DOC_COMMENT">     * @return mixed</token>
  </line>
  <line no="3012">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="3013">
    <token name="T_DOC_COMMENT">     * @throws PHPUnit_Framework_Exception</token>
  </line>
  <line no="3014">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="3015">
    <token name="T_DOC_COMMENT">     * @since  Method available since Release 4.0.0</token>
  </line>
  <line no="3016">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="3017">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">getStaticAttribute</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$className</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$attributeName</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="3018">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="3019">
    <token name="T_WHITESPACE">        </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_STRING">is_string</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$className</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="3020">
    <token name="T_WHITESPACE">            </token>
    <token name="T_THROW">throw</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Util_InvalidArgumentHelper</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">factory</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_LNUMBER">1</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'string'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="3021">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="3022"/>
  <line no="3023">
    <token name="T_WHITESPACE">        </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_STRING">class_exists</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$className</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="3024">
    <token name="T_WHITESPACE">            </token>
    <token name="T_THROW">throw</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Util_InvalidArgumentHelper</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">factory</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_LNUMBER">1</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'class name'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="3025">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="3026"/>
  <line no="3027">
    <token name="T_WHITESPACE">        </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_STRING">is_string</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$attributeName</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="3028">
    <token name="T_WHITESPACE">            </token>
    <token name="T_THROW">throw</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Util_InvalidArgumentHelper</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">factory</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_LNUMBER">2</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'string'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="3029">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="3030"/>
  <line no="3031">
    <token name="T_WHITESPACE">        </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_STRING">preg_match</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'/[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*/'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$attributeName</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="3032">
    <token name="T_WHITESPACE">            </token>
    <token name="T_THROW">throw</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Util_InvalidArgumentHelper</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">factory</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_LNUMBER">2</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'valid attribute name'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="3033">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="3034"/>
  <line no="3035">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$class</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">ReflectionClass</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$className</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="3036"/>
  <line no="3037">
    <token name="T_WHITESPACE">        </token>
    <token name="T_WHILE">while</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$class</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="3038">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$attributes</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$class</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getStaticProperties</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="3039"/>
  <line no="3040">
    <token name="T_WHITESPACE">            </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_STRING">array_key_exists</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$attributeName</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$attributes</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="3041">
    <token name="T_WHITESPACE">                </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$attributes</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_VARIABLE">$attributeName</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="3042">
    <token name="T_WHITESPACE">            </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="3043"/>
  <line no="3044">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$class</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$class</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getParentClass</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="3045">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="3046"/>
  <line no="3047">
    <token name="T_WHITESPACE">        </token>
    <token name="T_THROW">throw</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Exception</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="3048">
    <token name="T_WHITESPACE">            </token>
    <token name="T_STRING">sprintf</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="3049">
    <token name="T_WHITESPACE">                </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'Attribute "%s" not found in class.'</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="3050">
    <token name="T_WHITESPACE">                </token>
    <token name="T_VARIABLE">$attributeName</token>
  </line>
  <line no="3051">
    <token name="T_WHITESPACE">            </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="3052">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="3053">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="3054"/>
  <line no="3055">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="3056">
    <token name="T_DOC_COMMENT">     * Returns the value of an object's attribute.</token>
  </line>
  <line no="3057">
    <token name="T_DOC_COMMENT">     * This also works for attributes that are declared protected or private.</token>
  </line>
  <line no="3058">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="3059">
    <token name="T_DOC_COMMENT">     * @param object $object</token>
  </line>
  <line no="3060">
    <token name="T_DOC_COMMENT">     * @param string $attributeName</token>
  </line>
  <line no="3061">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="3062">
    <token name="T_DOC_COMMENT">     * @return mixed</token>
  </line>
  <line no="3063">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="3064">
    <token name="T_DOC_COMMENT">     * @throws PHPUnit_Framework_Exception</token>
  </line>
  <line no="3065">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="3066">
    <token name="T_DOC_COMMENT">     * @since  Method available since Release 4.0.0</token>
  </line>
  <line no="3067">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="3068">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">getObjectAttribute</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$object</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$attributeName</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="3069">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="3070">
    <token name="T_WHITESPACE">        </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_STRING">is_object</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$object</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="3071">
    <token name="T_WHITESPACE">            </token>
    <token name="T_THROW">throw</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Util_InvalidArgumentHelper</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">factory</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_LNUMBER">1</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'object'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="3072">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="3073"/>
  <line no="3074">
    <token name="T_WHITESPACE">        </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_STRING">is_string</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$attributeName</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="3075">
    <token name="T_WHITESPACE">            </token>
    <token name="T_THROW">throw</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Util_InvalidArgumentHelper</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">factory</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_LNUMBER">2</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'string'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="3076">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="3077"/>
  <line no="3078">
    <token name="T_WHITESPACE">        </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_STRING">preg_match</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'/[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*/'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$attributeName</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="3079">
    <token name="T_WHITESPACE">            </token>
    <token name="T_THROW">throw</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Util_InvalidArgumentHelper</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">factory</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_LNUMBER">2</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'valid attribute name'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="3080">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="3081"/>
  <line no="3082">
    <token name="T_WHITESPACE">        </token>
    <token name="T_TRY">try</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="3083">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$attribute</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">ReflectionProperty</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$object</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$attributeName</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="3084">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CATCH">catch</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_STRING">ReflectionException</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$e</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="3085">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$reflector</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">ReflectionObject</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$object</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="3086"/>
  <line no="3087">
    <token name="T_WHITESPACE">            </token>
    <token name="T_WHILE">while</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$reflector</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$reflector</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getParentClass</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="3088">
    <token name="T_WHITESPACE">                </token>
    <token name="T_TRY">try</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="3089">
    <token name="T_WHITESPACE">                    </token>
    <token name="T_VARIABLE">$attribute</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$reflector</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getProperty</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$attributeName</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="3090">
    <token name="T_WHITESPACE">                    </token>
    <token name="T_BREAK">break</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="3091">
    <token name="T_WHITESPACE">                </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CATCH">catch</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_STRING">ReflectionException</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$e</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="3092">
    <token name="T_WHITESPACE">                </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="3093">
    <token name="T_WHITESPACE">            </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="3094">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="3095"/>
  <line no="3096">
    <token name="T_WHITESPACE">        </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_ISSET">isset</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$attribute</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="3097">
    <token name="T_WHITESPACE">            </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_VARIABLE">$attribute</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_BOOLEAN_OR">||</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$attribute</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">isPublic</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="3098">
    <token name="T_WHITESPACE">                </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$object</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_VARIABLE">$attributeName</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="3099">
    <token name="T_WHITESPACE">            </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="3100"/>
  <line no="3101">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$attribute</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">setAccessible</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_STRING">true</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="3102">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$value</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$attribute</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getValue</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$object</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="3103">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$attribute</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">setAccessible</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_STRING">false</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="3104"/>
  <line no="3105">
    <token name="T_WHITESPACE">            </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$value</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="3106">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="3107"/>
  <line no="3108">
    <token name="T_WHITESPACE">        </token>
    <token name="T_THROW">throw</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_Exception</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="3109">
    <token name="T_WHITESPACE">            </token>
    <token name="T_STRING">sprintf</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="3110">
    <token name="T_WHITESPACE">                </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'Attribute "%s" not found in object.'</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="3111">
    <token name="T_WHITESPACE">                </token>
    <token name="T_VARIABLE">$attributeName</token>
  </line>
  <line no="3112">
    <token name="T_WHITESPACE">            </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="3113">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="3114">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="3115"/>
  <line no="3116">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="3117">
    <token name="T_DOC_COMMENT">     * Mark the test as incomplete.</token>
  </line>
  <line no="3118">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="3119">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="3120">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="3121">
    <token name="T_DOC_COMMENT">     * @throws PHPUnit_Framework_IncompleteTestError</token>
  </line>
  <line no="3122">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="3123">
    <token name="T_DOC_COMMENT">     * @since  Method available since Release 3.0.0</token>
  </line>
  <line no="3124">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="3125">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">markTestIncomplete</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="3126">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="3127">
    <token name="T_WHITESPACE">        </token>
    <token name="T_THROW">throw</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_IncompleteTestError</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="3128">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="3129"/>
  <line no="3130">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="3131">
    <token name="T_DOC_COMMENT">     * Mark the test as skipped.</token>
  </line>
  <line no="3132">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="3133">
    <token name="T_DOC_COMMENT">     * @param string $message</token>
  </line>
  <line no="3134">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="3135">
    <token name="T_DOC_COMMENT">     * @throws PHPUnit_Framework_SkippedTestError</token>
  </line>
  <line no="3136">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="3137">
    <token name="T_DOC_COMMENT">     * @since  Method available since Release 3.0.0</token>
  </line>
  <line no="3138">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="3139">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">markTestSkipped</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="3140">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="3141">
    <token name="T_WHITESPACE">        </token>
    <token name="T_THROW">throw</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHPUnit_Framework_SkippedTestError</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="3142">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="3143"/>
  <line no="3144">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="3145">
    <token name="T_DOC_COMMENT">     * Return the current assertion count.</token>
  </line>
  <line no="3146">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="3147">
    <token name="T_DOC_COMMENT">     * @return int</token>
  </line>
  <line no="3148">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="3149">
    <token name="T_DOC_COMMENT">     * @since  Method available since Release 3.3.3</token>
  </line>
  <line no="3150">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="3151">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">getCount</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="3152">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="3153">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_VARIABLE">$count</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="3154">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="3155"/>
  <line no="3156">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="3157">
    <token name="T_DOC_COMMENT">     * Reset the assertion counter.</token>
  </line>
  <line no="3158">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="3159">
    <token name="T_DOC_COMMENT">     * @since  Method available since Release 3.3.3</token>
  </line>
  <line no="3160">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="3161">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">resetCount</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="3162">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="3163">
    <token name="T_WHITESPACE">        </token>
    <token name="T_STRING">self</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_VARIABLE">$count</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_LNUMBER">0</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="3164">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="3165">
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="3166"/>
</source>
