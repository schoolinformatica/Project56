<?xml version="1.0"?>
<source xmlns="http://xml.phpdox.net/token">
  <file xmlns="http://xml.phpdox.net/src" path="/home/robert/Desktop/Hogeschool/2ejaars Development/DevBOpdrachten/project56/http/laravel/vendor/symfony/routing/Generator" file="ConfigurableRequirementsInterface.php" realpath="/home/robert/Desktop/Hogeschool/2ejaars Development/DevBOpdrachten/project56/http/laravel/vendor/symfony/routing/Generator/ConfigurableRequirementsInterface.php" size="2260" time="2015-12-17T18:44:10+00:00" unixtime="1450377850" sha1="4d023d74e614420debe62bed34e3da0462a0d85c" relative="vendor/symfony/routing/Generator/ConfigurableRequirementsInterface.php"/>
  <line no="1">
    <token name="T_OPEN_TAG">&lt;?php</token>
  </line>
  <line no="2"/>
  <line no="3">
    <token name="T_COMMENT">/*</token>
  </line>
  <line no="4">
    <token name="T_COMMENT"> * This file is part of the Symfony package.</token>
  </line>
  <line no="5">
    <token name="T_COMMENT"> *</token>
  </line>
  <line no="6">
    <token name="T_COMMENT"> * (c) Fabien Potencier &lt;fabien@symfony.com&gt;</token>
  </line>
  <line no="7">
    <token name="T_COMMENT"> *</token>
  </line>
  <line no="8">
    <token name="T_COMMENT"> * For the full copyright and license information, please view the LICENSE</token>
  </line>
  <line no="9">
    <token name="T_COMMENT"> * file that was distributed with this source code.</token>
  </line>
  <line no="10">
    <token name="T_COMMENT"> */</token>
  </line>
  <line no="11"/>
  <line no="12">
    <token name="T_NAMESPACE">namespace</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">Symfony</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Component</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Routing</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Generator</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="13"/>
  <line no="14">
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="15">
    <token name="T_DOC_COMMENT"> * ConfigurableRequirementsInterface must be implemented by URL generators that</token>
  </line>
  <line no="16">
    <token name="T_DOC_COMMENT"> * can be configured whether an exception should be generated when the parameters</token>
  </line>
  <line no="17">
    <token name="T_DOC_COMMENT"> * do not match the requirements. It is also possible to disable the requirements</token>
  </line>
  <line no="18">
    <token name="T_DOC_COMMENT"> * check for URL generation completely.</token>
  </line>
  <line no="19">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="20">
    <token name="T_DOC_COMMENT"> * The possible configurations and use-cases:</token>
  </line>
  <line no="21">
    <token name="T_DOC_COMMENT"> * - setStrictRequirements(true): Throw an exception for mismatching requirements. This</token>
  </line>
  <line no="22">
    <token name="T_DOC_COMMENT"> *   is mostly useful in development environment.</token>
  </line>
  <line no="23">
    <token name="T_DOC_COMMENT"> * - setStrictRequirements(false): Don't throw an exception but return null as URL for</token>
  </line>
  <line no="24">
    <token name="T_DOC_COMMENT"> *   mismatching requirements and log the problem. Useful when you cannot control all</token>
  </line>
  <line no="25">
    <token name="T_DOC_COMMENT"> *   params because they come from third party libs but don't want to have a 404 in</token>
  </line>
  <line no="26">
    <token name="T_DOC_COMMENT"> *   production environment. It should log the mismatch so one can review it.</token>
  </line>
  <line no="27">
    <token name="T_DOC_COMMENT"> * - setStrictRequirements(null): Return the URL with the given parameters without</token>
  </line>
  <line no="28">
    <token name="T_DOC_COMMENT"> *   checking the requirements at all. When generating a URL you should either trust</token>
  </line>
  <line no="29">
    <token name="T_DOC_COMMENT"> *   your params or you validated them beforehand because otherwise it would break your</token>
  </line>
  <line no="30">
    <token name="T_DOC_COMMENT"> *   link anyway. So in production environment you should know that params always pass</token>
  </line>
  <line no="31">
    <token name="T_DOC_COMMENT"> *   the requirements. Thus this option allows to disable the check on URL generation for</token>
  </line>
  <line no="32">
    <token name="T_DOC_COMMENT"> *   performance reasons (saving a preg_match for each requirement every time a URL is</token>
  </line>
  <line no="33">
    <token name="T_DOC_COMMENT"> *   generated).</token>
  </line>
  <line no="34">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="35">
    <token name="T_DOC_COMMENT"> * @author Fabien Potencier &lt;fabien@symfony.com&gt;</token>
  </line>
  <line no="36">
    <token name="T_DOC_COMMENT"> * @author Tobias Schultze &lt;http://tobion.de&gt;</token>
  </line>
  <line no="37">
    <token name="T_DOC_COMMENT"> */</token>
  </line>
  <line no="38">
    <token name="T_INTERFACE">interface</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">ConfigurableRequirementsInterface</token>
  </line>
  <line no="39">
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="40">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="41">
    <token name="T_DOC_COMMENT">     * Enables or disables the exception on incorrect parameters.</token>
  </line>
  <line no="42">
    <token name="T_DOC_COMMENT">     * Passing null will deactivate the requirements check completely.</token>
  </line>
  <line no="43">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="44">
    <token name="T_DOC_COMMENT">     * @param bool|null $enabled</token>
  </line>
  <line no="45">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="46">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">setStrictRequirements</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$enabled</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="47"/>
  <line no="48">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="49">
    <token name="T_DOC_COMMENT">     * Returns whether to throw an exception on incorrect parameters.</token>
  </line>
  <line no="50">
    <token name="T_DOC_COMMENT">     * Null means the requirements check is deactivated completely.</token>
  </line>
  <line no="51">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="52">
    <token name="T_DOC_COMMENT">     * @return bool|null</token>
  </line>
  <line no="53">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="54">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">isStrictRequirements</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="55">
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="56"/>
</source>
