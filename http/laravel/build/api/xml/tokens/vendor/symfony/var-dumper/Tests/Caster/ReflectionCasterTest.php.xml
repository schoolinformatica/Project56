<?xml version="1.0"?>
<source xmlns="http://xml.phpdox.net/token">
  <file xmlns="http://xml.phpdox.net/src" path="/home/robert/Desktop/Hogeschool/2ejaars Development/DevBOpdrachten/project56/http/laravel/vendor/symfony/var-dumper/Tests/Caster" file="ReflectionCasterTest.php" realpath="/home/robert/Desktop/Hogeschool/2ejaars Development/DevBOpdrachten/project56/http/laravel/vendor/symfony/var-dumper/Tests/Caster/ReflectionCasterTest.php" size="2675" time="2015-12-17T18:44:10+00:00" unixtime="1450377850" sha1="e9312f9eac0b159fbeac648f03878b619868ed85" relative="vendor/symfony/var-dumper/Tests/Caster/ReflectionCasterTest.php"/>
  <line no="1">
    <token name="T_OPEN_TAG">&lt;?php</token>
  </line>
  <line no="2"/>
  <line no="3">
    <token name="T_COMMENT">/*</token>
  </line>
  <line no="4">
    <token name="T_COMMENT"> * This file is part of the Symfony package.</token>
  </line>
  <line no="5">
    <token name="T_COMMENT"> *</token>
  </line>
  <line no="6">
    <token name="T_COMMENT"> * (c) Fabien Potencier &lt;fabien@symfony.com&gt;</token>
  </line>
  <line no="7">
    <token name="T_COMMENT"> *</token>
  </line>
  <line no="8">
    <token name="T_COMMENT"> * For the full copyright and license information, please view the LICENSE</token>
  </line>
  <line no="9">
    <token name="T_COMMENT"> * file that was distributed with this source code.</token>
  </line>
  <line no="10">
    <token name="T_COMMENT"> */</token>
  </line>
  <line no="11"/>
  <line no="12">
    <token name="T_NAMESPACE">namespace</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">Symfony</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Component</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">VarDumper</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Tests</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Caster</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="13"/>
  <line no="14">
    <token name="T_USE">use</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">Symfony</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Component</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">VarDumper</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Test</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">VarDumperTestCase</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="15"/>
  <line no="16">
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="17">
    <token name="T_DOC_COMMENT"> * @author Nicolas Grekas &lt;p@tchwork.com&gt;</token>
  </line>
  <line no="18">
    <token name="T_DOC_COMMENT"> */</token>
  </line>
  <line no="19">
    <token name="T_CLASS">class</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">ReflectionCasterTest</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_EXTENDS">extends</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">VarDumperTestCase</token>
  </line>
  <line no="20">
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="21">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">testReflectionCaster</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="22">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="23">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$var</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">ReflectionClass</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'ReflectionClass'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="24"/>
  <line no="25">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">assertDumpMatchesFormat</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="26">
    <token name="T_WHITESPACE">            </token>
    <token name="T_START_HEREDOC">&lt;&lt;&lt;'EOTXT'</token>
  </line>
  <line no="27">
    <token name="T_ENCAPSED_AND_WHITESPACE">ReflectionClass {</token>
  </line>
  <line no="28">
    <token name="T_ENCAPSED_AND_WHITESPACE">  +name: "ReflectionClass"</token>
  </line>
  <line no="29">
    <token name="T_ENCAPSED_AND_WHITESPACE">%Aimplements: array:%d [</token>
  </line>
  <line no="30">
    <token name="T_ENCAPSED_AND_WHITESPACE">    0 =&gt; "Reflector"</token>
  </line>
  <line no="31">
    <token name="T_ENCAPSED_AND_WHITESPACE">%A]</token>
  </line>
  <line no="32">
    <token name="T_ENCAPSED_AND_WHITESPACE">  constants: array:3 [</token>
  </line>
  <line no="33">
    <token name="T_ENCAPSED_AND_WHITESPACE">    "IS_IMPLICIT_ABSTRACT" =&gt; 16</token>
  </line>
  <line no="34">
    <token name="T_ENCAPSED_AND_WHITESPACE">    "IS_EXPLICIT_ABSTRACT" =&gt; 32</token>
  </line>
  <line no="35">
    <token name="T_ENCAPSED_AND_WHITESPACE">    "IS_FINAL" =&gt; %d</token>
  </line>
  <line no="36">
    <token name="T_ENCAPSED_AND_WHITESPACE">  ]</token>
  </line>
  <line no="37">
    <token name="T_ENCAPSED_AND_WHITESPACE">  properties: array:%d [</token>
  </line>
  <line no="38">
    <token name="T_ENCAPSED_AND_WHITESPACE">    "name" =&gt; ReflectionProperty {</token>
  </line>
  <line no="39">
    <token name="T_ENCAPSED_AND_WHITESPACE">%A    +name: "name"</token>
  </line>
  <line no="40">
    <token name="T_ENCAPSED_AND_WHITESPACE">      +class: "ReflectionClass"</token>
  </line>
  <line no="41">
    <token name="T_ENCAPSED_AND_WHITESPACE">%A    modifiers: "public"</token>
  </line>
  <line no="42">
    <token name="T_ENCAPSED_AND_WHITESPACE">      extra: null</token>
  </line>
  <line no="43">
    <token name="T_ENCAPSED_AND_WHITESPACE">    }</token>
  </line>
  <line no="44">
    <token name="T_ENCAPSED_AND_WHITESPACE">%A]</token>
  </line>
  <line no="45">
    <token name="T_ENCAPSED_AND_WHITESPACE">  methods: array:%d [</token>
  </line>
  <line no="46">
    <token name="T_ENCAPSED_AND_WHITESPACE">%A</token>
  </line>
  <line no="47">
    <token name="T_ENCAPSED_AND_WHITESPACE">    "export" =&gt; ReflectionMethod {</token>
  </line>
  <line no="48">
    <token name="T_ENCAPSED_AND_WHITESPACE">      +name: "export"</token>
  </line>
  <line no="49">
    <token name="T_ENCAPSED_AND_WHITESPACE">      +class: "ReflectionClass"</token>
  </line>
  <line no="50">
    <token name="T_ENCAPSED_AND_WHITESPACE">      parameters: array:2 [</token>
  </line>
  <line no="51">
    <token name="T_ENCAPSED_AND_WHITESPACE">        "$%s" =&gt; ReflectionParameter {</token>
  </line>
  <line no="52">
    <token name="T_ENCAPSED_AND_WHITESPACE">%A         position: 0</token>
  </line>
  <line no="53">
    <token name="T_ENCAPSED_AND_WHITESPACE">%A      }</token>
  </line>
  <line no="54">
    <token name="T_ENCAPSED_AND_WHITESPACE">      ]</token>
  </line>
  <line no="55">
    <token name="T_ENCAPSED_AND_WHITESPACE">      modifiers: "public static"</token>
  </line>
  <line no="56">
    <token name="T_ENCAPSED_AND_WHITESPACE">    }</token>
  </line>
  <line no="57">
    <token name="T_ENCAPSED_AND_WHITESPACE">%A</token>
  </line>
  <line no="58">
    <token name="T_ENCAPSED_AND_WHITESPACE">}</token>
  </line>
  <line no="59">
    <token name="T_END_HEREDOC">EOTXT</token>
  </line>
  <line no="60">
    <token name="T_WHITESPACE">            </token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$var</token>
  </line>
  <line no="61">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="62">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="63"/>
  <line no="64">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">testReflectionParameter</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="65">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="66">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$var</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">ReflectionParameter</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NS_C">__NAMESPACE__</token>
    <token name="T_PHPDOX_DOT">.</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'\reflectionParameterFixture'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_LNUMBER">0</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="67"/>
  <line no="68">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">assertDumpMatchesFormat</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="69">
    <token name="T_WHITESPACE">            </token>
    <token name="T_START_HEREDOC">&lt;&lt;&lt;'EOTXT'</token>
  </line>
  <line no="70">
    <token name="T_ENCAPSED_AND_WHITESPACE">ReflectionParameter {</token>
  </line>
  <line no="71">
    <token name="T_ENCAPSED_AND_WHITESPACE">  +name: "arg1"</token>
  </line>
  <line no="72">
    <token name="T_ENCAPSED_AND_WHITESPACE">  position: 0</token>
  </line>
  <line no="73">
    <token name="T_ENCAPSED_AND_WHITESPACE">  typeHint: "Symfony\Component\VarDumper\Tests\Caster\NotExistingClass"</token>
  </line>
  <line no="74">
    <token name="T_ENCAPSED_AND_WHITESPACE">  default: null</token>
  </line>
  <line no="75">
    <token name="T_ENCAPSED_AND_WHITESPACE">}</token>
  </line>
  <line no="76">
    <token name="T_END_HEREDOC">EOTXT</token>
  </line>
  <line no="77">
    <token name="T_WHITESPACE">            </token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$var</token>
  </line>
  <line no="78">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="79">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="80"/>
  <line no="81">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="82">
    <token name="T_DOC_COMMENT">     * @requires PHP 7.0</token>
  </line>
  <line no="83">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="84">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">testReflectionParameterScalar</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="85">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="86">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$f</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_EVAL">eval</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'return function (int $a) {};'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="87">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$var</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">ReflectionParameter</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$f</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_LNUMBER">0</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="88"/>
  <line no="89">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">assertDumpMatchesFormat</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="90">
    <token name="T_WHITESPACE">            </token>
    <token name="T_START_HEREDOC">&lt;&lt;&lt;'EOTXT'</token>
  </line>
  <line no="91">
    <token name="T_ENCAPSED_AND_WHITESPACE">ReflectionParameter {</token>
  </line>
  <line no="92">
    <token name="T_ENCAPSED_AND_WHITESPACE">  +name: "a"</token>
  </line>
  <line no="93">
    <token name="T_ENCAPSED_AND_WHITESPACE">  position: 0</token>
  </line>
  <line no="94">
    <token name="T_ENCAPSED_AND_WHITESPACE">  typeHint: "int"</token>
  </line>
  <line no="95">
    <token name="T_ENCAPSED_AND_WHITESPACE">}</token>
  </line>
  <line no="96">
    <token name="T_END_HEREDOC">EOTXT</token>
  </line>
  <line no="97">
    <token name="T_WHITESPACE">            </token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$var</token>
  </line>
  <line no="98">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="99">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="100"/>
  <line no="101">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="102">
    <token name="T_DOC_COMMENT">     * @requires PHP 7.0</token>
  </line>
  <line no="103">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="104">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">testReturnType</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="105">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="106">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$f</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_EVAL">eval</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'return function ():int {};'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="107">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$line</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_LINE">__LINE__</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_MINUS">-</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_LNUMBER">1</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="108"/>
  <line no="109">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">assertDumpMatchesFormat</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="110">
    <token name="T_WHITESPACE">            </token>
    <token name="T_START_HEREDOC">&lt;&lt;&lt;EOTXT</token>
  </line>
  <line no="111">
    <token name="T_ENCAPSED_AND_WHITESPACE">Closure {</token>
  </line>
  <line no="112">
    <token name="T_ENCAPSED_AND_WHITESPACE">  returnType: "int"</token>
  </line>
  <line no="113">
    <token name="T_ENCAPSED_AND_WHITESPACE">  class: "Symfony\Component\VarDumper\Tests\Caster\ReflectionCasterTest"</token>
  </line>
  <line no="114">
    <token name="T_ENCAPSED_AND_WHITESPACE">  this: Symfony\Component\VarDumper\Tests\Caster\ReflectionCasterTest { &#x2026;}</token>
  </line>
  <line no="115">
    <token name="T_ENCAPSED_AND_WHITESPACE">  file: "%sReflectionCasterTest.php(</token>
    <token name="T_VARIABLE">$line</token>
    <token name="T_ENCAPSED_AND_WHITESPACE">) : eval()'d code"</token>
  </line>
  <line no="116">
    <token name="T_ENCAPSED_AND_WHITESPACE">  line: "1 to 1"</token>
  </line>
  <line no="117">
    <token name="T_ENCAPSED_AND_WHITESPACE">}</token>
  </line>
  <line no="118">
    <token name="T_END_HEREDOC">EOTXT</token>
  </line>
  <line no="119">
    <token name="T_WHITESPACE">            </token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$f</token>
  </line>
  <line no="120">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="121">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="122">
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="123"/>
  <line no="124">
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">reflectionParameterFixture</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_STRING">NotExistingClass</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$arg1</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$arg2</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="125">
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="126">
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="127"/>
</source>
