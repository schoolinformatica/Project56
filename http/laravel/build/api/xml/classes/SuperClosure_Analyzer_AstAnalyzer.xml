<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="SuperClosure\Analyzer\AstAnalyzer" namespace="SuperClosure\Analyzer" name="AstAnalyzer" abstract="false" final="false" start="23" end="141">
  <file path="/home/robert/Desktop/Hogeschool/2ejaars Development/DevBOpdrachten/project56/http/laravel/vendor/jeremeamia/SuperClosure/src/Analyzer" file="AstAnalyzer.php" realpath="/home/robert/Desktop/Hogeschool/2ejaars Development/DevBOpdrachten/project56/http/laravel/vendor/jeremeamia/SuperClosure/src/Analyzer/AstAnalyzer.php" size="4810" time="2015-12-17T18:44:09+00:00" unixtime="1450377849" sha1="7bc89b16105adf02c7870f3b9e8a66196d71b919" relative="vendor/jeremeamia/SuperClosure/src/Analyzer/AstAnalyzer.php"/>
  <docblock>
    <description compact="This is the AST based analyzer.">We're using reflection and AST-based code parser to analyze a closure and
determine its code and context using the nikic/php-parser library. The AST
based analyzer and has more capabilities than the token analyzer, but is,
unfortunately, about 25 times slower.</description>
  </docblock>
  <extends full="SuperClosure\Analyzer\ClosureAnalyzer" namespace="SuperClosure\Analyzer" name="ClosureAnalyzer"/>
  <method name="determineCode" start="25" end="41" abstract="false" final="false" static="false" visibility="protected">
    <parameter name="data" byreference="true" type="array"/>
    <inline>
      <comment value="Find the closure by traversing through a AST of the code." line="27"/>
      <comment value="Note: This also resolves class names to their FQCNs while traversing." line="28"/>
      <comment value="Make a second pass through the AST, but only through the closure's" line="31"/>
      <comment value="nodes, to resolve any magic constants to literal values." line="32"/>
      <comment value="Bounce the updated AST down to a string representation of the code." line="39"/>
    </inline>
  </method>
  <method name="locateClosure" start="50" end="78" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Parses the closure's code and produces an abstract syntax tree (AST)."/>
      <param type="array" variable="$data"/>
      <throws description="if there is an issue finding the closure" type="object">
        <type full="SuperClosure\Exception\ClosureAnalysisException" namespace="SuperClosure\Exception" name="ClosureAnalysisException"/>
      </throws>
    </docblock>
    <parameter name="data" byreference="true" type="array"/>
  </method>
  <method name="determineContext" start="87" end="108" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Returns the variables that in the &quot;use&quot; clause of the closure definition.">These are referred to as the "used variables", "static variables", or
"closed upon variables", "context" of the closure.</description>
      <param type="array" variable="$data"/>
    </docblock>
    <parameter name="data" byreference="true" type="array"/>
    <inline>
      <comment value="Get the variable names defined in the AST" line="89"/>
      <comment value="Get the variable names and values using reflection" line="99"/>
      <comment value="Combine the names and values to create the canonical context." line="102"/>
    </inline>
  </method>
  <method name="getFileAst" start="117" end="128" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description/>
      <param type="object" variable="$reflection">
        <type full="\ReflectionFunction" namespace="" name="ReflectionFunction"/>
      </param>
      <throws type="object">
        <type full="SuperClosure\Exception\ClosureAnalysisException" namespace="SuperClosure\Exception" name="ClosureAnalysisException"/>
      </throws>
      <return type="array" of="object">
        <type full="\PhpParser\Node" namespace="\PhpParser" name="Node"/>
      </return>
    </docblock>
    <parameter name="reflection" byreference="false" type="object">
      <type full="ReflectionFunction" namespace="" name="ReflectionFunction"/>
    </parameter>
  </method>
  <method name="getParser" start="133" end="140" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description/>
      <return type="object">
        <type full="PhpParser\Parser" namespace="PhpParser" name="Parser"/>
      </return>
    </docblock>
  </method>
</class>
