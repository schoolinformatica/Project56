<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="Illuminate\Database\Migrations\Migrator" namespace="Illuminate\Database\Migrations" name="Migrator" abstract="false" final="false" start="9" end="405">
  <file path="/home/robert/Desktop/Hogeschool/2ejaars Development/DevBOpdrachten/project56/http/laravel/vendor/laravel/framework/src/Illuminate/Database/Migrations" file="Migrator.php" realpath="/home/robert/Desktop/Hogeschool/2ejaars Development/DevBOpdrachten/project56/http/laravel/vendor/laravel/framework/src/Illuminate/Database/Migrations/Migrator.php" size="11267" time="2015-12-17T18:44:09+00:00" unixtime="1450377849" sha1="7d48423cc470a67891dbec85436574954ee3e279" relative="vendor/laravel/framework/src/Illuminate/Database/Migrations/Migrator.php"/>
  <member name="repository" visibility="protected" line="16">
    <docblock>
      <description compact="The migration repository implementation."/>
      <var type="object">
        <type full="\Illuminate\Database\Migrations\MigrationRepositoryInterface" namespace="\Illuminate\Database\Migrations" name="MigrationRepositoryInterface"/>
      </var>
    </docblock>
  </member>
  <member name="files" visibility="protected" line="23">
    <docblock>
      <description compact="The filesystem instance."/>
      <var type="object">
        <type full="\Illuminate\Filesystem\Filesystem" namespace="\Illuminate\Filesystem" name="Filesystem"/>
      </var>
    </docblock>
  </member>
  <member name="resolver" visibility="protected" line="30">
    <docblock>
      <description compact="The connection resolver instance."/>
      <var type="object">
        <type full="\Illuminate\Database\ConnectionResolverInterface" namespace="\Illuminate\Database" name="ConnectionResolverInterface"/>
      </var>
    </docblock>
  </member>
  <member name="connection" visibility="protected" line="37">
    <docblock>
      <description compact="The name of the default connection."/>
      <var type="string"/>
    </docblock>
  </member>
  <member name="notes" type="array" default="" visibility="protected" line="44">
    <docblock>
      <description compact="The notes for the current operation."/>
      <var type="array"/>
    </docblock>
  </member>
  <constructor name="__construct" start="54" end="61" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Create a new migrator instance."/>
      <param type="object" variable="$repository">
        <type full="\Illuminate\Database\Migrations\MigrationRepositoryInterface" namespace="\Illuminate\Database\Migrations" name="MigrationRepositoryInterface"/>
      </param>
      <param type="object" variable="$resolver">
        <type full="\Illuminate\Database\ConnectionResolverInterface" namespace="\Illuminate\Database" name="ConnectionResolverInterface"/>
      </param>
      <param type="object" variable="$files">
        <type full="\Illuminate\Filesystem\Filesystem" namespace="\Illuminate\Filesystem" name="Filesystem"/>
      </param>
      <return type="object">
        <type full="Illuminate\Database\Migrations\void" namespace="Illuminate\Database\Migrations" name="void"/>
      </return>
    </docblock>
    <parameter name="repository" byreference="false" type="object">
      <type full="Illuminate\Database\Migrations\MigrationRepositoryInterface" namespace="Illuminate\Database\Migrations" name="MigrationRepositoryInterface"/>
    </parameter>
    <parameter name="resolver" byreference="false" type="object">
      <type full="Illuminate\Database\ConnectionResolverInterface" namespace="Illuminate\Database" name="ConnectionResolverInterface"/>
    </parameter>
    <parameter name="files" byreference="false" type="object">
      <type full="Illuminate\Filesystem\Filesystem" namespace="Illuminate\Filesystem" name="Filesystem"/>
    </parameter>
  </constructor>
  <method name="run" start="70" end="86" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Run the outstanding migrations at a given path."/>
      <param type="string" variable="$path"/>
      <param type="object" variable="$pretend">
        <type full="Illuminate\Database\Migrations\bool" namespace="Illuminate\Database\Migrations" name="bool"/>
      </param>
      <return type="object">
        <type full="Illuminate\Database\Migrations\void" namespace="Illuminate\Database\Migrations" name="void"/>
      </return>
    </docblock>
    <parameter name="path" byreference="false" type="{unknown}"/>
    <parameter name="pretend" byreference="false" type="boolean" default="false"/>
    <inline>
      <comment value="Once we grab all of the migration files for the path, we will compare them" line="76"/>
      <comment value="against the migrations that have already been run for this package then" line="77"/>
      <comment value="run each of the outstanding migrations against a database connection." line="78"/>
    </inline>
  </method>
  <method name="runMigrationList" start="95" end="114" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Run an array of migrations."/>
      <param type="array" variable="$migrations"/>
      <param type="object" variable="$pretend">
        <type full="Illuminate\Database\Migrations\bool" namespace="Illuminate\Database\Migrations" name="bool"/>
      </param>
      <return type="object">
        <type full="Illuminate\Database\Migrations\void" namespace="Illuminate\Database\Migrations" name="void"/>
      </return>
    </docblock>
    <parameter name="migrations" byreference="false" type="{unknown}"/>
    <parameter name="pretend" byreference="false" type="boolean" default="false"/>
    <inline>
      <comment value="First we will just make sure that there are any migrations to run. If there" line="97"/>
      <comment value="aren't, we will just make a note of it to the developer so they're aware" line="98"/>
      <comment value="that all of the migrations have been run against this database system." line="99"/>
      <comment value="Once we have the array of migrations, we will spin through them and run the" line="108"/>
      <comment value="migrations &quot;up&quot; so the changes are made to the databases. We'll then log" line="109"/>
      <comment value="that the migration was run so we don't repeat it next time we execute." line="110"/>
    </inline>
  </method>
  <method name="runUp" start="124" end="143" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Run &quot;up&quot; a migration instance."/>
      <param type="string" variable="$file"/>
      <param type="int" variable="$batch"/>
      <param type="object" variable="$pretend">
        <type full="Illuminate\Database\Migrations\bool" namespace="Illuminate\Database\Migrations" name="bool"/>
      </param>
      <return type="object">
        <type full="Illuminate\Database\Migrations\void" namespace="Illuminate\Database\Migrations" name="void"/>
      </return>
    </docblock>
    <parameter name="file" byreference="false" type="{unknown}"/>
    <parameter name="batch" byreference="false" type="{unknown}"/>
    <parameter name="pretend" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="First we will resolve a &quot;real&quot; instance of the migration class from this" line="126"/>
      <comment value="migration file name. Once we have the instances we can run the actual" line="127"/>
      <comment value="command such as &quot;up&quot; or &quot;down&quot;, or we can just simulate the action." line="128"/>
      <comment value="Once we have run a migrations class, we will log that it was run in this" line="137"/>
      <comment value="repository so that we don't try to run it next time we do a migration" line="138"/>
      <comment value="in the application. A migration repository keeps the migrate order." line="139"/>
    </inline>
  </method>
  <method name="rollback" start="151" end="174" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Rollback the last migration operation."/>
      <param type="object" variable="$pretend">
        <type full="Illuminate\Database\Migrations\bool" namespace="Illuminate\Database\Migrations" name="bool"/>
      </param>
      <return type="int"/>
    </docblock>
    <parameter name="pretend" byreference="false" type="boolean" default="false"/>
    <inline>
      <comment value="We want to pull in the last batch of migrations that ran on the previous" line="155"/>
      <comment value="migration operation. We'll then reverse those migrations and run each" line="156"/>
      <comment value="of them &quot;down&quot; to reverse the last migration &quot;operation&quot; which ran." line="157"/>
    </inline>
  </method>
  <method name="reset" start="182" end="199" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Rolls all of the currently applied migrations back."/>
      <param type="object" variable="$pretend">
        <type full="Illuminate\Database\Migrations\bool" namespace="Illuminate\Database\Migrations" name="bool"/>
      </param>
      <return type="int"/>
    </docblock>
    <parameter name="pretend" byreference="false" type="boolean" default="false"/>
  </method>
  <method name="runDown" start="208" end="229" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Run &quot;down&quot; a migration instance."/>
      <param type="object" variable="$migration"/>
      <param type="object" variable="$pretend">
        <type full="Illuminate\Database\Migrations\bool" namespace="Illuminate\Database\Migrations" name="bool"/>
      </param>
      <return type="object">
        <type full="Illuminate\Database\Migrations\void" namespace="Illuminate\Database\Migrations" name="void"/>
      </return>
    </docblock>
    <parameter name="migration" byreference="false" type="{unknown}"/>
    <parameter name="pretend" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="First we will get the file name of the migration so we can resolve out an" line="212"/>
      <comment value="instance of the migration. Once we get an instance we can either run a" line="213"/>
      <comment value="pretend execution of the migration or we can run the real migration." line="214"/>
      <comment value="Once we have successfully run the migration &quot;down&quot; we will remove it from" line="223"/>
      <comment value="the migration repository so it will be considered to have not been run" line="224"/>
      <comment value="by the application then will be able to fire by any later operation." line="225"/>
    </inline>
  </method>
  <method name="getMigrationFiles" start="237" end="259" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get all of the migration files in a given path."/>
      <param type="string" variable="$path"/>
      <return type="array"/>
    </docblock>
    <parameter name="path" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="Once we have the array of files in the directory we will just remove the" line="241"/>
      <comment value="extension and take the basename of the file which is all we need when" line="242"/>
      <comment value="finding the migrations that haven't been run against the databases." line="243"/>
      <comment value="Once we have all of the formatted file names we will sort them and since" line="253"/>
      <comment value="they all start with a timestamp this should give us the migrations in" line="254"/>
      <comment value="the order they were actually created by the application developers." line="255"/>
    </inline>
  </method>
  <method name="requireFiles" start="268" end="273" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Require in all the migration files in a given path."/>
      <param type="string" variable="$path"/>
      <param type="array" variable="$files"/>
      <return type="object">
        <type full="Illuminate\Database\Migrations\void" namespace="Illuminate\Database\Migrations" name="void"/>
      </return>
    </docblock>
    <parameter name="path" byreference="false" type="{unknown}"/>
    <parameter name="files" byreference="false" type="array"/>
  </method>
  <method name="pretendToRun" start="282" end="289" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Pretend to run the migrations."/>
      <param type="object" variable="$migration"/>
      <param type="string" variable="$method"/>
      <return type="object">
        <type full="Illuminate\Database\Migrations\void" namespace="Illuminate\Database\Migrations" name="void"/>
      </return>
    </docblock>
    <parameter name="migration" byreference="false" type="{unknown}"/>
    <parameter name="method" byreference="false" type="{unknown}"/>
  </method>
  <method name="getQueries" start="298" end="310" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Get all of the queries that would be run for a migration."/>
      <param type="object" variable="$migration"/>
      <param type="string" variable="$method"/>
      <return type="array"/>
    </docblock>
    <parameter name="migration" byreference="false" type="{unknown}"/>
    <parameter name="method" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="Now that we have the connections we can resolve it and pretend to run the" line="302"/>
      <comment value="queries against the database returning the array of raw SQL statements" line="303"/>
      <comment value="that would get fired against the database system for this migration." line="304"/>
    </inline>
  </method>
  <method name="resolve" start="318" end="325" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Resolve a migration instance from a file."/>
      <param type="string" variable="$file"/>
      <return type="object"/>
    </docblock>
    <parameter name="file" byreference="false" type="{unknown}"/>
  </method>
  <method name="note" start="333" end="336" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Raise a note event for the migrator."/>
      <param type="string" variable="$message"/>
      <return type="object">
        <type full="Illuminate\Database\Migrations\void" namespace="Illuminate\Database\Migrations" name="void"/>
      </return>
    </docblock>
    <parameter name="message" byreference="false" type="{unknown}"/>
  </method>
  <method name="getNotes" start="343" end="346" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get the notes for the last operation."/>
      <return type="array"/>
    </docblock>
  </method>
  <method name="resolveConnection" start="354" end="357" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Resolve the database connection instance."/>
      <param type="string" variable="$connection"/>
      <return type="object">
        <type full="\Illuminate\Database\Connection" namespace="\Illuminate\Database" name="Connection"/>
      </return>
    </docblock>
    <parameter name="connection" byreference="false" type="{unknown}"/>
  </method>
  <method name="setConnection" start="365" end="374" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Set the default connection name."/>
      <param type="string" variable="$name"/>
      <return type="object">
        <type full="Illuminate\Database\Migrations\void" namespace="Illuminate\Database\Migrations" name="void"/>
      </return>
    </docblock>
    <parameter name="name" byreference="false" type="{unknown}"/>
  </method>
  <method name="getRepository" start="381" end="384" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get the migration repository instance."/>
      <return type="object">
        <type full="\Illuminate\Database\Migrations\MigrationRepositoryInterface" namespace="\Illuminate\Database\Migrations" name="MigrationRepositoryInterface"/>
      </return>
    </docblock>
  </method>
  <method name="repositoryExists" start="391" end="394" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Determine if the migration repository exists."/>
      <return type="object">
        <type full="Illuminate\Database\Migrations\bool" namespace="Illuminate\Database\Migrations" name="bool"/>
      </return>
    </docblock>
  </method>
  <method name="getFilesystem" start="401" end="404" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get the file system instance."/>
      <return type="object">
        <type full="\Illuminate\Filesystem\Filesystem" namespace="\Illuminate\Filesystem" name="Filesystem"/>
      </return>
    </docblock>
  </method>
</class>
