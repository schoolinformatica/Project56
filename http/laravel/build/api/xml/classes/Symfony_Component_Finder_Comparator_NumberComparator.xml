<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="Symfony\Component\Finder\Comparator\NumberComparator" namespace="Symfony\Component\Finder\Comparator" name="NumberComparator" abstract="false" final="false" start="35" end="81">
  <file path="/home/robert/Desktop/Hogeschool/2ejaars Development/DevBOpdrachten/project56/http/laravel/vendor/symfony/finder/Comparator" file="NumberComparator.php" realpath="/home/robert/Desktop/Hogeschool/2ejaars Development/DevBOpdrachten/project56/http/laravel/vendor/symfony/finder/Comparator/NumberComparator.php" size="2588" time="2015-12-17T18:44:10+00:00" unixtime="1450377850" sha1="29623acdea046447f158c2fe2dcd25c2715cdc89" relative="vendor/symfony/finder/Comparator/NumberComparator.php"/>
  <docblock>
    <description compact="NumberComparator compiles a simple comparison to an anonymous subroutine, which you can call with a value to be tested again.">Now this would be very pointless, if NumberCompare didn't understand
magnitudes.

The target value may use magnitudes of kilobytes (k, ki),
megabytes (m, mi), or gigabytes (g, gi).  Those suffixed
with an i use the appropriate 2**n version in accordance with the
IEC standard: http://physics.nist.gov/cuu/Units/binary.html

Based on the Perl Number::Compare module.</description>
    <author value="Fabien Potencier &lt;fabien@symfony.com&gt; PHP port"/>
    <author value="Richard Clamp &lt;richardc@unixbeard.net&gt; Perl version"/>
    <copyright value="2004-2005 Fabien Potencier &lt;fabien@symfony.com&gt;"/>
    <copyright value="2002 Richard Clamp &lt;richardc@unixbeard.net&gt;"/>
    <see value="http://physics.nist.gov/cuu/Units/binary.html"/>
  </docblock>
  <extends full="Symfony\Component\Finder\Comparator\Comparator" namespace="Symfony\Component\Finder\Comparator" name="Comparator"/>
  <constructor name="__construct" start="44" end="80" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Constructor."/>
      <param description="A comparison string" type="string" variable="$test"/>
      <throws description="If the test is not understood" type="object">
        <type full="\InvalidArgumentException" namespace="" name="InvalidArgumentException"/>
      </throws>
    </docblock>
    <parameter name="test" byreference="false" type="{unknown}"/>
  </constructor>
</class>
