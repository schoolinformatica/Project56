<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="Swift_Mime_Headers_MailboxHeader" namespace="" name="Swift_Mime_Headers_MailboxHeader" abstract="false" final="false" start="16" end="354">
  <file path="/home/robert/Desktop/Hogeschool/2ejaars Development/DevBOpdrachten/project56/http/laravel/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/Headers" file="MailboxHeader.php" realpath="/home/robert/Desktop/Hogeschool/2ejaars Development/DevBOpdrachten/project56/http/laravel/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/Headers/MailboxHeader.php" size="9342" time="2015-12-17T18:44:10+00:00" unixtime="1450377850" sha1="b01c968966051b295b92c5e76416e5a8cc86e6ce" relative="vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/Headers/MailboxHeader.php"/>
  <docblock>
    <description compact="A Mailbox Address MIME Header for something like From or Sender."/>
    <author value="Chris Corbyn"/>
  </docblock>
  <extends full="Swift_Mime_Headers_AbstractHeader" namespace="" name="Swift_Mime_Headers_AbstractHeader"/>
  <member name="_mailboxes" type="array" default="" visibility="private" line="23">
    <docblock>
      <description compact="The mailboxes used in this Header."/>
      <var type="array" of="string"/>
    </docblock>
  </member>
  <constructor name="__construct" start="32" end="37" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Creates a new MailboxHeader with $name."/>
      <param description="of Header" type="string" variable="$name"/>
      <param type="object" variable="$encoder">
        <type full="Swift_Mime_HeaderEncoder" namespace="" name="Swift_Mime_HeaderEncoder"/>
      </param>
      <param type="object" variable="$grammar">
        <type full="Swift_Mime_Grammar" namespace="" name="Swift_Mime_Grammar"/>
      </param>
    </docblock>
    <parameter name="name" byreference="false" type="{unknown}"/>
    <parameter name="encoder" byreference="false" type="object">
      <type full="Swift_Mime_HeaderEncoder" namespace="" name="Swift_Mime_HeaderEncoder"/>
    </parameter>
    <parameter name="grammar" byreference="false" type="object">
      <type full="Swift_Mime_Grammar" namespace="" name="Swift_Mime_Grammar"/>
    </parameter>
  </constructor>
  <method name="getFieldType" start="47" end="50" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get the type of Header that this instance represents."/>
      <see value="TYPE_TEXT, TYPE_PARAMETERIZED, TYPE_MAILBOX"/>
      <see value="TYPE_DATE, TYPE_ID, TYPE_PATH"/>
      <return type="int"/>
    </docblock>
  </method>
  <method name="setFieldBodyModel" start="61" end="64" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Set the model for the field body.">This method takes a string, or an array of addresses.</description>
      <param type="mixed" variable="$model"/>
      <throws type="object">
        <type full="Swift_RfcComplianceException" namespace="" name="Swift_RfcComplianceException"/>
      </throws>
    </docblock>
    <parameter name="model" byreference="false" type="{unknown}"/>
  </method>
  <method name="getFieldBodyModel" start="75" end="78" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get the model for the field body.">This method returns an associative array like <link xmlns="http://xml.phpdox.net/src" value="getNameAddresses()"/></description>
      <throws type="object">
        <type full="Swift_RfcComplianceException" namespace="" name="Swift_RfcComplianceException"/>
      </throws>
      <return type="array"/>
    </docblock>
  </method>
  <method name="setNameAddresses" start="104" end="108" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Set a list of mailboxes to be shown in this Header.">The mailboxes can be a simple array of addresses, or an array of
key=&gt;value pairs where (email =&gt; personalName).
Example:
&lt;code&gt;
&lt;?php
//Sets two mailboxes in the Header, one with a personal name
$header-&gt;setNameAddresses(array(
 'chris@swiftmailer.org' =&gt; 'Chris Corbyn',
 'mark@swiftmailer.org' //No associated personal name
 ));
?&gt;
&lt;/code&gt;</description>
      <see value="__construct()"/>
      <see value="setAddresses()"/>
      <see value="setValue()"/>
      <param type="array" variable="$mailboxes" of="object">
        <type full="string|string" namespace="" name="string|string"/>
      </param>
      <throws type="object">
        <type full="Swift_RfcComplianceException" namespace="" name="Swift_RfcComplianceException"/>
      </throws>
    </docblock>
    <parameter name="mailboxes" byreference="false" type="{unknown}"/>
  </method>
  <method name="getNameAddressStrings" start="135" end="138" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get the full mailbox list of this Header as an array of valid RFC 2822 strings.">Example:
&lt;code&gt;
&lt;?php
$header = new Swift_Mime_Headers_MailboxHeader('From',
 array('chris@swiftmailer.org' =&gt; 'Chris Corbyn',
 'mark@swiftmailer.org' =&gt; 'Mark Corbyn')
 );
print_r($header-&gt;getNameAddressStrings());
// array (
// 0 =&gt; Chris Corbyn &lt;chris@swiftmailer.org&gt;,
// 1 =&gt; Mark Corbyn &lt;mark@swiftmailer.org&gt;
// )
?&gt;
&lt;/code&gt;</description>
      <see value="getNameAddresses()"/>
      <see value="toString()"/>
      <throws type="object">
        <type full="Swift_RfcComplianceException" namespace="" name="Swift_RfcComplianceException"/>
      </throws>
      <return type="array" of="string"/>
    </docblock>
  </method>
  <method name="getNameAddresses" start="164" end="167" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get all mailboxes in this Header as key=&gt;value pairs.">The key is the address and the value is the name (or null if none set).
Example:
&lt;code&gt;
&lt;?php
$header = new Swift_Mime_Headers_MailboxHeader('From',
 array('chris@swiftmailer.org' =&gt; 'Chris Corbyn',
 'mark@swiftmailer.org' =&gt; 'Mark Corbyn')
 );
print_r($header-&gt;getNameAddresses());
// array (
// chris@swiftmailer.org =&gt; Chris Corbyn,
// mark@swiftmailer.org =&gt; Mark Corbyn
// )
?&gt;
&lt;/code&gt;</description>
      <see value="getAddresses()"/>
      <see value="getNameAddressStrings()"/>
      <return type="array" of="string"/>
    </docblock>
  </method>
  <method name="setAddresses" start="189" end="192" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Makes this Header represent a list of plain email addresses with no names.">Example:
&lt;code&gt;
&lt;?php
//Sets three email addresses as the Header data
$header-&gt;setAddresses(
 array('one@domain.tld', 'two@domain.tld', 'three@domain.tld')
 );
?&gt;
&lt;/code&gt;</description>
      <see value="setNameAddresses()"/>
      <see value="setValue()"/>
      <param type="array" variable="$addresses" of="string"/>
      <throws type="object">
        <type full="Swift_RfcComplianceException" namespace="" name="Swift_RfcComplianceException"/>
      </throws>
    </docblock>
    <parameter name="addresses" byreference="false" type="{unknown}"/>
  </method>
  <method name="getAddresses" start="201" end="204" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get all email addresses in this Header."/>
      <see value="getNameAddresses()"/>
      <return type="array" of="string"/>
    </docblock>
  </method>
  <method name="removeAddresses" start="211" end="217" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Remove one or more addresses from this Header."/>
      <param type="array" variable="$addresses" of="object">
        <type full="string|string" namespace="" name="string|string"/>
      </param>
    </docblock>
    <parameter name="addresses" byreference="false" type="{unknown}"/>
  </method>
  <method name="getFieldBody" start="231" end="239" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get the string value of the body in this Header.">This is not necessarily RFC 2822 compliant since folding white space will
not be added at this stage (see <link xmlns="http://xml.phpdox.net/src" value="toString()"/> for that).
</description>
      <see value="toString()"/>
      <throws type="object">
        <type full="Swift_RfcComplianceException" namespace="" name="Swift_RfcComplianceException"/>
      </throws>
      <return type="string"/>
    </docblock>
    <inline>
      <comment value="Compute the string value of the header only if needed" line="233"/>
    </inline>
  </method>
  <method name="normalizeMailboxes" start="250" end="268" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Normalizes a user-input list of mailboxes into consistent key=&gt;value pairs."/>
      <param type="array" variable="$mailboxes" of="string"/>
      <return type="array" of="string"/>
    </docblock>
    <parameter name="mailboxes" byreference="false" type="array"/>
  </method>
  <method name="createDisplayNameString" start="278" end="283" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Produces a compliant, formatted display-name based on the string given."/>
      <param description="as displayed" type="string" variable="$displayName"/>
      <param description="the first line to make remove for header name" type="object" variable="$shorten">
        <type full="bool" namespace="" name="bool"/>
      </param>
      <return type="string"/>
    </docblock>
    <parameter name="displayName" byreference="false" type="{unknown}"/>
    <parameter name="shorten" byreference="false" type="boolean" default="false"/>
  </method>
  <method name="createMailboxListString" start="294" end="297" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Creates a string form of all the mailboxes in the passed array."/>
      <param type="array" variable="$mailboxes" of="string"/>
      <throws type="object">
        <type full="Swift_RfcComplianceException" namespace="" name="Swift_RfcComplianceException"/>
      </throws>
      <return type="string"/>
    </docblock>
    <parameter name="mailboxes" byreference="false" type="array"/>
  </method>
  <method name="tokenNeedsEncoding" start="309" end="312" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Redefine the encoding requirements for mailboxes.">Commas and semicolons are used to separate
multiple addresses, and should therefore be encoded</description>
      <param type="string" variable="$token"/>
      <return type="object">
        <type full="bool" namespace="" name="bool"/>
      </return>
    </docblock>
    <parameter name="token" byreference="false" type="{unknown}"/>
  </method>
  <method name="_createNameAddressStrings" start="321" end="335" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Return an array of strings conforming the the name-addr spec of RFC 2822."/>
      <param type="array" variable="$mailboxes" of="string"/>
      <return type="array" of="string"/>
    </docblock>
    <parameter name="mailboxes" byreference="false" type="array"/>
  </method>
  <method name="_assertValidAddress" start="344" end="353" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Throws an Exception if the address passed does not comply with RFC 2822."/>
      <param type="string" variable="$address"/>
      <throws description="If invalid." type="object">
        <type full="Swift_RfcComplianceException" namespace="" name="Swift_RfcComplianceException"/>
      </throws>
    </docblock>
    <parameter name="address" byreference="false" type="{unknown}"/>
  </method>
</class>
