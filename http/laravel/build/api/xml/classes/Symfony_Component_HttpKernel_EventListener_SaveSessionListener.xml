<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="Symfony\Component\HttpKernel\EventListener\SaveSessionListener" namespace="Symfony\Component\HttpKernel\EventListener" name="SaveSessionListener" abstract="false" final="false" start="45" end="66">
  <file path="/home/robert/Desktop/Hogeschool/2ejaars Development/DevBOpdrachten/project56/http/laravel/vendor/symfony/http-kernel/EventListener" file="SaveSessionListener.php" realpath="/home/robert/Desktop/Hogeschool/2ejaars Development/DevBOpdrachten/project56/http/laravel/vendor/symfony/http-kernel/EventListener/SaveSessionListener.php" size="2769" time="2015-12-17T18:44:10+00:00" unixtime="1450377850" sha1="e63b54f0af3abfb039b1baadd35a3d2778fb0d20" relative="vendor/symfony/http-kernel/EventListener/SaveSessionListener.php"/>
  <docblock>
    <description compact="Saves the session, in case it is still open, before sending the response/headers.">This ensures several things in case the developer did not save the session explicitly:

 * If a session save handler without locking is used, it ensures the data is available
   on the next request, e.g. after a redirect. PHPs auto-save at script end via
   session_register_shutdown is executed after fastcgi_finish_request. So in this case
   the data could be missing the next request because it might not be saved the moment
   the new request is processed.
 * A locking save handler (e.g. the native 'files') circumvents concurrency problems like
   the one above. But by saving the session before long-running things in the terminate event,
   we ensure the session is not blocked longer than needed.
 * When regenerating the session ID no locking is involved in PHPs session design. See
   https://bugs.php.net/bug.php?id=61470 for a discussion. So in this case, the session must
   be saved anyway before sending the headers with the new session ID. Otherwise session
   data could get lost again for concurrent requests with the new ID. One result could be
   that you get logged out after just logging in.

This listener should be executed as one of the last listeners, so that previous listeners
can still operate on the open session. This prevents the overhead of restarting it.
Listeners after closing the session can still work with the session as usual because
Symfonys session implementation starts the session on demand. So writing to it after
it is saved will just restart it.</description>
    <author value="Tobias Schultze &lt;http://tobion.de&gt;"/>
  </docblock>
  <implements full="Symfony\Component\EventDispatcher\EventSubscriberInterface" namespace="Symfony\Component\EventDispatcher" name="EventSubscriberInterface"/>
  <method name="onKernelResponse" start="47" end="57" abstract="false" final="false" static="false" visibility="public">
    <parameter name="event" byreference="false" type="object">
      <type full="Symfony\Component\HttpKernel\Event\FilterResponseEvent" namespace="Symfony\Component\HttpKernel\Event" name="FilterResponseEvent"/>
    </parameter>
  </method>
  <method name="getSubscribedEvents" start="59" end="65" abstract="false" final="false" static="true" visibility="public"/>
</class>
