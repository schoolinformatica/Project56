<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="PhpParser\ParserAbstract" namespace="PhpParser" name="ParserAbstract" abstract="true" final="false" start="11" end="482">
  <file path="/home/robert/Desktop/Hogeschool/2ejaars Development/DevBOpdrachten/project56/http/laravel/vendor/nikic/php-parser/lib/PhpParser" file="ParserAbstract.php" realpath="/home/robert/Desktop/Hogeschool/2ejaars Development/DevBOpdrachten/project56/http/laravel/vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php" size="19884" time="2015-12-17T18:44:09+00:00" unixtime="1450377849" sha1="1e9c9b1e62d7844ded6eec3d7c165824cbce24d5" relative="vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php"/>
  <implements full="PhpParser\Parser" namespace="PhpParser" name="Parser"/>
  <constant type="integer" name="SYMBOL_NONE" value="1"/>
  <member name="tokenToSymbolMapSize" visibility="protected" line="20">
    <docblock>
      <description compact="@var int Size of $tokenToSymbol map"/>
    </docblock>
  </member>
  <member name="actionTableSize" visibility="protected" line="22">
    <docblock>
      <description compact="@var int Size of $action table"/>
    </docblock>
  </member>
  <member name="gotoTableSize" visibility="protected" line="24">
    <docblock>
      <description compact="@var int Size of $goto table"/>
    </docblock>
  </member>
  <member name="invalidSymbol" visibility="protected" line="27">
    <docblock>
      <description compact="@var int Symbol number signifying an invalid token"/>
    </docblock>
  </member>
  <member name="errorSymbol" visibility="protected" line="29">
    <docblock>
      <description compact="@var int Symbol number of error recovery token"/>
    </docblock>
  </member>
  <member name="defaultAction" visibility="protected" line="31">
    <docblock>
      <description compact="@var int Action number signifying default action"/>
    </docblock>
  </member>
  <member name="unexpectedTokenRule" visibility="protected" line="33">
    <docblock>
      <description compact="@var int Rule number signifying that an unexpected token was encountered"/>
    </docblock>
  </member>
  <member name="YY2TBLSTATE" visibility="protected" line="35"/>
  <member name="YYNLSTATES" visibility="protected" line="36"/>
  <member name="tokenToSymbol" visibility="protected" line="39">
    <docblock>
      <description compact="@var array Map of lexer tokens to internal symbols"/>
    </docblock>
  </member>
  <member name="symbolToName" visibility="protected" line="41">
    <docblock>
      <description compact="@var array Map of symbols to their names"/>
    </docblock>
  </member>
  <member name="productions" visibility="protected" line="43">
    <docblock>
      <description compact="@var array Names of the production rules (only necessary for debugging)"/>
    </docblock>
  </member>
  <member name="actionBase" visibility="protected" line="48">
    <docblock>
      <description compact="@var array Map of states to a displacement into the $action table. The corresponding action for this             state/symbol pair is $action[$actionBase[$state] + $symbol]. If $actionBase[$state] is 0, the                    action is defaulted, i.e. $actionDefault[$state] should be used instead."/>
    </docblock>
  </member>
  <member name="action" visibility="protected" line="50">
    <docblock>
      <description compact="@var array Table of actions. Indexed according to $actionBase comment."/>
    </docblock>
  </member>
  <member name="actionCheck" visibility="protected" line="53">
    <docblock>
      <description compact="@var array Table indexed analogously to $action. If $actionCheck[$actionBase[$state] + $symbol] != $symbol             then the action is defaulted, i.e. $actionDefault[$state] should be used instead."/>
    </docblock>
  </member>
  <member name="actionDefault" visibility="protected" line="55">
    <docblock>
      <description compact="@var array Map of states to their default action"/>
    </docblock>
  </member>
  <member name="gotoBase" visibility="protected" line="59">
    <docblock>
      <description compact="@var array Map of non-terminals to a displacement into the $goto table. The corresponding goto state for this             non-terminal/state pair is $goto[$gotoBase[$nonTerminal] + $state] (unless defaulted)"/>
    </docblock>
  </member>
  <member name="goto" visibility="protected" line="61">
    <docblock>
      <description compact="@var array Table of states to goto after reduction. Indexed according to $gotoBase comment."/>
    </docblock>
  </member>
  <member name="gotoCheck" visibility="protected" line="64">
    <docblock>
      <description compact="@var array Table indexed analogously to $goto. If $gotoCheck[$gotoBase[$nonTerminal] + $state] != $nonTerminal             then the goto state is defaulted, i.e. $gotoDefault[$nonTerminal] should be used."/>
    </docblock>
  </member>
  <member name="gotoDefault" visibility="protected" line="66">
    <docblock>
      <description compact="@var array Map of non-terminals to the default state to goto after their reduction"/>
    </docblock>
  </member>
  <member name="ruleToNonTerminal" visibility="protected" line="70">
    <docblock>
      <description compact="@var array Map of rules to the non-terminal on their left-hand side, i.e. the non-terminal to use for             determining the state to goto after reduction."/>
    </docblock>
  </member>
  <member name="ruleToLength" visibility="protected" line="73">
    <docblock>
      <description compact="@var array Map of rules to the length of their right-hand side, which is the number of elements that have to             be popped from the stack(s) on reduction."/>
    </docblock>
  </member>
  <member name="lexer" visibility="protected" line="80">
    <docblock>
      <description compact="@var Lexer Lexer that is used when parsing"/>
    </docblock>
  </member>
  <member name="semValue" visibility="protected" line="82">
    <docblock>
      <description compact="@var mixed Temporary value containing the result of last semantic action (reduction)"/>
    </docblock>
  </member>
  <member name="stackPos" visibility="protected" line="84">
    <docblock>
      <description compact="@var int Position in stacks (state stack, semantic value stack, attribute stack)"/>
    </docblock>
  </member>
  <member name="semStack" visibility="protected" line="86">
    <docblock>
      <description compact="@var array Semantic value stack (contains values of tokens and semantic action results)"/>
    </docblock>
  </member>
  <member name="startAttributeStack" visibility="protected" line="88">
    <docblock>
      <description compact="@var array[] Start attribute stack"/>
    </docblock>
  </member>
  <member name="endAttributes" visibility="protected" line="90">
    <docblock>
      <description compact="@var array End attributes of last *shifted* token"/>
    </docblock>
  </member>
  <member name="throwOnError" visibility="protected" line="93">
    <docblock>
      <description compact="@var bool Whether to throw on first error"/>
    </docblock>
  </member>
  <member name="errors" visibility="protected" line="95">
    <docblock>
      <description compact="@var Error[] Errors collected during last parse"/>
    </docblock>
  </member>
  <constructor name="__construct" start="105" end="109" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Creates a parser instance."/>
      <param description="A lexer" type="object" variable="$lexer">
        <type full="PhpParser\Lexer" namespace="PhpParser" name="Lexer"/>
      </param>
      <param description="Options array. The boolean 'throwOnError' option determines whether an exception should be" type="array" variable="$options">thrown on first error, or if the parser should try to continue parsing the remaining code
                      and build a partial AST.</param>
    </docblock>
    <parameter name="lexer" byreference="false" type="object">
      <type full="PhpParser\Lexer" namespace="PhpParser" name="Lexer"/>
    </parameter>
    <parameter name="options" byreference="false" type="array" default=""/>
  </constructor>
  <method name="getErrors" start="118" end="120" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get array of errors that occurred during the last parse.">This method may only return multiple errors if the 'throwOnError' option is disabled.</description>
      <return type="array" of="object">
        <type full="PhpParser\Error" namespace="PhpParser" name="Error"/>
      </return>
    </docblock>
  </method>
  <method name="parse" start="130" end="329" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Parses PHP code into a node tree."/>
      <param description="The source code to parse" type="string" variable="$code"/>
      <return description="Array of statements (or null if the 'throwOnError' option is disabled and the parser was" type="array" of="object">unable to recover from an error).<type full="PhpParser\Node[]|nu" namespace="PhpParser" name="Node[]|nu"/></return>
    </docblock>
    <parameter name="code" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="We start off with no lookahead-token" line="134"/>
      <comment value="The attributes for a node are taken from the first and last token of the node." line="137"/>
      <comment value="From the first token only the startAttributes are taken and from the last only" line="138"/>
      <comment value="the endAttributes. Both are merged using the array union operator (+)." line="139"/>
      <comment value="In order to figure out the attributes for the starting token, we have to keep" line="144"/>
      <comment value="them in a stack" line="145"/>
      <comment value="Start off in the initial state and keep a stack of previous states" line="148"/>
      <comment value="Semantic value stack (contains values of tokens and semantic action results)" line="152"/>
      <comment value="Current position in the stack(s)" line="155"/>
    </inline>
  </method>
  <method name="getErrorMessage" start="331" end="338" abstract="false" final="false" static="false" visibility="protected">
    <parameter name="symbol" byreference="false" type="{unknown}"/>
    <parameter name="state" byreference="false" type="{unknown}"/>
  </method>
  <method name="getExpectedTokens" start="340" end="363" abstract="false" final="false" static="false" visibility="protected">
    <parameter name="state" byreference="false" type="{unknown}"/>
  </method>
  <method name="handleNamespaces" start="410" end="444" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Moves statements of semicolon-style namespaces into $ns-&gt;stmts and checks various error conditions."/>
      <param type="array" variable="$stmts" of="object">
        <type full="PhpParser\Node" namespace="PhpParser" name="Node"/>
      </param>
      <return type="array" of="object">
        <type full="PhpParser\Node" namespace="PhpParser" name="Node"/>
      </return>
    </docblock>
    <parameter name="stmts" byreference="false" type="array"/>
  </method>
  <method name="getNamespacingStyle" start="446" end="465" abstract="false" final="false" static="false" visibility="private">
    <parameter name="stmts" byreference="false" type="array"/>
  </method>
  <method name="handleScalarTypes" start="467" end="481" abstract="false" final="false" static="false" visibility="protected">
    <parameter name="name" byreference="false" type="object">
      <type full="PhpParser\Node\Name" namespace="PhpParser\Node" name="Name"/>
    </parameter>
  </method>
</class>
