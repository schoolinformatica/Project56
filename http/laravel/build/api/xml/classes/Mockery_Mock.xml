<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="Mockery\Mock" namespace="Mockery" name="Mock" abstract="false" final="false" start="25" end="758">
  <file path="/home/robert/Desktop/Hogeschool/2ejaars Development/DevBOpdrachten/project56/http/laravel/vendor/mockery/mockery/library/Mockery" file="Mock.php" realpath="/home/robert/Desktop/Hogeschool/2ejaars Development/DevBOpdrachten/project56/http/laravel/vendor/mockery/mockery/library/Mockery/Mock.php" size="22069" time="2015-12-17T18:44:09+00:00" unixtime="1450377849" sha1="295fbe77f65ddae5a08196789f5729037b4cd69c" relative="vendor/mockery/mockery/library/Mockery/Mock.php"/>
  <implements full="Mockery\MockInterface" namespace="Mockery" name="MockInterface"/>
  <member name="_mockery_expectations" type="array" default="" visibility="protected" line="33">
    <docblock>
      <description compact="Stores an array of all expectation directors for this mock"/>
      <var type="array"/>
    </docblock>
  </member>
  <member name="_mockery_ignoreMissing" type="boolean" default="false" visibility="protected" line="41">
    <docblock>
      <description compact="Flag to indicate whether we can ignore method calls missing from our expectations"/>
      <var type="object">
        <type full="Mockery\bool" namespace="Mockery" name="bool"/>
      </var>
    </docblock>
  </member>
  <member name="_mockery_deferMissing" type="boolean" default="false" visibility="protected" line="49">
    <docblock>
      <description compact="Flag to indicate whether we can defer method calls missing from our expectations"/>
      <var type="object">
        <type full="Mockery\bool" namespace="Mockery" name="bool"/>
      </var>
    </docblock>
  </member>
  <member name="_mockery_verified" type="boolean" default="false" visibility="protected" line="56">
    <docblock>
      <description compact="Flag to indicate whether this mock was verified"/>
      <var type="object">
        <type full="Mockery\bool" namespace="Mockery" name="bool"/>
      </var>
    </docblock>
  </member>
  <member name="_mockery_name" type="{unknown}" default="" constant="null" visibility="protected" line="63">
    <docblock>
      <description compact="Given name of the mock"/>
      <var type="string"/>
    </docblock>
  </member>
  <member name="_mockery_allocatedOrder" type="integer" default="0" visibility="protected" line="70">
    <docblock>
      <description compact="Order number of allocation"/>
      <var type="int"/>
    </docblock>
  </member>
  <member name="_mockery_currentOrder" type="integer" default="0" visibility="protected" line="77">
    <docblock>
      <description compact="Current ordered number"/>
      <var type="int"/>
    </docblock>
  </member>
  <member name="_mockery_groups" type="array" default="" visibility="protected" line="84">
    <docblock>
      <description compact="Ordered groups"/>
      <var type="array"/>
    </docblock>
  </member>
  <member name="_mockery_container" type="{unknown}" default="" constant="null" visibility="protected" line="91">
    <docblock>
      <description compact="Mock container containing this mock object"/>
      <var type="object">
        <type full="\Mockery\Container" namespace="\Mockery" name="Container"/>
      </var>
    </docblock>
  </member>
  <member name="_mockery_partial" type="{unknown}" default="" constant="null" visibility="protected" line="100">
    <docblock>
      <description compact="Instance of a core object on which methods are called in the event it has been set, and an expectation for one of the object's methods does not exist. This implements a simple partial mock proxy system."/>
      <var type="object"/>
    </docblock>
  </member>
  <member name="_mockery_disableExpectationMatching" type="boolean" default="false" visibility="protected" line="109">
    <docblock>
      <description compact="Flag to indicate we should ignore all expectations temporarily. Used mainly to prevent expectation matching when in the middle of a mock object recording session."/>
      <var type="object">
        <type full="Mockery\bool" namespace="Mockery" name="bool"/>
      </var>
    </docblock>
  </member>
  <member name="_mockery_mockableProperties" type="array" default="" visibility="protected" line="117">
    <docblock>
      <description compact="Stores all stubbed public methods separate from any on-object public properties that may exist."/>
      <var type="array"/>
    </docblock>
  </member>
  <member name="_mockery_mockableMethods" type="array" default="" visibility="protected" line="122">
    <docblock>
      <description/>
      <var type="array"/>
    </docblock>
  </member>
  <member name="_mockery_methods" visibility="protected" line="129">
    <docblock>
      <description compact="Just a local cache for this mock's target's methods"/>
      <var type="array" of="object">
        <type full="Mockery\ReflectionMethod" namespace="Mockery" name="ReflectionMethod"/>
      </var>
    </docblock>
  </member>
  <member name="_mockery_allowMockingProtectedMethods" type="boolean" default="false" visibility="protected" line="131"/>
  <member name="_mockery_receivedMethodCalls" visibility="protected" line="133"/>
  <member name="_mockery_defaultReturnValue" type="{unknown}" default="" constant="null" visibility="protected" line="139">
    <docblock>
      <description compact="If shouldIgnoreMissing is called, this value will be returned on all calls to missing methods"/>
      <var type="mixed"/>
    </docblock>
  </member>
  <method name="mockery_init" start="149" end="166" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="We want to avoid constructors since class is copied to Generator.php for inclusion on extending class definitions."/>
      <param type="object" variable="$container">
        <type full="\Mockery\Container" namespace="\Mockery" name="Container"/>
      </param>
      <param type="object" variable="$partialObject"/>
      <return type="object">
        <type full="Mockery\void" namespace="Mockery" name="void"/>
      </return>
    </docblock>
    <parameter name="container" byreference="false" type="{unknown}" default="" constant="null">
      <type full="Mockery\Container" namespace="Mockery" name="Container"/>
    </parameter>
    <parameter name="partialObject" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="shouldReceive" start="174" end="205" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Set expected method calls"/>
      <param type="mixed"/>
      <return type="object">
        <type full="\Mockery\Expectation" namespace="\Mockery" name="Expectation"/>
      </return>
    </docblock>
  </method>
  <method name="shouldNotReceive" start="213" end="218" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Shortcut method for setting an expectation that a method should not be called."/>
      <param type="mixed"/>
      <return type="object">
        <type full="\Mockery\Expectation" namespace="\Mockery" name="Expectation"/>
      </return>
    </docblock>
  </method>
  <method name="shouldAllowMockingMethod" start="225" end="229" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Allows additional methods to be mocked that do not explicitly exist on mocked class"/>
      <param description="name of the method to be mocked" type="object" variable="$method">
        <type full="Mockery\String" namespace="Mockery" name="String"/>
      </param>
      <return type="object">
        <type full="Mockery\Mock" namespace="Mockery" name="Mock"/>
      </return>
    </docblock>
    <parameter name="method" byreference="false" type="{unknown}"/>
  </method>
  <method name="shouldIgnoreMissing" start="236" end="241" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Set mock to ignore unexpected methods and return Undefined class"/>
      <param description="the default return value for calls to missing functions on this mock" type="mixed" variable="$returnValue"/>
      <return type="object">
        <type full="Mockery\Mock" namespace="Mockery" name="Mock"/>
      </return>
    </docblock>
    <parameter name="returnValue" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="asUndefined" start="243" end="248" abstract="false" final="false" static="false" visibility="public"/>
  <method name="shouldAllowMockingProtectedMethods" start="253" end="257" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <return type="object">
        <type full="Mockery\Mock" namespace="Mockery" name="Mock"/>
      </return>
    </docblock>
  </method>
  <method name="shouldDeferMissing" start="268" end="272" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Set mock to defer unexpected methods to it's parent">This is particularly useless for this class, as it doesn't have a parent,
but included for completeness</description>
      <return type="object">
        <type full="Mockery\Mock" namespace="Mockery" name="Mock"/>
      </return>
    </docblock>
  </method>
  <method name="makePartial" start="279" end="282" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Create an obviously worded alias to shouldDeferMissing()"/>
      <return type="object">
        <type full="Mockery\Mock" namespace="Mockery" name="Mock"/>
      </return>
    </docblock>
  </method>
  <method name="shouldExpect" start="293" end="300" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Accepts a closure which is executed with an object recorder which proxies to the partial source object. The intent being to record the interactions of a concrete object as a set of expectations on the current mock object. The partial may then be passed to a second process to see if it fulfils the same (or exact same) contract as the original."/>
      <param type="object" variable="$closure">
        <type full="Mockery\Closure" namespace="Mockery" name="Closure"/>
      </param>
    </docblock>
    <parameter name="closure" byreference="false" type="object">
      <type full="Closure" namespace="" name="Closure"/>
    </parameter>
  </method>
  <method name="byDefault" start="309" end="318" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="In the event shouldReceive() accepting one or more methods/returns, this method will switch them from normal expectations to default expectations"/>
      <return resolution="self" type="object">
        <type full="Mockery\Mock" namespace="Mockery" name="Mock"/>
      </return>
    </docblock>
  </method>
  <method name="__call" start="323" end="326" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Capture calls to this mock"/>
    </docblock>
    <parameter name="method" byreference="false" type="{unknown}"/>
    <parameter name="args" byreference="false" type="array"/>
  </method>
  <method name="__callStatic" start="328" end="331" abstract="false" final="false" static="true" visibility="public">
    <parameter name="method" byreference="false" type="{unknown}"/>
    <parameter name="args" byreference="false" type="array"/>
  </method>
  <method name="__toString" start="336" end="339" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Forward calls to this magic method to the __call method"/>
    </docblock>
  </method>
  <method name="mockery_verify" start="365" end="378" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Iterate across all expectation directors and validate each"/>
      <throws type="object">
        <type full="\Mockery\CountValidator\Exception" namespace="\Mockery\CountValidator" name="Exception"/>
      </throws>
      <return type="object">
        <type full="Mockery\void" namespace="Mockery" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="mockery_teardown" start="385" end="387" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Tear down tasks for this mock"/>
      <return type="object">
        <type full="Mockery\void" namespace="Mockery" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="mockery_allocateOrder" start="394" end="398" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Fetch the next available allocation order number"/>
      <return type="int"/>
    </docblock>
  </method>
  <method name="mockery_setGroup" start="406" end="409" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Set ordering for a group"/>
      <param type="mixed" variable="$group"/>
      <param type="int" variable="$order"/>
    </docblock>
    <parameter name="group" byreference="false" type="{unknown}"/>
    <parameter name="order" byreference="false" type="{unknown}"/>
  </method>
  <method name="mockery_getGroups" start="416" end="419" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Fetch array of ordered groups"/>
      <return type="array"/>
    </docblock>
  </method>
  <method name="mockery_setCurrentOrder" start="426" end="430" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Set current ordered number"/>
      <param type="int" variable="$order"/>
    </docblock>
    <parameter name="order" byreference="false" type="{unknown}"/>
  </method>
  <method name="mockery_getCurrentOrder" start="437" end="440" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get current ordered number"/>
      <return type="int"/>
    </docblock>
  </method>
  <method name="mockery_validateOrder" start="450" end="465" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Validate the current mock's ordering"/>
      <param type="string" variable="$method"/>
      <param type="int" variable="$order"/>
      <throws type="object">
        <type full="\Mockery\Exception" namespace="\Mockery" name="Exception"/>
      </throws>
      <return type="object">
        <type full="Mockery\void" namespace="Mockery" name="void"/>
      </return>
    </docblock>
    <parameter name="method" byreference="false" type="{unknown}"/>
    <parameter name="order" byreference="false" type="{unknown}"/>
  </method>
  <method name="mockery_getExpectationCount" start="472" end="479" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Gets the count of expectations for this mock"/>
      <return type="int"/>
    </docblock>
  </method>
  <method name="mockery_setExpectationsFor" start="487" end="490" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Return the expectations director for the given method"/>
      <var description="$method" type="string"/>
      <return type="object">
        <type full="\Mockery\ExpectationDirector|null" namespace="\Mockery" name="ExpectationDirector|null"/>
      </return>
    </docblock>
    <parameter name="method" byreference="false" type="{unknown}"/>
    <parameter name="director" byreference="false" type="object">
      <type full="Mockery\ExpectationDirector" namespace="Mockery" name="ExpectationDirector"/>
    </parameter>
  </method>
  <method name="mockery_getExpectationsFor" start="498" end="503" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Return the expectations director for the given method"/>
      <var description="$method" type="string"/>
      <return type="object">
        <type full="\Mockery\ExpectationDirector|null" namespace="\Mockery" name="ExpectationDirector|null"/>
      </return>
    </docblock>
    <parameter name="method" byreference="false" type="{unknown}"/>
  </method>
  <method name="mockery_findExpectation" start="512" end="520" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Find an expectation matching the given method and arguments"/>
      <var description="$method" type="string"/>
      <var description="$args" type="array"/>
      <return type="object">
        <type full="\Mockery\Expectation|null" namespace="\Mockery" name="Expectation|null"/>
      </return>
    </docblock>
    <parameter name="method" byreference="false" type="{unknown}"/>
    <parameter name="args" byreference="false" type="array"/>
  </method>
  <method name="mockery_getContainer" start="527" end="530" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Return the container for this mock"/>
      <return type="object">
        <type full="\Mockery\Container" namespace="\Mockery" name="Container"/>
      </return>
    </docblock>
  </method>
  <method name="mockery_getName" start="537" end="540" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Return the name for this mock"/>
      <return type="string"/>
    </docblock>
  </method>
  <method name="mockery_getMockableProperties" start="545" end="548" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <return type="array"/>
    </docblock>
  </method>
  <method name="__isset" start="550" end="555" abstract="false" final="false" static="false" visibility="public">
    <parameter name="name" byreference="false" type="{unknown}"/>
  </method>
  <method name="mockery_getExpectations" start="557" end="560" abstract="false" final="false" static="false" visibility="public"/>
  <method name="mockery_callSubjectMethod" start="571" end="574" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Calls a parent class method and returns the result. Used in a passthru expectation where a real return value is required while still taking advantage of expectation matching and call count verification."/>
      <param type="string" variable="$name"/>
      <param type="array" variable="$args"/>
      <return type="mixed"/>
    </docblock>
    <parameter name="name" byreference="false" type="{unknown}"/>
    <parameter name="args" byreference="false" type="array"/>
  </method>
  <method name="mockery_getMockableMethods" start="579" end="582" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <return type="array" of="object">
        <type full="Mockery\string" namespace="Mockery" name="string"/>
      </return>
    </docblock>
  </method>
  <method name="mockery_isAnonymous" start="587" end="591" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <return type="object">
        <type full="Mockery\bool" namespace="Mockery" name="bool"/>
      </return>
    </docblock>
  </method>
  <method name="__wakeup" start="593" end="601" abstract="false" final="false" static="false" visibility="public"/>
  <method name="mockery_getMethod" start="603" end="612" abstract="false" final="false" static="false" visibility="public">
    <parameter name="name" byreference="false" type="{unknown}"/>
  </method>
  <method name="shouldHaveReceived" start="614" end="624" abstract="false" final="false" static="false" visibility="public">
    <parameter name="method" byreference="false" type="{unknown}"/>
    <parameter name="args" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="shouldNotHaveReceived" start="626" end="636" abstract="false" final="false" static="false" visibility="public">
    <parameter name="method" byreference="false" type="{unknown}"/>
    <parameter name="args" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="_mockery_handleStaticMethodCall" start="638" end="649" abstract="false" final="false" static="true" visibility="protected">
    <parameter name="method" byreference="false" type="{unknown}"/>
    <parameter name="args" byreference="false" type="array"/>
  </method>
  <method name="_mockery_getReceivedMethodCalls" start="651" end="654" abstract="false" final="false" static="false" visibility="protected"/>
  <method name="_mockery_handleMethodCall" start="656" end="712" abstract="false" final="false" static="false" visibility="protected">
    <parameter name="method" byreference="false" type="{unknown}"/>
    <parameter name="args" byreference="false" type="array"/>
  </method>
  <method name="mockery_getMethods" start="714" end="742" abstract="false" final="false" static="false" visibility="protected"/>
  <method name="getNonPublicMethods" start="747" end="757" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description/>
      <return type="array"/>
    </docblock>
  </method>
</class>
