<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="Mockery" namespace="" name="Mockery" abstract="false" final="false" start="37" end="739">
  <file path="/home/robert/Desktop/Hogeschool/2ejaars Development/DevBOpdrachten/project56/http/laravel/vendor/mockery/mockery/library" file="Mockery.php" realpath="/home/robert/Desktop/Hogeschool/2ejaars Development/DevBOpdrachten/project56/http/laravel/vendor/mockery/mockery/library/Mockery.php" size="19440" time="2015-12-17T18:44:09+00:00" unixtime="1450377849" sha1="69bb220a437e10b4ab019412ef21292789fe6f70" relative="vendor/mockery/mockery/library/Mockery.php"/>
  <constant type="string" name="BLOCKS" value="'Mockery_Forward_Blocks'"/>
  <member name="_container" type="{unknown}" default="" constant="null" visibility="protected" line="46">
    <docblock>
      <description compact="Global container to hold all mocks for the current unit test running."/>
      <var type="object">
        <type full="\Mockery\Container" namespace="\Mockery" name="Container"/>
      </var>
    </docblock>
  </member>
  <member name="_config" type="{unknown}" default="" constant="null" visibility="protected" line="53">
    <docblock>
      <description compact="Global configuration handler containing configuration options."/>
      <var type="object">
        <type full="\Mockery\Configuration" namespace="\Mockery" name="Configuration"/>
      </var>
    </docblock>
  </member>
  <member name="_generator" visibility="protected" line="58">
    <docblock>
      <description/>
      <var type="object">
        <type full="\Mockery\Generator\Generator" namespace="\Mockery\Generator" name="Generator"/>
      </var>
    </docblock>
  </member>
  <member name="_loader" visibility="protected" line="63">
    <docblock>
      <description/>
      <var type="object">
        <type full="\Mockery\Loader\Loader" namespace="\Mockery\Loader" name="Loader"/>
      </var>
    </docblock>
  </member>
  <method name="mock" start="70" end="75" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Static shortcut to \Mockery\Container::mock()."/>
      <return type="object">
        <type full="\Mockery\MockInterface" namespace="\Mockery" name="MockInterface"/>
      </return>
    </docblock>
  </method>
  <method name="spy" start="80" end="84" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description/>
      <return type="object">
        <type full="\Mockery\MockInterface" namespace="\Mockery" name="MockInterface"/>
      </return>
    </docblock>
  </method>
  <method name="instanceMock" start="89" end="94" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description/>
      <return type="object">
        <type full="\Mockery\MockInterface" namespace="\Mockery" name="MockInterface"/>
      </return>
    </docblock>
  </method>
  <method name="namedMock" start="101" end="112" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Static shortcut to \Mockery\Container::mock(), first argument names the mock."/>
      <return type="object">
        <type full="\Mockery\MockInterface" namespace="\Mockery" name="MockInterface"/>
      </return>
    </docblock>
  </method>
  <method name="self" start="121" end="128" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Static shortcut to \Mockery\Container::self()."/>
      <throws type="object">
        <type full="LogicException" namespace="" name="LogicException"/>
      </throws>
      <return type="object">
        <type full="\Mockery\MockInterface" namespace="\Mockery" name="MockInterface"/>
      </return>
    </docblock>
  </method>
  <method name="close" start="136" end="145" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Static shortcut to closing up and verifying all mocks in the global container, and resetting the container static variable to null."/>
      <return type="object">
        <type full="void" namespace="" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="fetchMock" start="154" end="157" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Static fetching of a mock associated with a name or explicit class poser."/>
      <param variable="$name"/>
      <return type="object">
        <type full="\Mockery\Mock" namespace="\Mockery" name="Mock"/>
      </return>
    </docblock>
    <parameter name="name" byreference="false" type="{unknown}"/>
  </method>
  <method name="getContainer" start="162" end="169" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Get the container."/>
    </docblock>
  </method>
  <method name="setGenerator" start="174" end="177" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description/>
      <param type="object" variable="$generator">
        <type full="\Mockery\Generator\Generator" namespace="\Mockery\Generator" name="Generator"/>
      </param>
    </docblock>
    <parameter name="generator" byreference="false" type="object">
      <type full="Mockery\Generator\Generator" namespace="Mockery\Generator" name="Generator"/>
    </parameter>
  </method>
  <method name="getGenerator" start="179" end="186" abstract="false" final="false" static="true" visibility="public"/>
  <method name="getDefaultGenerator" start="188" end="202" abstract="false" final="false" static="true" visibility="public"/>
  <method name="setLoader" start="207" end="210" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description/>
      <param type="object" variable="$loader">
        <type full="Mockery\Loader\Loader" namespace="Mockery\Loader" name="Loader"/>
      </param>
    </docblock>
    <parameter name="loader" byreference="false" type="object">
      <type full="Mockery\Loader\Loader" namespace="Mockery\Loader" name="Loader"/>
    </parameter>
  </method>
  <method name="getLoader" start="215" end="222" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description/>
      <return type="object">
        <type full="Mockery\Loader\Loader" namespace="Mockery\Loader" name="Loader"/>
      </return>
    </docblock>
  </method>
  <method name="getDefaultLoader" start="227" end="230" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description/>
      <return type="object">
        <type full="Mockery\Loader\EvalLoader" namespace="Mockery\Loader" name="EvalLoader"/>
      </return>
    </docblock>
  </method>
  <method name="setContainer" start="239" end="242" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Set the container."/>
      <param type="object" variable="$container">
        <type full="\Mockery\Container" namespace="\Mockery" name="Container"/>
      </param>
      <return type="object">
        <type full="\Mockery\Container" namespace="\Mockery" name="Container"/>
      </return>
    </docblock>
    <parameter name="container" byreference="false" type="object">
      <type full="Mockery\Container" namespace="Mockery" name="Container"/>
    </parameter>
  </method>
  <method name="resetContainer" start="247" end="250" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Reset the container to null."/>
    </docblock>
  </method>
  <method name="any" start="257" end="260" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Return instance of ANY matcher."/>
      <return type="object">
        <type full="\Mockery\Matcher\Any" namespace="\Mockery\Matcher" name="Any"/>
      </return>
    </docblock>
  </method>
  <method name="type" start="269" end="272" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Return instance of TYPE matcher."/>
      <param variable="$expected"/>
      <return type="object">
        <type full="\Mockery\Matcher\Type" namespace="\Mockery\Matcher" name="Type"/>
      </return>
    </docblock>
    <parameter name="expected" byreference="false" type="{unknown}"/>
  </method>
  <method name="ducktype" start="279" end="282" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Return instance of DUCKTYPE matcher."/>
      <return type="object">
        <type full="\Mockery\Matcher\Ducktype" namespace="\Mockery\Matcher" name="Ducktype"/>
      </return>
    </docblock>
  </method>
  <method name="subset" start="291" end="294" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Return instance of SUBSET matcher."/>
      <param type="array" variable="$part"/>
      <return type="object">
        <type full="\Mockery\Matcher\Subset" namespace="\Mockery\Matcher" name="Subset"/>
      </return>
    </docblock>
    <parameter name="part" byreference="false" type="array"/>
  </method>
  <method name="contains" start="301" end="304" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Return instance of CONTAINS matcher."/>
      <return type="object">
        <type full="\Mockery\Matcher\Contains" namespace="\Mockery\Matcher" name="Contains"/>
      </return>
    </docblock>
  </method>
  <method name="hasKey" start="313" end="316" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Return instance of HASKEY matcher."/>
      <param variable="$key"/>
      <return type="object">
        <type full="\Mockery\Matcher\HasKey" namespace="\Mockery\Matcher" name="HasKey"/>
      </return>
    </docblock>
    <parameter name="key" byreference="false" type="{unknown}"/>
  </method>
  <method name="hasValue" start="325" end="328" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Return instance of HASVALUE matcher."/>
      <param variable="$val"/>
      <return type="object">
        <type full="\Mockery\Matcher\HasValue" namespace="\Mockery\Matcher" name="HasValue"/>
      </return>
    </docblock>
    <parameter name="val" byreference="false" type="{unknown}"/>
  </method>
  <method name="on" start="337" end="340" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Return instance of CLOSURE matcher."/>
      <param variable="$closure"/>
      <return type="object">
        <type full="\Mockery\Matcher\Closure" namespace="\Mockery\Matcher" name="Closure"/>
      </return>
    </docblock>
    <parameter name="closure" byreference="false" type="{unknown}"/>
  </method>
  <method name="mustBe" start="349" end="352" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Return instance of MUSTBE matcher."/>
      <param variable="$expected"/>
      <return type="object">
        <type full="\Mockery\Matcher\MustBe" namespace="\Mockery\Matcher" name="MustBe"/>
      </return>
    </docblock>
    <parameter name="expected" byreference="false" type="{unknown}"/>
  </method>
  <method name="not" start="361" end="364" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Return instance of NOT matcher."/>
      <param variable="$expected"/>
      <return type="object">
        <type full="\Mockery\Matcher\Not" namespace="\Mockery\Matcher" name="Not"/>
      </return>
    </docblock>
    <parameter name="expected" byreference="false" type="{unknown}"/>
  </method>
  <method name="anyOf" start="371" end="374" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Return instance of ANYOF matcher."/>
      <return type="object">
        <type full="\Mockery\Matcher\AnyOf" namespace="\Mockery\Matcher" name="AnyOf"/>
      </return>
    </docblock>
  </method>
  <method name="notAnyOf" start="381" end="384" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Return instance of NOTANYOF matcher."/>
      <return type="object">
        <type full="\Mockery\Matcher\NotAnyOf" namespace="\Mockery\Matcher" name="NotAnyOf"/>
      </return>
    </docblock>
  </method>
  <method name="getConfiguration" start="389" end="396" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Get the global configuration container."/>
    </docblock>
  </method>
  <method name="formatArgs" start="406" end="418" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Utility method to format method name and arguments into a string."/>
      <param type="string" variable="$method"/>
      <param type="array" variable="$arguments"/>
      <return type="string"/>
    </docblock>
    <parameter name="method" byreference="false" type="{unknown}"/>
    <parameter name="arguments" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="formatArgument" start="420" end="459" abstract="false" final="false" static="true" visibility="private">
    <parameter name="argument" byreference="false" type="{unknown}"/>
    <parameter name="depth" byreference="false" type="integer" default="0"/>
  </method>
  <method name="formatObjects" start="468" end="495" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Utility function to format objects to printable arrays."/>
      <param type="array" variable="$objects"/>
      <return type="string"/>
    </docblock>
    <parameter name="objects" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="objectToArray" start="505" end="516" abstract="false" final="false" static="true" visibility="private">
    <docblock>
      <description compact="Utility function to turn public properties and public get* and is* method values into an array."/>
      <param variable="$object"/>
      <param type="int" variable="$nesting"/>
      <return type="array"/>
    </docblock>
    <parameter name="object" byreference="false" type="{unknown}"/>
    <parameter name="nesting" byreference="false" type="integer" default="3"/>
  </method>
  <method name="extractInstancePublicProperties" start="526" end="540" abstract="false" final="false" static="true" visibility="private">
    <docblock>
      <description compact="Returns all public instance properties."/>
      <param variable="$object"/>
      <param variable="$nesting"/>
      <return type="array"/>
    </docblock>
    <parameter name="object" byreference="false" type="{unknown}"/>
    <parameter name="nesting" byreference="false" type="{unknown}"/>
  </method>
  <method name="extractGetters" start="550" end="574" abstract="false" final="false" static="true" visibility="private">
    <docblock>
      <description compact="Returns all object getters."/>
      <param variable="$object"/>
      <param variable="$nesting"/>
      <return type="array"/>
    </docblock>
    <parameter name="object" byreference="false" type="{unknown}"/>
    <parameter name="nesting" byreference="false" type="{unknown}"/>
  </method>
  <method name="cleanupNesting" start="576" end="590" abstract="false" final="false" static="true" visibility="private">
    <parameter name="argument" byreference="false" type="{unknown}"/>
    <parameter name="nesting" byreference="false" type="{unknown}"/>
  </method>
  <method name="cleanupArray" start="592" end="607" abstract="false" final="false" static="true" visibility="private">
    <parameter name="argument" byreference="false" type="{unknown}"/>
    <parameter name="nesting" byreference="false" type="integer" default="3"/>
  </method>
  <method name="parseShouldReturnArgs" start="618" end="635" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Utility function to parse shouldReceive() arguments and generate expectations from such as needed."/>
      <param type="object" variable="$mock">
        <type full="Mockery\MockInterface" namespace="Mockery" name="MockInterface"/>
      </param>
      <param type="array" variable="$args"/>
      <param type="object" variable="$add">
        <type full="callable" namespace="" name="callable"/>
      </param>
      <return type="object">
        <type full="\Mockery\CompositeExpectation" namespace="\Mockery" name="CompositeExpectation"/>
      </return>
    </docblock>
    <parameter name="mock" byreference="false" type="object">
      <type full="Mockery\MockInterface" namespace="Mockery" name="MockInterface"/>
    </parameter>
    <parameter name="args" byreference="false" type="{unknown}"/>
    <parameter name="add" byreference="false" type="{unknown}"/>
  </method>
  <method name="buildDemeterChain" start="647" end="697" abstract="false" final="false" static="true" visibility="protected">
    <docblock>
      <description compact="Sets up expectations on the members of the CompositeExpectation and builds up any demeter chain that was passed to shouldReceive."/>
      <param type="object" variable="$mock">
        <type full="\Mockery\MockInterface" namespace="\Mockery" name="MockInterface"/>
      </param>
      <param type="string" variable="$arg"/>
      <param type="object" variable="$add">
        <type full="callable" namespace="" name="callable"/>
      </param>
      <throws type="object">
        <type full="Mockery\Exception" namespace="Mockery" name="Exception"/>
      </throws>
      <return type="object">
        <type full="\Mockery\ExpectationDirector" namespace="\Mockery" name="ExpectationDirector"/>
      </return>
    </docblock>
    <parameter name="mock" byreference="false" type="object">
      <type full="Mockery\MockInterface" namespace="Mockery" name="MockInterface"/>
    </parameter>
    <parameter name="arg" byreference="false" type="{unknown}"/>
    <parameter name="add" byreference="false" type="{unknown}"/>
  </method>
  <method name="getNewDemeterMock" start="706" end="714" abstract="false" final="false" static="true" visibility="private">
    <docblock>
      <description/>
      <param type="object" variable="$container">
        <type full="\Mockery\Container" namespace="\Mockery" name="Container"/>
      </param>
      <param type="string" variable="$method"/>
      <param type="object" variable="$exp">
        <type full="Mockery\ExpectationInterface" namespace="Mockery" name="ExpectationInterface"/>
      </param>
      <return type="object">
        <type full="\Mockery\Mock" namespace="\Mockery" name="Mock"/>
      </return>
    </docblock>
    <parameter name="container" byreference="false" type="object">
      <type full="Mockery\Container" namespace="Mockery" name="Container"/>
    </parameter>
    <parameter name="method" byreference="false" type="{unknown}"/>
    <parameter name="exp" byreference="false" type="object">
      <type full="Mockery\ExpectationInterface" namespace="Mockery" name="ExpectationInterface"/>
    </parameter>
  </method>
  <method name="getExistingDemeterMock" start="722" end="728" abstract="false" final="false" static="true" visibility="private">
    <docblock>
      <description/>
      <param type="object" variable="$container">
        <type full="\Mockery\Container" namespace="\Mockery" name="Container"/>
      </param>
      <param type="string" variable="$demeterMockKey"/>
      <return type="mixed"/>
    </docblock>
    <parameter name="container" byreference="false" type="object">
      <type full="Mockery\Container" namespace="Mockery" name="Container"/>
    </parameter>
    <parameter name="demeterMockKey" byreference="false" type="{unknown}"/>
  </method>
  <method name="noMoreElementsInChain" start="735" end="738" abstract="false" final="false" static="true" visibility="private">
    <docblock>
      <description/>
      <param type="array" variable="$methodNames"/>
      <return type="object">
        <type full="bool" namespace="" name="bool"/>
      </return>
    </docblock>
    <parameter name="methodNames" byreference="false" type="array"/>
  </method>
</class>
