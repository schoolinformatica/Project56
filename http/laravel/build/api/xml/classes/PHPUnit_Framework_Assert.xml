<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="PHPUnit_Framework_Assert" namespace="" name="PHPUnit_Framework_Assert" abstract="true" final="false" start="16" end="3165">
  <file path="/home/robert/Desktop/Hogeschool/2ejaars Development/DevBOpdrachten/project56/http/laravel/vendor/phpunit/phpunit/src/Framework" file="Assert.php" realpath="/home/robert/Desktop/Hogeschool/2ejaars Development/DevBOpdrachten/project56/http/laravel/vendor/phpunit/phpunit/src/Framework/Assert.php" size="97751" time="2015-12-17T18:44:10+00:00" unixtime="1450377850" sha1="f63e42f272718cfc9effed92376e1070257c04de" relative="vendor/phpunit/phpunit/src/Framework/Assert.php"/>
  <docblock>
    <description compact="A set of assert methods."/>
    <since value="Class available since Release 2.0.0"/>
  </docblock>
  <member name="count" type="integer" default="0" visibility="private" line="21">
    <docblock>
      <description/>
      <var type="int"/>
    </docblock>
  </member>
  <method name="assertArrayHasKey" start="32" end="51" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Asserts that an array has a specified key."/>
      <param type="mixed" variable="$key"/>
      <param type="object" variable="$array">
        <type full="array|ArrayAccess" namespace="" name="array|ArrayAccess"/>
      </param>
      <param type="string" variable="$message"/>
      <since value="Method available since Release 3.0.0"/>
    </docblock>
    <parameter name="key" byreference="false" type="{unknown}"/>
    <parameter name="array" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="string" default="''"/>
  </method>
  <method name="assertArraySubset" start="63" end="82" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Asserts that an array has a specified subset."/>
      <param type="object" variable="$subset">
        <type full="array|ArrayAccess" namespace="" name="array|ArrayAccess"/>
      </param>
      <param type="object" variable="$array">
        <type full="array|ArrayAccess" namespace="" name="array|ArrayAccess"/>
      </param>
      <param description="Check for object identity" type="object" variable="$strict">
        <type full="bool" namespace="" name="bool"/>
      </param>
      <param type="string" variable="$message"/>
      <since value="Method available since Release 4.4.0"/>
    </docblock>
    <parameter name="subset" byreference="false" type="{unknown}"/>
    <parameter name="array" byreference="false" type="{unknown}"/>
    <parameter name="strict" byreference="false" type="boolean" default="false"/>
    <parameter name="message" byreference="false" type="string" default="''"/>
  </method>
  <method name="assertArrayNotHasKey" start="93" end="114" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Asserts that an array does not have a specified key."/>
      <param type="mixed" variable="$key"/>
      <param type="object" variable="$array">
        <type full="array|ArrayAccess" namespace="" name="array|ArrayAccess"/>
      </param>
      <param type="string" variable="$message"/>
      <since value="Method available since Release 3.0.0"/>
    </docblock>
    <parameter name="key" byreference="false" type="{unknown}"/>
    <parameter name="array" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="string" default="''"/>
  </method>
  <method name="assertContains" start="128" end="157" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Asserts that a haystack contains a needle."/>
      <param type="mixed" variable="$needle"/>
      <param type="mixed" variable="$haystack"/>
      <param type="string" variable="$message"/>
      <param type="object" variable="$ignoreCase">
        <type full="bool" namespace="" name="bool"/>
      </param>
      <param type="object" variable="$checkForObjectIdentity">
        <type full="bool" namespace="" name="bool"/>
      </param>
      <param type="object" variable="$checkForNonObjectIdentity">
        <type full="bool" namespace="" name="bool"/>
      </param>
      <since value="Method available since Release 2.1.0"/>
    </docblock>
    <parameter name="needle" byreference="false" type="{unknown}"/>
    <parameter name="haystack" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="string" default="''"/>
    <parameter name="ignoreCase" byreference="false" type="boolean" default="false"/>
    <parameter name="checkForObjectIdentity" byreference="false" type="boolean" default="true"/>
    <parameter name="checkForNonObjectIdentity" byreference="false" type="boolean" default="false"/>
  </method>
  <method name="assertAttributeContains" start="173" end="183" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Asserts that a haystack that is stored in a static attribute of a class or an attribute of an object contains a needle."/>
      <param type="mixed" variable="$needle"/>
      <param type="string" variable="$haystackAttributeName"/>
      <param type="mixed" variable="$haystackClassOrObject"/>
      <param type="string" variable="$message"/>
      <param type="object" variable="$ignoreCase">
        <type full="bool" namespace="" name="bool"/>
      </param>
      <param type="object" variable="$checkForObjectIdentity">
        <type full="bool" namespace="" name="bool"/>
      </param>
      <param type="object" variable="$checkForNonObjectIdentity">
        <type full="bool" namespace="" name="bool"/>
      </param>
      <since value="Method available since Release 3.0.0"/>
    </docblock>
    <parameter name="needle" byreference="false" type="{unknown}"/>
    <parameter name="haystackAttributeName" byreference="false" type="{unknown}"/>
    <parameter name="haystackClassOrObject" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="string" default="''"/>
    <parameter name="ignoreCase" byreference="false" type="boolean" default="false"/>
    <parameter name="checkForObjectIdentity" byreference="false" type="boolean" default="true"/>
    <parameter name="checkForNonObjectIdentity" byreference="false" type="boolean" default="false"/>
  </method>
  <method name="assertNotContains" start="197" end="230" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Asserts that a haystack does not contain a needle."/>
      <param type="mixed" variable="$needle"/>
      <param type="mixed" variable="$haystack"/>
      <param type="string" variable="$message"/>
      <param type="object" variable="$ignoreCase">
        <type full="bool" namespace="" name="bool"/>
      </param>
      <param type="object" variable="$checkForObjectIdentity">
        <type full="bool" namespace="" name="bool"/>
      </param>
      <param type="object" variable="$checkForNonObjectIdentity">
        <type full="bool" namespace="" name="bool"/>
      </param>
      <since value="Method available since Release 2.1.0"/>
    </docblock>
    <parameter name="needle" byreference="false" type="{unknown}"/>
    <parameter name="haystack" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="string" default="''"/>
    <parameter name="ignoreCase" byreference="false" type="boolean" default="false"/>
    <parameter name="checkForObjectIdentity" byreference="false" type="boolean" default="true"/>
    <parameter name="checkForNonObjectIdentity" byreference="false" type="boolean" default="false"/>
  </method>
  <method name="assertAttributeNotContains" start="246" end="256" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Asserts that a haystack that is stored in a static attribute of a class or an attribute of an object does not contain a needle."/>
      <param type="mixed" variable="$needle"/>
      <param type="string" variable="$haystackAttributeName"/>
      <param type="mixed" variable="$haystackClassOrObject"/>
      <param type="string" variable="$message"/>
      <param type="object" variable="$ignoreCase">
        <type full="bool" namespace="" name="bool"/>
      </param>
      <param type="object" variable="$checkForObjectIdentity">
        <type full="bool" namespace="" name="bool"/>
      </param>
      <param type="object" variable="$checkForNonObjectIdentity">
        <type full="bool" namespace="" name="bool"/>
      </param>
      <since value="Method available since Release 3.0.0"/>
    </docblock>
    <parameter name="needle" byreference="false" type="{unknown}"/>
    <parameter name="haystackAttributeName" byreference="false" type="{unknown}"/>
    <parameter name="haystackClassOrObject" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="string" default="''"/>
    <parameter name="ignoreCase" byreference="false" type="boolean" default="false"/>
    <parameter name="checkForObjectIdentity" byreference="false" type="boolean" default="true"/>
    <parameter name="checkForNonObjectIdentity" byreference="false" type="boolean" default="false"/>
  </method>
  <method name="assertContainsOnly" start="268" end="290" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Asserts that a haystack contains only values of a given type."/>
      <param type="string" variable="$type"/>
      <param type="mixed" variable="$haystack"/>
      <param type="object" variable="$isNativeType">
        <type full="bool" namespace="" name="bool"/>
      </param>
      <param type="string" variable="$message"/>
      <since value="Method available since Release 3.1.4"/>
    </docblock>
    <parameter name="type" byreference="false" type="{unknown}"/>
    <parameter name="haystack" byreference="false" type="{unknown}"/>
    <parameter name="isNativeType" byreference="false" type="{unknown}" default="" constant="null"/>
    <parameter name="message" byreference="false" type="string" default="''"/>
  </method>
  <method name="assertContainsOnlyInstancesOf" start="299" end="317" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Asserts that a haystack contains only instances of a given classname"/>
      <param type="string" variable="$classname"/>
      <param type="object" variable="$haystack">
        <type full="array|Traversable" namespace="" name="array|Traversable"/>
      </param>
      <param type="string" variable="$message"/>
    </docblock>
    <parameter name="classname" byreference="false" type="{unknown}"/>
    <parameter name="haystack" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="string" default="''"/>
  </method>
  <method name="assertAttributeContainsOnly" start="331" end="339" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Asserts that a haystack that is stored in a static attribute of a class or an attribute of an object contains only values of a given type."/>
      <param type="string" variable="$type"/>
      <param type="string" variable="$haystackAttributeName"/>
      <param type="mixed" variable="$haystackClassOrObject"/>
      <param type="object" variable="$isNativeType">
        <type full="bool" namespace="" name="bool"/>
      </param>
      <param type="string" variable="$message"/>
      <since value="Method available since Release 3.1.4"/>
    </docblock>
    <parameter name="type" byreference="false" type="{unknown}"/>
    <parameter name="haystackAttributeName" byreference="false" type="{unknown}"/>
    <parameter name="haystackClassOrObject" byreference="false" type="{unknown}"/>
    <parameter name="isNativeType" byreference="false" type="{unknown}" default="" constant="null"/>
    <parameter name="message" byreference="false" type="string" default="''"/>
  </method>
  <method name="assertNotContainsOnly" start="351" end="375" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Asserts that a haystack does not contain only values of a given type."/>
      <param type="string" variable="$type"/>
      <param type="mixed" variable="$haystack"/>
      <param type="object" variable="$isNativeType">
        <type full="bool" namespace="" name="bool"/>
      </param>
      <param type="string" variable="$message"/>
      <since value="Method available since Release 3.1.4"/>
    </docblock>
    <parameter name="type" byreference="false" type="{unknown}"/>
    <parameter name="haystack" byreference="false" type="{unknown}"/>
    <parameter name="isNativeType" byreference="false" type="{unknown}" default="" constant="null"/>
    <parameter name="message" byreference="false" type="string" default="''"/>
  </method>
  <method name="assertAttributeNotContainsOnly" start="390" end="398" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Asserts that a haystack that is stored in a static attribute of a class or an attribute of an object does not contain only values of a given type."/>
      <param type="string" variable="$type"/>
      <param type="string" variable="$haystackAttributeName"/>
      <param type="mixed" variable="$haystackClassOrObject"/>
      <param type="object" variable="$isNativeType">
        <type full="bool" namespace="" name="bool"/>
      </param>
      <param type="string" variable="$message"/>
      <since value="Method available since Release 3.1.4"/>
    </docblock>
    <parameter name="type" byreference="false" type="{unknown}"/>
    <parameter name="haystackAttributeName" byreference="false" type="{unknown}"/>
    <parameter name="haystackClassOrObject" byreference="false" type="{unknown}"/>
    <parameter name="isNativeType" byreference="false" type="{unknown}" default="" constant="null"/>
    <parameter name="message" byreference="false" type="string" default="''"/>
  </method>
  <method name="assertCount" start="407" end="424" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Asserts the number of elements of an array, Countable or Traversable."/>
      <param type="int" variable="$expectedCount"/>
      <param type="mixed" variable="$haystack"/>
      <param type="string" variable="$message"/>
    </docblock>
    <parameter name="expectedCount" byreference="false" type="{unknown}"/>
    <parameter name="haystack" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="string" default="''"/>
  </method>
  <method name="assertAttributeCount" start="437" end="444" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Asserts the number of elements of an array, Countable or Traversable that is stored in an attribute."/>
      <param type="int" variable="$expectedCount"/>
      <param type="string" variable="$haystackAttributeName"/>
      <param type="mixed" variable="$haystackClassOrObject"/>
      <param type="string" variable="$message"/>
      <since value="Method available since Release 3.6.0"/>
    </docblock>
    <parameter name="expectedCount" byreference="false" type="{unknown}"/>
    <parameter name="haystackAttributeName" byreference="false" type="{unknown}"/>
    <parameter name="haystackClassOrObject" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="string" default="''"/>
  </method>
  <method name="assertNotCount" start="453" end="470" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Asserts the number of elements of an array, Countable or Traversable."/>
      <param type="int" variable="$expectedCount"/>
      <param type="mixed" variable="$haystack"/>
      <param type="string" variable="$message"/>
    </docblock>
    <parameter name="expectedCount" byreference="false" type="{unknown}"/>
    <parameter name="haystack" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="string" default="''"/>
  </method>
  <method name="assertAttributeNotCount" start="483" end="490" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Asserts the number of elements of an array, Countable or Traversable that is stored in an attribute."/>
      <param type="int" variable="$expectedCount"/>
      <param type="string" variable="$haystackAttributeName"/>
      <param type="mixed" variable="$haystackClassOrObject"/>
      <param type="string" variable="$message"/>
      <since value="Method available since Release 3.6.0"/>
    </docblock>
    <parameter name="expectedCount" byreference="false" type="{unknown}"/>
    <parameter name="haystackAttributeName" byreference="false" type="{unknown}"/>
    <parameter name="haystackClassOrObject" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="string" default="''"/>
  </method>
  <method name="assertEquals" start="503" end="514" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Asserts that two variables are equal."/>
      <param type="mixed" variable="$expected"/>
      <param type="mixed" variable="$actual"/>
      <param type="string" variable="$message"/>
      <param type="float" variable="$delta"/>
      <param type="int" variable="$maxDepth"/>
      <param type="object" variable="$canonicalize">
        <type full="bool" namespace="" name="bool"/>
      </param>
      <param type="object" variable="$ignoreCase">
        <type full="bool" namespace="" name="bool"/>
      </param>
    </docblock>
    <parameter name="expected" byreference="false" type="{unknown}"/>
    <parameter name="actual" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="string" default="''"/>
    <parameter name="delta" byreference="false" type="float" default="0.0"/>
    <parameter name="maxDepth" byreference="false" type="integer" default="10"/>
    <parameter name="canonicalize" byreference="false" type="boolean" default="false"/>
    <parameter name="ignoreCase" byreference="false" type="boolean" default="false"/>
  </method>
  <method name="assertAttributeEquals" start="528" end="539" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Asserts that a variable is equal to an attribute of an object."/>
      <param type="mixed" variable="$expected"/>
      <param type="string" variable="$actualAttributeName"/>
      <param type="string" variable="$actualClassOrObject"/>
      <param type="string" variable="$message"/>
      <param type="float" variable="$delta"/>
      <param type="int" variable="$maxDepth"/>
      <param type="object" variable="$canonicalize">
        <type full="bool" namespace="" name="bool"/>
      </param>
      <param type="object" variable="$ignoreCase">
        <type full="bool" namespace="" name="bool"/>
      </param>
    </docblock>
    <parameter name="expected" byreference="false" type="{unknown}"/>
    <parameter name="actualAttributeName" byreference="false" type="{unknown}"/>
    <parameter name="actualClassOrObject" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="string" default="''"/>
    <parameter name="delta" byreference="false" type="float" default="0.0"/>
    <parameter name="maxDepth" byreference="false" type="integer" default="10"/>
    <parameter name="canonicalize" byreference="false" type="boolean" default="false"/>
    <parameter name="ignoreCase" byreference="false" type="boolean" default="false"/>
  </method>
  <method name="assertNotEquals" start="554" end="567" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Asserts that two variables are not equal."/>
      <param type="mixed" variable="$expected"/>
      <param type="mixed" variable="$actual"/>
      <param type="string" variable="$message"/>
      <param type="float" variable="$delta"/>
      <param type="int" variable="$maxDepth"/>
      <param type="object" variable="$canonicalize">
        <type full="bool" namespace="" name="bool"/>
      </param>
      <param type="object" variable="$ignoreCase">
        <type full="bool" namespace="" name="bool"/>
      </param>
      <since value="Method available since Release 2.3.0"/>
    </docblock>
    <parameter name="expected" byreference="false" type="{unknown}"/>
    <parameter name="actual" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="string" default="''"/>
    <parameter name="delta" byreference="false" type="float" default="0.0"/>
    <parameter name="maxDepth" byreference="false" type="integer" default="10"/>
    <parameter name="canonicalize" byreference="false" type="boolean" default="false"/>
    <parameter name="ignoreCase" byreference="false" type="boolean" default="false"/>
  </method>
  <method name="assertAttributeNotEquals" start="581" end="592" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Asserts that a variable is not equal to an attribute of an object."/>
      <param type="mixed" variable="$expected"/>
      <param type="string" variable="$actualAttributeName"/>
      <param type="string" variable="$actualClassOrObject"/>
      <param type="string" variable="$message"/>
      <param type="float" variable="$delta"/>
      <param type="int" variable="$maxDepth"/>
      <param type="object" variable="$canonicalize">
        <type full="bool" namespace="" name="bool"/>
      </param>
      <param type="object" variable="$ignoreCase">
        <type full="bool" namespace="" name="bool"/>
      </param>
    </docblock>
    <parameter name="expected" byreference="false" type="{unknown}"/>
    <parameter name="actualAttributeName" byreference="false" type="{unknown}"/>
    <parameter name="actualClassOrObject" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="string" default="''"/>
    <parameter name="delta" byreference="false" type="float" default="0.0"/>
    <parameter name="maxDepth" byreference="false" type="integer" default="10"/>
    <parameter name="canonicalize" byreference="false" type="boolean" default="false"/>
    <parameter name="ignoreCase" byreference="false" type="boolean" default="false"/>
  </method>
  <method name="assertEmpty" start="602" end="605" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Asserts that a variable is empty."/>
      <param type="mixed" variable="$actual"/>
      <param type="string" variable="$message"/>
      <throws type="object">
        <type full="PHPUnit_Framework_AssertionFailedError" namespace="" name="PHPUnit_Framework_AssertionFailedError"/>
      </throws>
    </docblock>
    <parameter name="actual" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="string" default="''"/>
  </method>
  <method name="assertAttributeEmpty" start="617" end="623" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Asserts that a static attribute of a class or an attribute of an object is empty."/>
      <param type="string" variable="$haystackAttributeName"/>
      <param type="mixed" variable="$haystackClassOrObject"/>
      <param type="string" variable="$message"/>
      <since value="Method available since Release 3.5.0"/>
    </docblock>
    <parameter name="haystackAttributeName" byreference="false" type="{unknown}"/>
    <parameter name="haystackClassOrObject" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="string" default="''"/>
  </method>
  <method name="assertNotEmpty" start="633" end="636" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Asserts that a variable is not empty."/>
      <param type="mixed" variable="$actual"/>
      <param type="string" variable="$message"/>
      <throws type="object">
        <type full="PHPUnit_Framework_AssertionFailedError" namespace="" name="PHPUnit_Framework_AssertionFailedError"/>
      </throws>
    </docblock>
    <parameter name="actual" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="string" default="''"/>
  </method>
  <method name="assertAttributeNotEmpty" start="648" end="654" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Asserts that a static attribute of a class or an attribute of an object is not empty."/>
      <param type="string" variable="$haystackAttributeName"/>
      <param type="mixed" variable="$haystackClassOrObject"/>
      <param type="string" variable="$message"/>
      <since value="Method available since Release 3.5.0"/>
    </docblock>
    <parameter name="haystackAttributeName" byreference="false" type="{unknown}"/>
    <parameter name="haystackClassOrObject" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="string" default="''"/>
  </method>
  <method name="assertGreaterThan" start="665" end="668" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Asserts that a value is greater than another value."/>
      <param type="mixed" variable="$expected"/>
      <param type="mixed" variable="$actual"/>
      <param type="string" variable="$message"/>
      <since value="Method available since Release 3.1.0"/>
    </docblock>
    <parameter name="expected" byreference="false" type="{unknown}"/>
    <parameter name="actual" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="string" default="''"/>
  </method>
  <method name="assertAttributeGreaterThan" start="680" end="687" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Asserts that an attribute is greater than another value."/>
      <param type="mixed" variable="$expected"/>
      <param type="string" variable="$actualAttributeName"/>
      <param type="string" variable="$actualClassOrObject"/>
      <param type="string" variable="$message"/>
      <since value="Method available since Release 3.1.0"/>
    </docblock>
    <parameter name="expected" byreference="false" type="{unknown}"/>
    <parameter name="actualAttributeName" byreference="false" type="{unknown}"/>
    <parameter name="actualClassOrObject" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="string" default="''"/>
  </method>
  <method name="assertGreaterThanOrEqual" start="698" end="705" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Asserts that a value is greater than or equal to another value."/>
      <param type="mixed" variable="$expected"/>
      <param type="mixed" variable="$actual"/>
      <param type="string" variable="$message"/>
      <since value="Method available since Release 3.1.0"/>
    </docblock>
    <parameter name="expected" byreference="false" type="{unknown}"/>
    <parameter name="actual" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="string" default="''"/>
  </method>
  <method name="assertAttributeGreaterThanOrEqual" start="717" end="724" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Asserts that an attribute is greater than or equal to another value."/>
      <param type="mixed" variable="$expected"/>
      <param type="string" variable="$actualAttributeName"/>
      <param type="string" variable="$actualClassOrObject"/>
      <param type="string" variable="$message"/>
      <since value="Method available since Release 3.1.0"/>
    </docblock>
    <parameter name="expected" byreference="false" type="{unknown}"/>
    <parameter name="actualAttributeName" byreference="false" type="{unknown}"/>
    <parameter name="actualClassOrObject" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="string" default="''"/>
  </method>
  <method name="assertLessThan" start="735" end="738" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Asserts that a value is smaller than another value."/>
      <param type="mixed" variable="$expected"/>
      <param type="mixed" variable="$actual"/>
      <param type="string" variable="$message"/>
      <since value="Method available since Release 3.1.0"/>
    </docblock>
    <parameter name="expected" byreference="false" type="{unknown}"/>
    <parameter name="actual" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="string" default="''"/>
  </method>
  <method name="assertAttributeLessThan" start="750" end="757" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Asserts that an attribute is smaller than another value."/>
      <param type="mixed" variable="$expected"/>
      <param type="string" variable="$actualAttributeName"/>
      <param type="string" variable="$actualClassOrObject"/>
      <param type="string" variable="$message"/>
      <since value="Method available since Release 3.1.0"/>
    </docblock>
    <parameter name="expected" byreference="false" type="{unknown}"/>
    <parameter name="actualAttributeName" byreference="false" type="{unknown}"/>
    <parameter name="actualClassOrObject" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="string" default="''"/>
  </method>
  <method name="assertLessThanOrEqual" start="768" end="771" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Asserts that a value is smaller than or equal to another value."/>
      <param type="mixed" variable="$expected"/>
      <param type="mixed" variable="$actual"/>
      <param type="string" variable="$message"/>
      <since value="Method available since Release 3.1.0"/>
    </docblock>
    <parameter name="expected" byreference="false" type="{unknown}"/>
    <parameter name="actual" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="string" default="''"/>
  </method>
  <method name="assertAttributeLessThanOrEqual" start="783" end="790" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Asserts that an attribute is smaller than or equal to another value."/>
      <param type="mixed" variable="$expected"/>
      <param type="string" variable="$actualAttributeName"/>
      <param type="string" variable="$actualClassOrObject"/>
      <param type="string" variable="$message"/>
      <since value="Method available since Release 3.1.0"/>
    </docblock>
    <parameter name="expected" byreference="false" type="{unknown}"/>
    <parameter name="actualAttributeName" byreference="false" type="{unknown}"/>
    <parameter name="actualClassOrObject" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="string" default="''"/>
  </method>
  <method name="assertFileEquals" start="804" end="818" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Asserts that the contents of one file is equal to the contents of another file."/>
      <param type="string" variable="$expected"/>
      <param type="string" variable="$actual"/>
      <param type="string" variable="$message"/>
      <param type="object" variable="$canonicalize">
        <type full="bool" namespace="" name="bool"/>
      </param>
      <param type="object" variable="$ignoreCase">
        <type full="bool" namespace="" name="bool"/>
      </param>
      <since value="Method available since Release 3.2.14"/>
    </docblock>
    <parameter name="expected" byreference="false" type="{unknown}"/>
    <parameter name="actual" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="string" default="''"/>
    <parameter name="canonicalize" byreference="false" type="boolean" default="false"/>
    <parameter name="ignoreCase" byreference="false" type="boolean" default="false"/>
  </method>
  <method name="assertFileNotEquals" start="832" end="846" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Asserts that the contents of one file is not equal to the contents of another file."/>
      <param type="string" variable="$expected"/>
      <param type="string" variable="$actual"/>
      <param type="string" variable="$message"/>
      <param type="object" variable="$canonicalize">
        <type full="bool" namespace="" name="bool"/>
      </param>
      <param type="object" variable="$ignoreCase">
        <type full="bool" namespace="" name="bool"/>
      </param>
      <since value="Method available since Release 3.2.14"/>
    </docblock>
    <parameter name="expected" byreference="false" type="{unknown}"/>
    <parameter name="actual" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="string" default="''"/>
    <parameter name="canonicalize" byreference="false" type="boolean" default="false"/>
    <parameter name="ignoreCase" byreference="false" type="boolean" default="false"/>
  </method>
  <method name="assertStringEqualsFile" start="860" end="873" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Asserts that the contents of a string is equal to the contents of a file."/>
      <param type="string" variable="$expectedFile"/>
      <param type="string" variable="$actualString"/>
      <param type="string" variable="$message"/>
      <param type="object" variable="$canonicalize">
        <type full="bool" namespace="" name="bool"/>
      </param>
      <param type="object" variable="$ignoreCase">
        <type full="bool" namespace="" name="bool"/>
      </param>
      <since value="Method available since Release 3.3.0"/>
    </docblock>
    <parameter name="expectedFile" byreference="false" type="{unknown}"/>
    <parameter name="actualString" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="string" default="''"/>
    <parameter name="canonicalize" byreference="false" type="boolean" default="false"/>
    <parameter name="ignoreCase" byreference="false" type="boolean" default="false"/>
  </method>
  <method name="assertStringNotEqualsFile" start="887" end="900" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Asserts that the contents of a string is not equal to the contents of a file."/>
      <param type="string" variable="$expectedFile"/>
      <param type="string" variable="$actualString"/>
      <param type="string" variable="$message"/>
      <param type="object" variable="$canonicalize">
        <type full="bool" namespace="" name="bool"/>
      </param>
      <param type="object" variable="$ignoreCase">
        <type full="bool" namespace="" name="bool"/>
      </param>
      <since value="Method available since Release 3.3.0"/>
    </docblock>
    <parameter name="expectedFile" byreference="false" type="{unknown}"/>
    <parameter name="actualString" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="string" default="''"/>
    <parameter name="canonicalize" byreference="false" type="boolean" default="false"/>
    <parameter name="ignoreCase" byreference="false" type="boolean" default="false"/>
  </method>
  <method name="assertFileExists" start="910" end="919" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Asserts that a file exists."/>
      <param type="string" variable="$filename"/>
      <param type="string" variable="$message"/>
      <since value="Method available since Release 3.0.0"/>
    </docblock>
    <parameter name="filename" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="string" default="''"/>
  </method>
  <method name="assertFileNotExists" start="929" end="940" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Asserts that a file does not exist."/>
      <param type="string" variable="$filename"/>
      <param type="string" variable="$message"/>
      <since value="Method available since Release 3.0.0"/>
    </docblock>
    <parameter name="filename" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="string" default="''"/>
  </method>
  <method name="assertTrue" start="950" end="953" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Asserts that a condition is true."/>
      <param type="object" variable="$condition">
        <type full="bool" namespace="" name="bool"/>
      </param>
      <param type="string" variable="$message"/>
      <throws type="object">
        <type full="PHPUnit_Framework_AssertionFailedError" namespace="" name="PHPUnit_Framework_AssertionFailedError"/>
      </throws>
    </docblock>
    <parameter name="condition" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="string" default="''"/>
  </method>
  <method name="assertNotTrue" start="963" end="966" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Asserts that a condition is not true."/>
      <param type="object" variable="$condition">
        <type full="bool" namespace="" name="bool"/>
      </param>
      <param type="string" variable="$message"/>
      <throws type="object">
        <type full="PHPUnit_Framework_AssertionFailedError" namespace="" name="PHPUnit_Framework_AssertionFailedError"/>
      </throws>
    </docblock>
    <parameter name="condition" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="string" default="''"/>
  </method>
  <method name="assertFalse" start="976" end="979" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Asserts that a condition is false."/>
      <param type="object" variable="$condition">
        <type full="bool" namespace="" name="bool"/>
      </param>
      <param type="string" variable="$message"/>
      <throws type="object">
        <type full="PHPUnit_Framework_AssertionFailedError" namespace="" name="PHPUnit_Framework_AssertionFailedError"/>
      </throws>
    </docblock>
    <parameter name="condition" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="string" default="''"/>
  </method>
  <method name="assertNotFalse" start="989" end="992" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Asserts that a condition is not false."/>
      <param type="object" variable="$condition">
        <type full="bool" namespace="" name="bool"/>
      </param>
      <param type="string" variable="$message"/>
      <throws type="object">
        <type full="PHPUnit_Framework_AssertionFailedError" namespace="" name="PHPUnit_Framework_AssertionFailedError"/>
      </throws>
    </docblock>
    <parameter name="condition" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="string" default="''"/>
  </method>
  <method name="assertNotNull" start="1000" end="1003" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Asserts that a variable is not null."/>
      <param type="mixed" variable="$actual"/>
      <param type="string" variable="$message"/>
    </docblock>
    <parameter name="actual" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="string" default="''"/>
  </method>
  <method name="assertNull" start="1011" end="1014" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Asserts that a variable is null."/>
      <param type="mixed" variable="$actual"/>
      <param type="string" variable="$message"/>
    </docblock>
    <parameter name="actual" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="string" default="''"/>
  </method>
  <method name="assertClassHasAttribute" start="1025" end="1044" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Asserts that a class has a specified attribute."/>
      <param type="string" variable="$attributeName"/>
      <param type="string" variable="$className"/>
      <param type="string" variable="$message"/>
      <since value="Method available since Release 3.1.0"/>
    </docblock>
    <parameter name="attributeName" byreference="false" type="{unknown}"/>
    <parameter name="className" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="string" default="''"/>
  </method>
  <method name="assertClassNotHasAttribute" start="1055" end="1074" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Asserts that a class does not have a specified attribute."/>
      <param type="string" variable="$attributeName"/>
      <param type="string" variable="$className"/>
      <param type="string" variable="$message"/>
      <since value="Method available since Release 3.1.0"/>
    </docblock>
    <parameter name="attributeName" byreference="false" type="{unknown}"/>
    <parameter name="className" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="string" default="''"/>
  </method>
  <method name="assertClassHasStaticAttribute" start="1085" end="1104" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Asserts that a class has a specified static attribute."/>
      <param type="string" variable="$attributeName"/>
      <param type="string" variable="$className"/>
      <param type="string" variable="$message"/>
      <since value="Method available since Release 3.1.0"/>
    </docblock>
    <parameter name="attributeName" byreference="false" type="{unknown}"/>
    <parameter name="className" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="string" default="''"/>
  </method>
  <method name="assertClassNotHasStaticAttribute" start="1115" end="1136" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Asserts that a class does not have a specified static attribute."/>
      <param type="string" variable="$attributeName"/>
      <param type="string" variable="$className"/>
      <param type="string" variable="$message"/>
      <since value="Method available since Release 3.1.0"/>
    </docblock>
    <parameter name="attributeName" byreference="false" type="{unknown}"/>
    <parameter name="className" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="string" default="''"/>
  </method>
  <method name="assertObjectHasAttribute" start="1147" end="1166" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Asserts that an object has a specified attribute."/>
      <param type="string" variable="$attributeName"/>
      <param type="object" variable="$object"/>
      <param type="string" variable="$message"/>
      <since value="Method available since Release 3.0.0"/>
    </docblock>
    <parameter name="attributeName" byreference="false" type="{unknown}"/>
    <parameter name="object" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="string" default="''"/>
  </method>
  <method name="assertObjectNotHasAttribute" start="1177" end="1196" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Asserts that an object does not have a specified attribute."/>
      <param type="string" variable="$attributeName"/>
      <param type="object" variable="$object"/>
      <param type="string" variable="$message"/>
      <since value="Method available since Release 3.0.0"/>
    </docblock>
    <parameter name="attributeName" byreference="false" type="{unknown}"/>
    <parameter name="object" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="string" default="''"/>
  </method>
  <method name="assertSame" start="1207" end="1218" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Asserts that two variables have the same type and value.">Used on objects, it asserts that two variables reference
the same object.</description>
      <param type="mixed" variable="$expected"/>
      <param type="mixed" variable="$actual"/>
      <param type="string" variable="$message"/>
    </docblock>
    <parameter name="expected" byreference="false" type="{unknown}"/>
    <parameter name="actual" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="string" default="''"/>
  </method>
  <method name="assertAttributeSame" start="1229" end="1236" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Asserts that a variable and an attribute of an object have the same type and value."/>
      <param type="mixed" variable="$expected"/>
      <param type="string" variable="$actualAttributeName"/>
      <param type="object" variable="$actualClassOrObject"/>
      <param type="string" variable="$message"/>
    </docblock>
    <parameter name="expected" byreference="false" type="{unknown}"/>
    <parameter name="actualAttributeName" byreference="false" type="{unknown}"/>
    <parameter name="actualClassOrObject" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="string" default="''"/>
  </method>
  <method name="assertNotSame" start="1247" end="1258" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Asserts that two variables do not have the same type and value.">Used on objects, it asserts that two variables do not reference
the same object.</description>
      <param type="mixed" variable="$expected"/>
      <param type="mixed" variable="$actual"/>
      <param type="string" variable="$message"/>
    </docblock>
    <parameter name="expected" byreference="false" type="{unknown}"/>
    <parameter name="actual" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="string" default="''"/>
  </method>
  <method name="assertAttributeNotSame" start="1269" end="1276" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Asserts that a variable and an attribute of an object do not have the same type and value."/>
      <param type="mixed" variable="$expected"/>
      <param type="string" variable="$actualAttributeName"/>
      <param type="object" variable="$actualClassOrObject"/>
      <param type="string" variable="$message"/>
    </docblock>
    <parameter name="expected" byreference="false" type="{unknown}"/>
    <parameter name="actualAttributeName" byreference="false" type="{unknown}"/>
    <parameter name="actualClassOrObject" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="string" default="''"/>
  </method>
  <method name="assertInstanceOf" start="1287" end="1298" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Asserts that a variable is of a given type."/>
      <param type="string" variable="$expected"/>
      <param type="mixed" variable="$actual"/>
      <param type="string" variable="$message"/>
      <since value="Method available since Release 3.5.0"/>
    </docblock>
    <parameter name="expected" byreference="false" type="{unknown}"/>
    <parameter name="actual" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="string" default="''"/>
  </method>
  <method name="assertAttributeInstanceOf" start="1310" end="1317" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Asserts that an attribute is of a given type."/>
      <param type="string" variable="$expected"/>
      <param type="string" variable="$attributeName"/>
      <param type="mixed" variable="$classOrObject"/>
      <param type="string" variable="$message"/>
      <since value="Method available since Release 3.5.0"/>
    </docblock>
    <parameter name="expected" byreference="false" type="{unknown}"/>
    <parameter name="attributeName" byreference="false" type="{unknown}"/>
    <parameter name="classOrObject" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="string" default="''"/>
  </method>
  <method name="assertNotInstanceOf" start="1328" end="1339" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Asserts that a variable is not of a given type."/>
      <param type="string" variable="$expected"/>
      <param type="mixed" variable="$actual"/>
      <param type="string" variable="$message"/>
      <since value="Method available since Release 3.5.0"/>
    </docblock>
    <parameter name="expected" byreference="false" type="{unknown}"/>
    <parameter name="actual" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="string" default="''"/>
  </method>
  <method name="assertAttributeNotInstanceOf" start="1351" end="1358" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Asserts that an attribute is of a given type."/>
      <param type="string" variable="$expected"/>
      <param type="string" variable="$attributeName"/>
      <param type="mixed" variable="$classOrObject"/>
      <param type="string" variable="$message"/>
      <since value="Method available since Release 3.5.0"/>
    </docblock>
    <parameter name="expected" byreference="false" type="{unknown}"/>
    <parameter name="attributeName" byreference="false" type="{unknown}"/>
    <parameter name="classOrObject" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="string" default="''"/>
  </method>
  <method name="assertInternalType" start="1369" end="1380" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Asserts that a variable is of a given type."/>
      <param type="string" variable="$expected"/>
      <param type="mixed" variable="$actual"/>
      <param type="string" variable="$message"/>
      <since value="Method available since Release 3.5.0"/>
    </docblock>
    <parameter name="expected" byreference="false" type="{unknown}"/>
    <parameter name="actual" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="string" default="''"/>
  </method>
  <method name="assertAttributeInternalType" start="1392" end="1399" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Asserts that an attribute is of a given type."/>
      <param type="string" variable="$expected"/>
      <param type="string" variable="$attributeName"/>
      <param type="mixed" variable="$classOrObject"/>
      <param type="string" variable="$message"/>
      <since value="Method available since Release 3.5.0"/>
    </docblock>
    <parameter name="expected" byreference="false" type="{unknown}"/>
    <parameter name="attributeName" byreference="false" type="{unknown}"/>
    <parameter name="classOrObject" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="string" default="''"/>
  </method>
  <method name="assertNotInternalType" start="1410" end="1421" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Asserts that a variable is not of a given type."/>
      <param type="string" variable="$expected"/>
      <param type="mixed" variable="$actual"/>
      <param type="string" variable="$message"/>
      <since value="Method available since Release 3.5.0"/>
    </docblock>
    <parameter name="expected" byreference="false" type="{unknown}"/>
    <parameter name="actual" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="string" default="''"/>
  </method>
  <method name="assertAttributeNotInternalType" start="1433" end="1440" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Asserts that an attribute is of a given type."/>
      <param type="string" variable="$expected"/>
      <param type="string" variable="$attributeName"/>
      <param type="mixed" variable="$classOrObject"/>
      <param type="string" variable="$message"/>
      <since value="Method available since Release 3.5.0"/>
    </docblock>
    <parameter name="expected" byreference="false" type="{unknown}"/>
    <parameter name="attributeName" byreference="false" type="{unknown}"/>
    <parameter name="classOrObject" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="string" default="''"/>
  </method>
  <method name="assertRegExp" start="1449" end="1462" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Asserts that a string matches a given regular expression."/>
      <param type="string" variable="$pattern"/>
      <param type="string" variable="$string"/>
      <param type="string" variable="$message"/>
    </docblock>
    <parameter name="pattern" byreference="false" type="{unknown}"/>
    <parameter name="string" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="string" default="''"/>
  </method>
  <method name="assertNotRegExp" start="1473" end="1488" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Asserts that a string does not match a given regular expression."/>
      <param type="string" variable="$pattern"/>
      <param type="string" variable="$string"/>
      <param type="string" variable="$message"/>
      <since value="Method available since Release 2.1.0"/>
    </docblock>
    <parameter name="pattern" byreference="false" type="{unknown}"/>
    <parameter name="string" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="string" default="''"/>
  </method>
  <method name="assertSameSize" start="1498" end="1517" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Assert that the size of two arrays (or `Countable` or `Traversable` objects) is the same."/>
      <param type="object" variable="$expected">
        <type full="array|Countable|Traversable" namespace="" name="array|Countable|Traversable"/>
      </param>
      <param type="object" variable="$actual">
        <type full="array|Countable|Traversable" namespace="" name="array|Countable|Traversable"/>
      </param>
      <param type="string" variable="$message"/>
    </docblock>
    <parameter name="expected" byreference="false" type="{unknown}"/>
    <parameter name="actual" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="string" default="''"/>
  </method>
  <method name="assertNotSameSize" start="1527" end="1546" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Assert that the size of two arrays (or `Countable` or `Traversable` objects) is not the same."/>
      <param type="object" variable="$expected">
        <type full="array|Countable|Traversable" namespace="" name="array|Countable|Traversable"/>
      </param>
      <param type="object" variable="$actual">
        <type full="array|Countable|Traversable" namespace="" name="array|Countable|Traversable"/>
      </param>
      <param type="string" variable="$message"/>
    </docblock>
    <parameter name="expected" byreference="false" type="{unknown}"/>
    <parameter name="actual" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="string" default="''"/>
  </method>
  <method name="assertStringMatchesFormat" start="1557" end="1570" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Asserts that a string matches a given format string."/>
      <param type="string" variable="$format"/>
      <param type="string" variable="$string"/>
      <param type="string" variable="$message"/>
      <since value="Method available since Release 3.5.0"/>
    </docblock>
    <parameter name="format" byreference="false" type="{unknown}"/>
    <parameter name="string" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="string" default="''"/>
  </method>
  <method name="assertStringNotMatchesFormat" start="1581" end="1596" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Asserts that a string does not match a given format string."/>
      <param type="string" variable="$format"/>
      <param type="string" variable="$string"/>
      <param type="string" variable="$message"/>
      <since value="Method available since Release 3.5.0"/>
    </docblock>
    <parameter name="format" byreference="false" type="{unknown}"/>
    <parameter name="string" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="string" default="''"/>
  </method>
  <method name="assertStringMatchesFormatFile" start="1607" end="1620" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Asserts that a string matches a given format file."/>
      <param type="string" variable="$formatFile"/>
      <param type="string" variable="$string"/>
      <param type="string" variable="$message"/>
      <since value="Method available since Release 3.5.0"/>
    </docblock>
    <parameter name="formatFile" byreference="false" type="{unknown}"/>
    <parameter name="string" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="string" default="''"/>
  </method>
  <method name="assertStringNotMatchesFormatFile" start="1631" end="1646" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Asserts that a string does not match a given format string."/>
      <param type="string" variable="$formatFile"/>
      <param type="string" variable="$string"/>
      <param type="string" variable="$message"/>
      <since value="Method available since Release 3.5.0"/>
    </docblock>
    <parameter name="formatFile" byreference="false" type="{unknown}"/>
    <parameter name="string" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="string" default="''"/>
  </method>
  <method name="assertStringStartsWith" start="1657" end="1672" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Asserts that a string starts with a given prefix."/>
      <param type="string" variable="$prefix"/>
      <param type="string" variable="$string"/>
      <param type="string" variable="$message"/>
      <since value="Method available since Release 3.4.0"/>
    </docblock>
    <parameter name="prefix" byreference="false" type="{unknown}"/>
    <parameter name="string" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="string" default="''"/>
  </method>
  <method name="assertStringStartsNotWith" start="1683" end="1698" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Asserts that a string starts not with a given prefix."/>
      <param type="string" variable="$prefix"/>
      <param type="string" variable="$string"/>
      <param type="string" variable="$message"/>
      <since value="Method available since Release 3.4.0"/>
    </docblock>
    <parameter name="prefix" byreference="false" type="{unknown}"/>
    <parameter name="string" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="string" default="''"/>
  </method>
  <method name="assertStringEndsWith" start="1709" end="1722" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Asserts that a string ends with a given suffix."/>
      <param type="string" variable="$suffix"/>
      <param type="string" variable="$string"/>
      <param type="string" variable="$message"/>
      <since value="Method available since Release 3.4.0"/>
    </docblock>
    <parameter name="suffix" byreference="false" type="{unknown}"/>
    <parameter name="string" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="string" default="''"/>
  </method>
  <method name="assertStringEndsNotWith" start="1733" end="1748" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Asserts that a string ends not with a given suffix."/>
      <param type="string" variable="$suffix"/>
      <param type="string" variable="$string"/>
      <param type="string" variable="$message"/>
      <since value="Method available since Release 3.4.0"/>
    </docblock>
    <parameter name="suffix" byreference="false" type="{unknown}"/>
    <parameter name="string" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="string" default="''"/>
  </method>
  <method name="assertXmlFileEqualsXmlFile" start="1759" end="1765" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Asserts that two XML files are equal."/>
      <param type="string" variable="$expectedFile"/>
      <param type="string" variable="$actualFile"/>
      <param type="string" variable="$message"/>
      <since value="Method available since Release 3.1.0"/>
    </docblock>
    <parameter name="expectedFile" byreference="false" type="{unknown}"/>
    <parameter name="actualFile" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="string" default="''"/>
  </method>
  <method name="assertXmlFileNotEqualsXmlFile" start="1776" end="1782" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Asserts that two XML files are not equal."/>
      <param type="string" variable="$expectedFile"/>
      <param type="string" variable="$actualFile"/>
      <param type="string" variable="$message"/>
      <since value="Method available since Release 3.1.0"/>
    </docblock>
    <parameter name="expectedFile" byreference="false" type="{unknown}"/>
    <parameter name="actualFile" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="string" default="''"/>
  </method>
  <method name="assertXmlStringEqualsXmlFile" start="1793" end="1799" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Asserts that two XML documents are equal."/>
      <param type="string" variable="$expectedFile"/>
      <param type="string" variable="$actualXml"/>
      <param type="string" variable="$message"/>
      <since value="Method available since Release 3.3.0"/>
    </docblock>
    <parameter name="expectedFile" byreference="false" type="{unknown}"/>
    <parameter name="actualXml" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="string" default="''"/>
  </method>
  <method name="assertXmlStringNotEqualsXmlFile" start="1810" end="1816" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Asserts that two XML documents are not equal."/>
      <param type="string" variable="$expectedFile"/>
      <param type="string" variable="$actualXml"/>
      <param type="string" variable="$message"/>
      <since value="Method available since Release 3.3.0"/>
    </docblock>
    <parameter name="expectedFile" byreference="false" type="{unknown}"/>
    <parameter name="actualXml" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="string" default="''"/>
  </method>
  <method name="assertXmlStringEqualsXmlString" start="1827" end="1833" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Asserts that two XML documents are equal."/>
      <param type="string" variable="$expectedXml"/>
      <param type="string" variable="$actualXml"/>
      <param type="string" variable="$message"/>
      <since value="Method available since Release 3.1.0"/>
    </docblock>
    <parameter name="expectedXml" byreference="false" type="{unknown}"/>
    <parameter name="actualXml" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="string" default="''"/>
  </method>
  <method name="assertXmlStringNotEqualsXmlString" start="1844" end="1850" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Asserts that two XML documents are not equal."/>
      <param type="string" variable="$expectedXml"/>
      <param type="string" variable="$actualXml"/>
      <param type="string" variable="$message"/>
      <since value="Method available since Release 3.1.0"/>
    </docblock>
    <parameter name="expectedXml" byreference="false" type="{unknown}"/>
    <parameter name="actualXml" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="string" default="''"/>
  </method>
  <method name="assertEqualXMLStructure" start="1862" end="1932" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Asserts that a hierarchy of DOMElements matches."/>
      <param type="object" variable="$expectedElement">
        <type full="DOMElement" namespace="" name="DOMElement"/>
      </param>
      <param type="object" variable="$actualElement">
        <type full="DOMElement" namespace="" name="DOMElement"/>
      </param>
      <param type="object" variable="$checkAttributes">
        <type full="bool" namespace="" name="bool"/>
      </param>
      <param type="string" variable="$message"/>
      <since value="Method available since Release 3.3.0"/>
    </docblock>
    <parameter name="expectedElement" byreference="false" type="object">
      <type full="DOMElement" namespace="" name="DOMElement"/>
    </parameter>
    <parameter name="actualElement" byreference="false" type="object">
      <type full="DOMElement" namespace="" name="DOMElement"/>
    </parameter>
    <parameter name="checkAttributes" byreference="false" type="boolean" default="false"/>
    <parameter name="message" byreference="false" type="string" default="''"/>
  </method>
  <method name="assertSelectCount" start="1959" end="1971" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Assert the presence, absence, or count of elements in a document matching the CSS $selector, regardless of the contents of those elements.">The first argument, $selector, is the CSS selector used to match
the elements in the $actual document.

The second argument, $count, can be either boolean or numeric.
When boolean, it asserts for presence of elements matching the selector
(true) or absence of elements (false).
When numeric, it asserts the count of elements.

assertSelectCount("#binder", true, $xml);  // any?
assertSelectCount(".binder", 3, $xml);     // exactly 3?</description>
      <param type="array" variable="$selector"/>
      <param type="object" variable="$count">
        <type full="int|bool|array" namespace="" name="int|bool|array"/>
      </param>
      <param type="mixed" variable="$actual"/>
      <param type="string" variable="$message"/>
      <param type="object" variable="$isHtml">
        <type full="bool" namespace="" name="bool"/>
      </param>
      <since value="Method available since Release 3.3.0"/>
      <deprecated/>
      <codecoverageignore/>
    </docblock>
    <parameter name="selector" byreference="false" type="{unknown}"/>
    <parameter name="count" byreference="false" type="{unknown}"/>
    <parameter name="actual" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="string" default="''"/>
    <parameter name="isHtml" byreference="false" type="boolean" default="true"/>
  </method>
  <method name="assertSelectRegExp" start="1988" end="2000" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="assertSelectRegExp(&quot;#binder .name&quot;, &quot;/Mike|Derek/&quot;, true, $xml); // any? assertSelectRegExp(&quot;#binder .name&quot;, &quot;/Mike|Derek/&quot;, 3, $xml);    // 3?"/>
      <param type="array" variable="$selector"/>
      <param type="string" variable="$pattern"/>
      <param type="object" variable="$count">
        <type full="int|bool|array" namespace="" name="int|bool|array"/>
      </param>
      <param type="mixed" variable="$actual"/>
      <param type="string" variable="$message"/>
      <param type="object" variable="$isHtml">
        <type full="bool" namespace="" name="bool"/>
      </param>
      <since value="Method available since Release 3.3.0"/>
      <deprecated/>
      <codecoverageignore/>
    </docblock>
    <parameter name="selector" byreference="false" type="{unknown}"/>
    <parameter name="pattern" byreference="false" type="{unknown}"/>
    <parameter name="count" byreference="false" type="{unknown}"/>
    <parameter name="actual" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="string" default="''"/>
    <parameter name="isHtml" byreference="false" type="boolean" default="true"/>
  </method>
  <method name="assertSelectEquals" start="2017" end="2065" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="assertSelectEquals(&quot;#binder .name&quot;, &quot;Chuck&quot;, true,  $xml);  // any? assertSelectEquals(&quot;#binder .name&quot;, &quot;Chuck&quot;, false, $xml);  // none?"/>
      <param type="array" variable="$selector"/>
      <param type="string" variable="$content"/>
      <param type="object" variable="$count">
        <type full="int|bool|array" namespace="" name="int|bool|array"/>
      </param>
      <param type="mixed" variable="$actual"/>
      <param type="string" variable="$message"/>
      <param type="object" variable="$isHtml">
        <type full="bool" namespace="" name="bool"/>
      </param>
      <since value="Method available since Release 3.3.0"/>
      <deprecated/>
      <codecoverageignore/>
    </docblock>
    <parameter name="selector" byreference="false" type="{unknown}"/>
    <parameter name="content" byreference="false" type="{unknown}"/>
    <parameter name="count" byreference="false" type="{unknown}"/>
    <parameter name="actual" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="string" default="''"/>
    <parameter name="isHtml" byreference="false" type="boolean" default="true"/>
    <inline>
      <comment value="assert specific number of elements" line="2028"/>
    </inline>
  </method>
  <method name="assertTag" start="2205" end="2214" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Evaluate an HTML or XML string and assert its structure and/or contents.">The first argument ($matcher) is an associative array that specifies the
match criteria for the assertion:

 - `id`           : the node with the given id attribute must match the
                    corresponding value.
 - `tag`          : the node type must match the corresponding value.
 - `attributes`   : a hash. The node's attributes must match the
                    corresponding values in the hash.
 - `content`      : The text content must match the given value.
 - `parent`       : a hash. The node's parent must match the
                    corresponding hash.
 - `child`        : a hash. At least one of the node's immediate children
                    must meet the criteria described by the hash.
 - `ancestor`     : a hash. At least one of the node's ancestors must
                    meet the criteria described by the hash.
 - `descendant`   : a hash. At least one of the node's descendants must
                    meet the criteria described by the hash.
 - `children`     : a hash, for counting children of a node.
                    Accepts the keys:
   - `count`        : a number which must equal the number of children
                      that match
   - `less_than`    : the number of matching children must be greater
                      than this number
   - `greater_than` : the number of matching children must be less than
                      this number
   - `only`         : another hash consisting of the keys to use to match
                      on the children, and only matching children will be
                      counted

&lt;code&gt;
// Matcher that asserts that there is an element with an id="my_id".
$matcher = array('id' =&gt; 'my_id');

// Matcher that asserts that there is a "span" tag.
$matcher = array('tag' =&gt; 'span');

// Matcher that asserts that there is a "span" tag with the content
// "Hello World".
$matcher = array('tag' =&gt; 'span', 'content' =&gt; 'Hello World');

// Matcher that asserts that there is a "span" tag with content matching
// the regular expression pattern.
$matcher = array('tag' =&gt; 'span', 'content' =&gt; 'regexp:/Try P(HP|ython)/');

// Matcher that asserts that there is a "span" with an "list" class
// attribute.
$matcher = array(
  'tag'        =&gt; 'span',
  'attributes' =&gt; array('class' =&gt; 'list')
);

// Matcher that asserts that there is a "span" inside of a "div".
$matcher = array(
  'tag'    =&gt; 'span',
  'parent' =&gt; array('tag' =&gt; 'div')
);

// Matcher that asserts that there is a "span" somewhere inside a
// "table".
$matcher = array(
  'tag'      =&gt; 'span',
  'ancestor' =&gt; array('tag' =&gt; 'table')
);

// Matcher that asserts that there is a "span" with at least one "em"
// child.
$matcher = array(
  'tag'   =&gt; 'span',
  'child' =&gt; array('tag' =&gt; 'em')
);

// Matcher that asserts that there is a "span" containing a (possibly
// nested) "strong" tag.
$matcher = array(
  'tag'        =&gt; 'span',
  'descendant' =&gt; array('tag' =&gt; 'strong')
);

// Matcher that asserts that there is a "span" containing 5-10 "em" tags
// as immediate children.
$matcher = array(
  'tag'      =&gt; 'span',
  'children' =&gt; array(
    'less_than'    =&gt; 11,
    'greater_than' =&gt; 4,
    'only'         =&gt; array('tag' =&gt; 'em')
  )
);

// Matcher that asserts that there is a "div", with an "ul" ancestor and
// a "li" parent (with class="enum"), and containing a "span" descendant
// that contains an element with id="my_test" and the text "Hello World".
$matcher = array(
  'tag'        =&gt; 'div',
  'ancestor'   =&gt; array('tag' =&gt; 'ul'),
  'parent'     =&gt; array(
    'tag'        =&gt; 'li',
    'attributes' =&gt; array('class' =&gt; 'enum')
  ),
  'descendant' =&gt; array(
    'tag'   =&gt; 'span',
    'child' =&gt; array(
      'id'      =&gt; 'my_test',
      'content' =&gt; 'Hello World'
    )
  )
);

// Use assertTag() to apply a $matcher to a piece of $html.
$this-&gt;assertTag($matcher, $html);

// Use assertTag() to apply a $matcher to a piece of $xml.
$this-&gt;assertTag($matcher, $xml, '', false);
&lt;/code&gt;

The second argument ($actual) is a string containing either HTML or
XML text to be tested.

The third argument ($message) is an optional message that will be
used if the assertion fails.

The fourth argument ($html) is an optional flag specifying whether
to load the $actual string into a DOMDocument using the HTML or
XML load strategy.  It is true by default, which assumes the HTML
load strategy.  In many cases, this will be acceptable for XML as well.</description>
      <param type="array" variable="$matcher"/>
      <param type="string" variable="$actual"/>
      <param type="string" variable="$message"/>
      <param type="object" variable="$isHtml">
        <type full="bool" namespace="" name="bool"/>
      </param>
      <since value="Method available since Release 3.3.0"/>
      <deprecated/>
      <codecoverageignore/>
    </docblock>
    <parameter name="matcher" byreference="false" type="{unknown}"/>
    <parameter name="actual" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="string" default="''"/>
    <parameter name="isHtml" byreference="false" type="boolean" default="true"/>
  </method>
  <method name="assertNotTag" start="2231" end="2240" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="This assertion is the exact opposite of assertTag().">Rather than asserting that $matcher results in a match, it asserts that
$matcher does not match.</description>
      <param type="array" variable="$matcher"/>
      <param type="string" variable="$actual"/>
      <param type="string" variable="$message"/>
      <param type="object" variable="$isHtml">
        <type full="bool" namespace="" name="bool"/>
      </param>
      <since value="Method available since Release 3.3.0"/>
      <deprecated/>
      <codecoverageignore/>
    </docblock>
    <parameter name="matcher" byreference="false" type="{unknown}"/>
    <parameter name="actual" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="string" default="''"/>
    <parameter name="isHtml" byreference="false" type="boolean" default="true"/>
  </method>
  <method name="assertThat" start="2251" end="2256" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Evaluates a PHPUnit_Framework_Constraint matcher object."/>
      <param type="mixed" variable="$value"/>
      <param type="object" variable="$constraint">
        <type full="PHPUnit_Framework_Constraint" namespace="" name="PHPUnit_Framework_Constraint"/>
      </param>
      <param type="string" variable="$message"/>
      <since value="Method available since Release 3.0.0"/>
    </docblock>
    <parameter name="value" byreference="false" type="{unknown}"/>
    <parameter name="constraint" byreference="false" type="object">
      <type full="PHPUnit_Framework_Constraint" namespace="" name="PHPUnit_Framework_Constraint"/>
    </parameter>
    <parameter name="message" byreference="false" type="string" default="''"/>
  </method>
  <method name="assertJson" start="2266" end="2273" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Asserts that a string is a valid JSON string."/>
      <param type="string" variable="$actualJson"/>
      <param type="string" variable="$message"/>
      <since value="Method available since Release 3.7.20"/>
    </docblock>
    <parameter name="actualJson" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="string" default="''"/>
  </method>
  <method name="assertJsonStringEqualsJsonString" start="2282" end="2291" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Asserts that two given JSON encoded objects or arrays are equal."/>
      <param type="string" variable="$expectedJson"/>
      <param type="string" variable="$actualJson"/>
      <param type="string" variable="$message"/>
    </docblock>
    <parameter name="expectedJson" byreference="false" type="{unknown}"/>
    <parameter name="actualJson" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="string" default="''"/>
  </method>
  <method name="assertJsonStringNotEqualsJsonString" start="2300" end="2309" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Asserts that two given JSON encoded objects or arrays are not equal."/>
      <param type="string" variable="$expectedJson"/>
      <param type="string" variable="$actualJson"/>
      <param type="string" variable="$message"/>
    </docblock>
    <parameter name="expectedJson" byreference="false" type="{unknown}"/>
    <parameter name="actualJson" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="string" default="''"/>
  </method>
  <method name="assertJsonStringEqualsJsonFile" start="2318" end="2332" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Asserts that the generated JSON encoded object and the content of the given file are equal."/>
      <param type="string" variable="$expectedFile"/>
      <param type="string" variable="$actualJson"/>
      <param type="string" variable="$message"/>
    </docblock>
    <parameter name="expectedFile" byreference="false" type="{unknown}"/>
    <parameter name="actualJson" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="string" default="''"/>
    <inline>
      <comment value="call constraint" line="2326"/>
    </inline>
  </method>
  <method name="assertJsonStringNotEqualsJsonFile" start="2341" end="2355" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Asserts that the generated JSON encoded object and the content of the given file are not equal."/>
      <param type="string" variable="$expectedFile"/>
      <param type="string" variable="$actualJson"/>
      <param type="string" variable="$message"/>
    </docblock>
    <parameter name="expectedFile" byreference="false" type="{unknown}"/>
    <parameter name="actualJson" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="string" default="''"/>
    <inline>
      <comment value="call constraint" line="2349"/>
    </inline>
  </method>
  <method name="assertJsonFileNotEqualsJsonFile" start="2364" end="2384" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Asserts that two JSON files are not equal."/>
      <param type="string" variable="$expectedFile"/>
      <param type="string" variable="$actualFile"/>
      <param type="string" variable="$message"/>
    </docblock>
    <parameter name="expectedFile" byreference="false" type="{unknown}"/>
    <parameter name="actualFile" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="string" default="''"/>
    <inline>
      <comment value="call constraint" line="2375"/>
    </inline>
  </method>
  <method name="assertJsonFileEqualsJsonFile" start="2393" end="2413" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Asserts that two JSON files are equal."/>
      <param type="string" variable="$expectedFile"/>
      <param type="string" variable="$actualFile"/>
      <param type="string" variable="$message"/>
    </docblock>
    <parameter name="expectedFile" byreference="false" type="{unknown}"/>
    <parameter name="actualFile" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="string" default="''"/>
    <inline>
      <comment value="call constraint" line="2404"/>
    </inline>
  </method>
  <method name="logicalAnd" start="2422" end="2430" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns a PHPUnit_Framework_Constraint_And matcher object."/>
      <return type="object">
        <type full="PHPUnit_Framework_Constraint_And" namespace="" name="PHPUnit_Framework_Constraint_And"/>
      </return>
      <since value="Method available since Release 3.0.0"/>
    </docblock>
  </method>
  <method name="logicalOr" start="2439" end="2447" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns a PHPUnit_Framework_Constraint_Or matcher object."/>
      <return type="object">
        <type full="PHPUnit_Framework_Constraint_Or" namespace="" name="PHPUnit_Framework_Constraint_Or"/>
      </return>
      <since value="Method available since Release 3.0.0"/>
    </docblock>
  </method>
  <method name="logicalNot" start="2458" end="2461" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns a PHPUnit_Framework_Constraint_Not matcher object."/>
      <param type="object" variable="$constraint">
        <type full="PHPUnit_Framework_Constraint" namespace="" name="PHPUnit_Framework_Constraint"/>
      </param>
      <return type="object">
        <type full="PHPUnit_Framework_Constraint_Not" namespace="" name="PHPUnit_Framework_Constraint_Not"/>
      </return>
      <since value="Method available since Release 3.0.0"/>
    </docblock>
    <parameter name="constraint" byreference="false" type="object">
      <type full="PHPUnit_Framework_Constraint" namespace="" name="PHPUnit_Framework_Constraint"/>
    </parameter>
  </method>
  <method name="logicalXor" start="2470" end="2478" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns a PHPUnit_Framework_Constraint_Xor matcher object."/>
      <return type="object">
        <type full="PHPUnit_Framework_Constraint_Xor" namespace="" name="PHPUnit_Framework_Constraint_Xor"/>
      </return>
      <since value="Method available since Release 3.0.0"/>
    </docblock>
  </method>
  <method name="anything" start="2487" end="2490" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns a PHPUnit_Framework_Constraint_IsAnything matcher object."/>
      <return type="object">
        <type full="PHPUnit_Framework_Constraint_IsAnything" namespace="" name="PHPUnit_Framework_Constraint_IsAnything"/>
      </return>
      <since value="Method available since Release 3.0.0"/>
    </docblock>
  </method>
  <method name="isTrue" start="2499" end="2502" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns a PHPUnit_Framework_Constraint_IsTrue matcher object."/>
      <return type="object">
        <type full="PHPUnit_Framework_Constraint_IsTrue" namespace="" name="PHPUnit_Framework_Constraint_IsTrue"/>
      </return>
      <since value="Method available since Release 3.3.0"/>
    </docblock>
  </method>
  <method name="callback" start="2511" end="2514" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns a PHPUnit_Framework_Constraint_Callback matcher object."/>
      <param type="object" variable="$callback">
        <type full="callable" namespace="" name="callable"/>
      </param>
      <return type="object">
        <type full="PHPUnit_Framework_Constraint_Callback" namespace="" name="PHPUnit_Framework_Constraint_Callback"/>
      </return>
    </docblock>
    <parameter name="callback" byreference="false" type="{unknown}"/>
  </method>
  <method name="isFalse" start="2523" end="2526" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns a PHPUnit_Framework_Constraint_IsFalse matcher object."/>
      <return type="object">
        <type full="PHPUnit_Framework_Constraint_IsFalse" namespace="" name="PHPUnit_Framework_Constraint_IsFalse"/>
      </return>
      <since value="Method available since Release 3.3.0"/>
    </docblock>
  </method>
  <method name="isJson" start="2535" end="2538" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns a PHPUnit_Framework_Constraint_IsJson matcher object."/>
      <return type="object">
        <type full="PHPUnit_Framework_Constraint_IsJson" namespace="" name="PHPUnit_Framework_Constraint_IsJson"/>
      </return>
      <since value="Method available since Release 3.7.20"/>
    </docblock>
  </method>
  <method name="isNull" start="2547" end="2550" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns a PHPUnit_Framework_Constraint_IsNull matcher object."/>
      <return type="object">
        <type full="PHPUnit_Framework_Constraint_IsNull" namespace="" name="PHPUnit_Framework_Constraint_IsNull"/>
      </return>
      <since value="Method available since Release 3.3.0"/>
    </docblock>
  </method>
  <method name="attribute" start="2562" end="2568" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns a PHPUnit_Framework_Constraint_Attribute matcher object."/>
      <param type="object" variable="$constraint">
        <type full="PHPUnit_Framework_Constraint" namespace="" name="PHPUnit_Framework_Constraint"/>
      </param>
      <param type="string" variable="$attributeName"/>
      <return type="object">
        <type full="PHPUnit_Framework_Constraint_Attribute" namespace="" name="PHPUnit_Framework_Constraint_Attribute"/>
      </return>
      <since value="Method available since Release 3.1.0"/>
    </docblock>
    <parameter name="constraint" byreference="false" type="object">
      <type full="PHPUnit_Framework_Constraint" namespace="" name="PHPUnit_Framework_Constraint"/>
    </parameter>
    <parameter name="attributeName" byreference="false" type="{unknown}"/>
  </method>
  <method name="contains" start="2582" end="2585" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns a PHPUnit_Framework_Constraint_TraversableContains matcher object."/>
      <param type="mixed" variable="$value"/>
      <param type="object" variable="$checkForObjectIdentity">
        <type full="bool" namespace="" name="bool"/>
      </param>
      <param type="object" variable="$checkForNonObjectIdentity">
        <type full="bool" namespace="" name="bool"/>
      </param>
      <return type="object">
        <type full="PHPUnit_Framework_Constraint_TraversableContains" namespace="" name="PHPUnit_Framework_Constraint_TraversableContains"/>
      </return>
      <since value="Method available since Release 3.0.0"/>
    </docblock>
    <parameter name="value" byreference="false" type="{unknown}"/>
    <parameter name="checkForObjectIdentity" byreference="false" type="boolean" default="true"/>
    <parameter name="checkForNonObjectIdentity" byreference="false" type="boolean" default="false"/>
  </method>
  <method name="containsOnly" start="2597" end="2600" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns a PHPUnit_Framework_Constraint_TraversableContainsOnly matcher object."/>
      <param type="string" variable="$type"/>
      <return type="object">
        <type full="PHPUnit_Framework_Constraint_TraversableContainsOnly" namespace="" name="PHPUnit_Framework_Constraint_TraversableContainsOnly"/>
      </return>
      <since value="Method available since Release 3.1.4"/>
    </docblock>
    <parameter name="type" byreference="false" type="{unknown}"/>
  </method>
  <method name="containsOnlyInstancesOf" start="2610" end="2613" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns a PHPUnit_Framework_Constraint_TraversableContainsOnly matcher object."/>
      <param type="string" variable="$classname"/>
      <return type="object">
        <type full="PHPUnit_Framework_Constraint_TraversableContainsOnly" namespace="" name="PHPUnit_Framework_Constraint_TraversableContainsOnly"/>
      </return>
    </docblock>
    <parameter name="classname" byreference="false" type="{unknown}"/>
  </method>
  <method name="arrayHasKey" start="2624" end="2627" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns a PHPUnit_Framework_Constraint_ArrayHasKey matcher object."/>
      <param type="mixed" variable="$key"/>
      <return type="object">
        <type full="PHPUnit_Framework_Constraint_ArrayHasKey" namespace="" name="PHPUnit_Framework_Constraint_ArrayHasKey"/>
      </return>
      <since value="Method available since Release 3.0.0"/>
    </docblock>
    <parameter name="key" byreference="false" type="{unknown}"/>
  </method>
  <method name="equalTo" start="2642" end="2651" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns a PHPUnit_Framework_Constraint_IsEqual matcher object."/>
      <param type="mixed" variable="$value"/>
      <param type="float" variable="$delta"/>
      <param type="int" variable="$maxDepth"/>
      <param type="object" variable="$canonicalize">
        <type full="bool" namespace="" name="bool"/>
      </param>
      <param type="object" variable="$ignoreCase">
        <type full="bool" namespace="" name="bool"/>
      </param>
      <return type="object">
        <type full="PHPUnit_Framework_Constraint_IsEqual" namespace="" name="PHPUnit_Framework_Constraint_IsEqual"/>
      </return>
      <since value="Method available since Release 3.0.0"/>
    </docblock>
    <parameter name="value" byreference="false" type="{unknown}"/>
    <parameter name="delta" byreference="false" type="float" default="0.0"/>
    <parameter name="maxDepth" byreference="false" type="integer" default="10"/>
    <parameter name="canonicalize" byreference="false" type="boolean" default="false"/>
    <parameter name="ignoreCase" byreference="false" type="boolean" default="false"/>
  </method>
  <method name="attributeEqualTo" start="2669" end="2681" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns a PHPUnit_Framework_Constraint_IsEqual matcher object that is wrapped in a PHPUnit_Framework_Constraint_Attribute matcher object."/>
      <param type="string" variable="$attributeName"/>
      <param type="mixed" variable="$value"/>
      <param type="float" variable="$delta"/>
      <param type="int" variable="$maxDepth"/>
      <param type="object" variable="$canonicalize">
        <type full="bool" namespace="" name="bool"/>
      </param>
      <param type="object" variable="$ignoreCase">
        <type full="bool" namespace="" name="bool"/>
      </param>
      <return type="object">
        <type full="PHPUnit_Framework_Constraint_Attribute" namespace="" name="PHPUnit_Framework_Constraint_Attribute"/>
      </return>
      <since value="Method available since Release 3.1.0"/>
    </docblock>
    <parameter name="attributeName" byreference="false" type="{unknown}"/>
    <parameter name="value" byreference="false" type="{unknown}"/>
    <parameter name="delta" byreference="false" type="float" default="0.0"/>
    <parameter name="maxDepth" byreference="false" type="integer" default="10"/>
    <parameter name="canonicalize" byreference="false" type="boolean" default="false"/>
    <parameter name="ignoreCase" byreference="false" type="boolean" default="false"/>
  </method>
  <method name="isEmpty" start="2690" end="2693" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns a PHPUnit_Framework_Constraint_IsEmpty matcher object."/>
      <return type="object">
        <type full="PHPUnit_Framework_Constraint_IsEmpty" namespace="" name="PHPUnit_Framework_Constraint_IsEmpty"/>
      </return>
      <since value="Method available since Release 3.5.0"/>
    </docblock>
  </method>
  <method name="fileExists" start="2702" end="2705" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns a PHPUnit_Framework_Constraint_FileExists matcher object."/>
      <return type="object">
        <type full="PHPUnit_Framework_Constraint_FileExists" namespace="" name="PHPUnit_Framework_Constraint_FileExists"/>
      </return>
      <since value="Method available since Release 3.0.0"/>
    </docblock>
  </method>
  <method name="greaterThan" start="2716" end="2719" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns a PHPUnit_Framework_Constraint_GreaterThan matcher object."/>
      <param type="mixed" variable="$value"/>
      <return type="object">
        <type full="PHPUnit_Framework_Constraint_GreaterThan" namespace="" name="PHPUnit_Framework_Constraint_GreaterThan"/>
      </return>
      <since value="Method available since Release 3.0.0"/>
    </docblock>
    <parameter name="value" byreference="false" type="{unknown}"/>
  </method>
  <method name="greaterThanOrEqual" start="2732" end="2738" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns a PHPUnit_Framework_Constraint_Or matcher object that wraps a PHPUnit_Framework_Constraint_IsEqual and a PHPUnit_Framework_Constraint_GreaterThan matcher object."/>
      <param type="mixed" variable="$value"/>
      <return type="object">
        <type full="PHPUnit_Framework_Constraint_Or" namespace="" name="PHPUnit_Framework_Constraint_Or"/>
      </return>
      <since value="Method available since Release 3.1.0"/>
    </docblock>
    <parameter name="value" byreference="false" type="{unknown}"/>
  </method>
  <method name="classHasAttribute" start="2749" end="2754" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns a PHPUnit_Framework_Constraint_ClassHasAttribute matcher object."/>
      <param type="string" variable="$attributeName"/>
      <return type="object">
        <type full="PHPUnit_Framework_Constraint_ClassHasAttribute" namespace="" name="PHPUnit_Framework_Constraint_ClassHasAttribute"/>
      </return>
      <since value="Method available since Release 3.1.0"/>
    </docblock>
    <parameter name="attributeName" byreference="false" type="{unknown}"/>
  </method>
  <method name="classHasStaticAttribute" start="2766" end="2771" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns a PHPUnit_Framework_Constraint_ClassHasStaticAttribute matcher object."/>
      <param type="string" variable="$attributeName"/>
      <return type="object">
        <type full="PHPUnit_Framework_Constraint_ClassHasStaticAttribute" namespace="" name="PHPUnit_Framework_Constraint_ClassHasStaticAttribute"/>
      </return>
      <since value="Method available since Release 3.1.0"/>
    </docblock>
    <parameter name="attributeName" byreference="false" type="{unknown}"/>
  </method>
  <method name="objectHasAttribute" start="2782" end="2787" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns a PHPUnit_Framework_Constraint_ObjectHasAttribute matcher object."/>
      <param type="string" variable="$attributeName"/>
      <return type="object">
        <type full="PHPUnit_Framework_Constraint_ObjectHasAttribute" namespace="" name="PHPUnit_Framework_Constraint_ObjectHasAttribute"/>
      </return>
      <since value="Method available since Release 3.0.0"/>
    </docblock>
    <parameter name="attributeName" byreference="false" type="{unknown}"/>
  </method>
  <method name="identicalTo" start="2798" end="2801" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns a PHPUnit_Framework_Constraint_IsIdentical matcher object."/>
      <param type="mixed" variable="$value"/>
      <return type="object">
        <type full="PHPUnit_Framework_Constraint_IsIdentical" namespace="" name="PHPUnit_Framework_Constraint_IsIdentical"/>
      </return>
      <since value="Method available since Release 3.0.0"/>
    </docblock>
    <parameter name="value" byreference="false" type="{unknown}"/>
  </method>
  <method name="isInstanceOf" start="2812" end="2815" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns a PHPUnit_Framework_Constraint_IsInstanceOf matcher object."/>
      <param type="string" variable="$className"/>
      <return type="object">
        <type full="PHPUnit_Framework_Constraint_IsInstanceOf" namespace="" name="PHPUnit_Framework_Constraint_IsInstanceOf"/>
      </return>
      <since value="Method available since Release 3.0.0"/>
    </docblock>
    <parameter name="className" byreference="false" type="{unknown}"/>
  </method>
  <method name="isType" start="2826" end="2829" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns a PHPUnit_Framework_Constraint_IsType matcher object."/>
      <param type="string" variable="$type"/>
      <return type="object">
        <type full="PHPUnit_Framework_Constraint_IsType" namespace="" name="PHPUnit_Framework_Constraint_IsType"/>
      </return>
      <since value="Method available since Release 3.0.0"/>
    </docblock>
    <parameter name="type" byreference="false" type="{unknown}"/>
  </method>
  <method name="lessThan" start="2840" end="2843" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns a PHPUnit_Framework_Constraint_LessThan matcher object."/>
      <param type="mixed" variable="$value"/>
      <return type="object">
        <type full="PHPUnit_Framework_Constraint_LessThan" namespace="" name="PHPUnit_Framework_Constraint_LessThan"/>
      </return>
      <since value="Method available since Release 3.0.0"/>
    </docblock>
    <parameter name="value" byreference="false" type="{unknown}"/>
  </method>
  <method name="lessThanOrEqual" start="2856" end="2862" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns a PHPUnit_Framework_Constraint_Or matcher object that wraps a PHPUnit_Framework_Constraint_IsEqual and a PHPUnit_Framework_Constraint_LessThan matcher object."/>
      <param type="mixed" variable="$value"/>
      <return type="object">
        <type full="PHPUnit_Framework_Constraint_Or" namespace="" name="PHPUnit_Framework_Constraint_Or"/>
      </return>
      <since value="Method available since Release 3.1.0"/>
    </docblock>
    <parameter name="value" byreference="false" type="{unknown}"/>
  </method>
  <method name="matchesRegularExpression" start="2873" end="2876" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns a PHPUnit_Framework_Constraint_PCREMatch matcher object."/>
      <param type="string" variable="$pattern"/>
      <return type="object">
        <type full="PHPUnit_Framework_Constraint_PCREMatch" namespace="" name="PHPUnit_Framework_Constraint_PCREMatch"/>
      </return>
      <since value="Method available since Release 3.0.0"/>
    </docblock>
    <parameter name="pattern" byreference="false" type="{unknown}"/>
  </method>
  <method name="matches" start="2887" end="2890" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns a PHPUnit_Framework_Constraint_StringMatches matcher object."/>
      <param type="string" variable="$string"/>
      <return type="object">
        <type full="PHPUnit_Framework_Constraint_StringMatches" namespace="" name="PHPUnit_Framework_Constraint_StringMatches"/>
      </return>
      <since value="Method available since Release 3.5.0"/>
    </docblock>
    <parameter name="string" byreference="false" type="{unknown}"/>
  </method>
  <method name="stringStartsWith" start="2901" end="2904" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns a PHPUnit_Framework_Constraint_StringStartsWith matcher object."/>
      <param type="mixed" variable="$prefix"/>
      <return type="object">
        <type full="PHPUnit_Framework_Constraint_StringStartsWith" namespace="" name="PHPUnit_Framework_Constraint_StringStartsWith"/>
      </return>
      <since value="Method available since Release 3.4.0"/>
    </docblock>
    <parameter name="prefix" byreference="false" type="{unknown}"/>
  </method>
  <method name="stringContains" start="2916" end="2919" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns a PHPUnit_Framework_Constraint_StringContains matcher object."/>
      <param type="string" variable="$string"/>
      <param type="object" variable="$case">
        <type full="bool" namespace="" name="bool"/>
      </param>
      <return type="object">
        <type full="PHPUnit_Framework_Constraint_StringContains" namespace="" name="PHPUnit_Framework_Constraint_StringContains"/>
      </return>
      <since value="Method available since Release 3.0.0"/>
    </docblock>
    <parameter name="string" byreference="false" type="{unknown}"/>
    <parameter name="case" byreference="false" type="boolean" default="true"/>
  </method>
  <method name="stringEndsWith" start="2930" end="2933" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns a PHPUnit_Framework_Constraint_StringEndsWith matcher object."/>
      <param type="mixed" variable="$suffix"/>
      <return type="object">
        <type full="PHPUnit_Framework_Constraint_StringEndsWith" namespace="" name="PHPUnit_Framework_Constraint_StringEndsWith"/>
      </return>
      <since value="Method available since Release 3.4.0"/>
    </docblock>
    <parameter name="suffix" byreference="false" type="{unknown}"/>
  </method>
  <method name="countOf" start="2942" end="2945" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns a PHPUnit_Framework_Constraint_Count matcher object."/>
      <param type="int" variable="$count"/>
      <return type="object">
        <type full="PHPUnit_Framework_Constraint_Count" namespace="" name="PHPUnit_Framework_Constraint_Count"/>
      </return>
    </docblock>
    <parameter name="count" byreference="false" type="{unknown}"/>
  </method>
  <method name="fail" start="2953" end="2956" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Fails a test with the given message."/>
      <param type="string" variable="$message"/>
      <throws type="object">
        <type full="PHPUnit_Framework_AssertionFailedError" namespace="" name="PHPUnit_Framework_AssertionFailedError"/>
      </throws>
    </docblock>
    <parameter name="message" byreference="false" type="string" default="''"/>
  </method>
  <method name="readAttribute" start="2969" end="3002" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns the value of an attribute of a class or an object.">This also works for attributes that are declared protected or private.</description>
      <param type="mixed" variable="$classOrObject"/>
      <param type="string" variable="$attributeName"/>
      <return type="mixed"/>
      <throws type="object">
        <type full="PHPUnit_Framework_Exception" namespace="" name="PHPUnit_Framework_Exception"/>
      </throws>
    </docblock>
    <parameter name="classOrObject" byreference="false" type="{unknown}"/>
    <parameter name="attributeName" byreference="false" type="{unknown}"/>
  </method>
  <method name="getStaticAttribute" start="3017" end="3053" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns the value of a static attribute.">This also works for attributes that are declared protected or private.</description>
      <param type="string" variable="$className"/>
      <param type="string" variable="$attributeName"/>
      <return type="mixed"/>
      <throws type="object">
        <type full="PHPUnit_Framework_Exception" namespace="" name="PHPUnit_Framework_Exception"/>
      </throws>
      <since value="Method available since Release 4.0.0"/>
    </docblock>
    <parameter name="className" byreference="false" type="{unknown}"/>
    <parameter name="attributeName" byreference="false" type="{unknown}"/>
  </method>
  <method name="getObjectAttribute" start="3068" end="3114" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns the value of an object's attribute.">This also works for attributes that are declared protected or private.</description>
      <param type="object" variable="$object"/>
      <param type="string" variable="$attributeName"/>
      <return type="mixed"/>
      <throws type="object">
        <type full="PHPUnit_Framework_Exception" namespace="" name="PHPUnit_Framework_Exception"/>
      </throws>
      <since value="Method available since Release 4.0.0"/>
    </docblock>
    <parameter name="object" byreference="false" type="{unknown}"/>
    <parameter name="attributeName" byreference="false" type="{unknown}"/>
  </method>
  <method name="markTestIncomplete" start="3125" end="3128" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Mark the test as incomplete."/>
      <param type="string" variable="$message"/>
      <throws type="object">
        <type full="PHPUnit_Framework_IncompleteTestError" namespace="" name="PHPUnit_Framework_IncompleteTestError"/>
      </throws>
      <since value="Method available since Release 3.0.0"/>
    </docblock>
    <parameter name="message" byreference="false" type="string" default="''"/>
  </method>
  <method name="markTestSkipped" start="3139" end="3142" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Mark the test as skipped."/>
      <param type="string" variable="$message"/>
      <throws type="object">
        <type full="PHPUnit_Framework_SkippedTestError" namespace="" name="PHPUnit_Framework_SkippedTestError"/>
      </throws>
      <since value="Method available since Release 3.0.0"/>
    </docblock>
    <parameter name="message" byreference="false" type="string" default="''"/>
  </method>
  <method name="getCount" start="3151" end="3154" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Return the current assertion count."/>
      <return type="int"/>
      <since value="Method available since Release 3.3.3"/>
    </docblock>
  </method>
  <method name="resetCount" start="3161" end="3164" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Reset the assertion counter."/>
      <since value="Method available since Release 3.3.3"/>
    </docblock>
  </method>
</class>
