<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="PhpParser\Node\Name" namespace="PhpParser\Node" name="Name" abstract="false" final="false" start="7" end="220">
  <file path="/home/robert/Desktop/Hogeschool/2ejaars Development/DevBOpdrachten/project56/http/laravel/vendor/nikic/php-parser/lib/PhpParser/Node" file="Name.php" realpath="/home/robert/Desktop/Hogeschool/2ejaars Development/DevBOpdrachten/project56/http/laravel/vendor/nikic/php-parser/lib/PhpParser/Node/Name.php" size="6370" time="2015-12-17T18:44:09+00:00" unixtime="1450377849" sha1="949e19c23c0c82d8b3a0287d2d4f21a82818c47b" relative="vendor/nikic/php-parser/lib/PhpParser/Node/Name.php"/>
  <extends full="PhpParser\NodeAbstract" namespace="PhpParser" name="NodeAbstract"/>
  <member name="parts" visibility="public" line="10">
    <docblock>
      <description compact="@var string[] Parts of the name"/>
    </docblock>
  </member>
  <constructor name="__construct" start="18" end="25" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Constructs a name node."/>
      <param description="Parts of the name (or name as string)" type="object" variable="$parts">
        <type full="PhpParser\Node\string|array" namespace="PhpParser\Node" name="string|array"/>
      </param>
      <param description="Additional attributes" type="array" variable="$attributes"/>
    </docblock>
    <parameter name="parts" byreference="false" type="{unknown}"/>
    <parameter name="attributes" byreference="false" type="array" default=""/>
  </constructor>
  <method name="getSubNodeNames" start="27" end="29" abstract="false" final="false" static="false" visibility="public"/>
  <method name="getFirst" start="36" end="38" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Gets the first part of the name, i.e. everything before the first namespace separator."/>
      <return description="First part of the name" type="string"/>
    </docblock>
  </method>
  <method name="getLast" start="45" end="47" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Gets the last part of the name, i.e. everything after the last namespace separator."/>
      <return description="Last part of the name" type="string"/>
    </docblock>
  </method>
  <method name="isUnqualified" start="54" end="56" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Checks whether the name is unqualified. (E.g. Name)"/>
      <return description="Whether the name is unqualified" type="object">
        <type full="PhpParser\Node\bool" namespace="PhpParser\Node" name="bool"/>
      </return>
    </docblock>
  </method>
  <method name="isQualified" start="63" end="65" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Checks whether the name is qualified. (E.g. Name\Name)"/>
      <return description="Whether the name is qualified" type="object">
        <type full="PhpParser\Node\bool" namespace="PhpParser\Node" name="bool"/>
      </return>
    </docblock>
  </method>
  <method name="isFullyQualified" start="72" end="74" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Checks whether the name is fully qualified. (E.g. \Name)"/>
      <return description="Whether the name is fully qualified" type="object">
        <type full="PhpParser\Node\bool" namespace="PhpParser\Node" name="bool"/>
      </return>
    </docblock>
  </method>
  <method name="isRelative" start="81" end="83" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Checks whether the name is explicitly relative to the current namespace. (E.g. namespace\Name)"/>
      <return description="Whether the name is relative" type="object">
        <type full="PhpParser\Node\bool" namespace="PhpParser\Node" name="bool"/>
      </return>
    </docblock>
  </method>
  <method name="toString" start="92" end="94" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns a string representation of the name by imploding the namespace parts with a separator."/>
      <param description="The separator to use (defaults to the namespace separator \)" type="string" variable="$separator"/>
      <return description="String representation" type="string"/>
    </docblock>
    <parameter name="separator" byreference="false" type="string" default="'\\'"/>
  </method>
  <method name="__toString" start="102" end="104" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns a string representation of the name by imploding the namespace parts with the namespace separator."/>
      <return description="String representation" type="string"/>
    </docblock>
  </method>
  <method name="set" start="113" end="115" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Sets the whole name."/>
      <deprecated value="Create a new Name instead, or manually modify the $parts property"/>
      <param description="The name to set the whole name to" type="object" variable="$name">
        <type full="PhpParser\Node\string|array|self" namespace="PhpParser\Node" name="string|array|self"/>
      </param>
    </docblock>
    <parameter name="name" byreference="false" type="{unknown}"/>
  </method>
  <method name="prepend" start="124" end="126" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Prepends a name to this name."/>
      <deprecated value="Use Name::concat($name1, $name2) instead"/>
      <param description="Name to prepend" type="object" variable="$name">
        <type full="PhpParser\Node\string|array|self" namespace="PhpParser\Node" name="string|array|self"/>
      </param>
    </docblock>
    <parameter name="name" byreference="false" type="{unknown}"/>
  </method>
  <method name="append" start="135" end="137" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Appends a name to this name."/>
      <deprecated value="Use Name::concat($name1, $name2) instead"/>
      <param description="Name to append" type="object" variable="$name">
        <type full="PhpParser\Node\string|array|self" namespace="PhpParser\Node" name="string|array|self"/>
      </param>
    </docblock>
    <parameter name="name" byreference="false" type="{unknown}"/>
  </method>
  <method name="setFirst" start="146" end="148" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Sets the first part of the name."/>
      <deprecated value="Use concat($first, $name-&gt;slice(1)) instead"/>
      <param description="The name to set the first part to" type="object" variable="$name">
        <type full="PhpParser\Node\string|array|self" namespace="PhpParser\Node" name="string|array|self"/>
      </param>
    </docblock>
    <parameter name="name" byreference="false" type="{unknown}"/>
  </method>
  <method name="setLast" start="155" end="157" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Sets the last part of the name."/>
      <param description="The name to set the last part to" type="object" variable="$name">
        <type full="PhpParser\Node\string|array|self" namespace="PhpParser\Node" name="string|array|self"/>
      </param>
    </docblock>
    <parameter name="name" byreference="false" type="{unknown}"/>
  </method>
  <method name="slice" start="172" end="179" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Gets a slice of a name (similar to array_slice).">This method returns a new instance of the same type as the original and with the same
attributes.

If the slice is empty, a Name with an empty parts array is returned. While this is
meaningless in itself, it works correctly in conjunction with concat().</description>
      <param description="Offset to start the slice at" type="int" variable="$offset"/>
      <return description="Sliced name" resolution="static" type="object">
        <type full="PhpParser\Node\Name" namespace="PhpParser\Node" name="Name"/>
      </return>
    </docblock>
    <parameter name="offset" byreference="false" type="{unknown}"/>
    <inline>
      <todo value="negative offset and length" line="173"/>
    </inline>
  </method>
  <method name="concat" start="193" end="197" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Concatenate two names, yielding a new Name instance.">The type of the generated instance depends on which class this method is called on, for
example Name\FullyQualified::concat() will yield a Name\FullyQualified instance.</description>
      <param description="The first name" type="object" variable="$name1">
        <type full="PhpParser\Node\string|array|self" namespace="PhpParser\Node" name="string|array|self"/>
      </param>
      <param description="The second name" type="object" variable="$name2">
        <type full="PhpParser\Node\string|array|self" namespace="PhpParser\Node" name="string|array|self"/>
      </param>
      <param description="Attributes to assign to concatenated name" type="array" variable="$attributes"/>
      <return description="Concatenated name" resolution="static" type="object">
        <type full="PhpParser\Node\Name" namespace="PhpParser\Node" name="Name"/>
      </return>
    </docblock>
    <parameter name="name1" byreference="false" type="{unknown}"/>
    <parameter name="name2" byreference="false" type="{unknown}"/>
    <parameter name="attributes" byreference="false" type="array" default=""/>
  </method>
  <method name="prepareName" start="207" end="219" abstract="false" final="false" static="true" visibility="private">
    <docblock>
      <description compact="Prepares a (string, array or Name node) name for use in name changing methods by converting it to an array."/>
      <param description="Name to prepare" type="object" variable="$name">
        <type full="PhpParser\Node\string|array|self" namespace="PhpParser\Node" name="string|array|self"/>
      </param>
      <return description="Prepared name" type="array"/>
    </docblock>
    <parameter name="name" byreference="false" type="{unknown}"/>
  </method>
</class>
