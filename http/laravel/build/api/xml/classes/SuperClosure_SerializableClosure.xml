<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="SuperClosure\SerializableClosure" namespace="SuperClosure" name="SerializableClosure" abstract="false" final="false" start="13" end="168">
  <file path="/home/robert/Desktop/Hogeschool/2ejaars Development/DevBOpdrachten/project56/http/laravel/vendor/jeremeamia/SuperClosure/src" file="SerializableClosure.php" realpath="/home/robert/Desktop/Hogeschool/2ejaars Development/DevBOpdrachten/project56/http/laravel/vendor/jeremeamia/SuperClosure/src/SerializableClosure.php" size="6830" time="2015-12-17T18:44:09+00:00" unixtime="1450377849" sha1="3827ced8a02a489d7a324fa4bea6dbec02874ca2" relative="vendor/jeremeamia/SuperClosure/src/SerializableClosure.php"/>
  <docblock>
    <description compact="This class acts as a wrapper for a closure, and allows it to be serialized.">With the combined power of the Reflection API, code parsing, and the infamous
`eval()` function, you can serialize a closure, unserialize it somewhere
else (even a different PHP process), and execute it.</description>
  </docblock>
  <implements full="Serializable" namespace="" name="Serializable"/>
  <member name="closure" visibility="private" line="20">
    <docblock>
      <description compact="The closure being wrapped for serialization."/>
      <var type="object">
        <type full="Closure" namespace="" name="Closure"/>
      </var>
    </docblock>
  </member>
  <member name="serializer" visibility="private" line="27">
    <docblock>
      <description compact="The serializer doing the serialization work."/>
      <var type="object">
        <type full="SuperClosure\SerializerInterface" namespace="SuperClosure" name="SerializerInterface"/>
      </var>
    </docblock>
  </member>
  <member name="data" visibility="private" line="34">
    <docblock>
      <description compact="The data from unserialization."/>
      <var type="array"/>
    </docblock>
  </member>
  <constructor name="__construct" start="42" end="48" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Create a new serializable closure instance."/>
      <param type="object" variable="$closure">
        <type full="Closure" namespace="" name="Closure"/>
      </param>
      <param type="object" variable="$serializer">
        <type full="SuperClosure\SerializerInterface|null" namespace="SuperClosure" name="SerializerInterface|null"/>
      </param>
    </docblock>
    <parameter name="closure" byreference="false" type="object">
      <type full="Closure" namespace="" name="Closure"/>
    </parameter>
    <parameter name="serializer" byreference="false" type="{unknown}" default="" constant="null">
      <type full="SuperClosure\SerializerInterface" namespace="SuperClosure" name="SerializerInterface"/>
    </parameter>
  </constructor>
  <method name="getClosure" start="55" end="58" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Return the original closure object."/>
      <return type="object">
        <type full="Closure" namespace="" name="Closure"/>
      </return>
    </docblock>
  </method>
  <method name="__invoke" start="73" end="76" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Delegates the closure invocation to the actual closure object.">Important Notes:

- `ReflectionFunction::invokeArgs()` should not be used here, because it
  does not work with closure bindings.
- Args passed-by-reference lose their references when proxied through
  `__invoke()`. This is an unfortunate, but understandable, limitation
  of PHP that will probably never change.</description>
      <return type="mixed"/>
    </docblock>
  </method>
  <method name="bindTo" start="94" end="100" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Clones the SerializableClosure with a new bound object and class scope.">The method is essentially a wrapped proxy to the Closure::bindTo method.</description>
      <param description="The object to which the closure should be bound," type="mixed" variable="$newthis">or NULL for the closure to be unbound.</param>
      <param description="The class scope to which the closure is to be" type="mixed" variable="$newscope">associated, or 'static' to keep the current one.
                       If an object is given, the type of the object will
                       be used instead. This determines the visibility of
                       protected and private methods of the bound object.</param>
      <return type="object">
        <type full="SuperClosure\SerializableClosure" namespace="SuperClosure" name="SerializableClosure"/>
      </return>
      <link value="http://www.php.net/manual/en/closure.bindto.php"/>
    </docblock>
    <parameter name="newthis" byreference="false" type="{unknown}"/>
    <parameter name="newscope" byreference="false" type="string" default="'static'"/>
  </method>
  <method name="serialize" start="108" end="122" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Serializes the code, context, and binding of the closure."/>
      <return type="object">
        <type full="SuperClosure\string|null" namespace="SuperClosure" name="string|null"/>
      </return>
      <link value="http://php.net/manual/en/serializable.serialize.php"/>
    </docblock>
  </method>
  <method name="unserialize" start="137" end="157" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Unserializes the closure.">Unserializes the closure's data and recreates the closure using a
simulation of its original context. The used variables (context) are
extracted into a fresh scope prior to redefining the closure. The
closure is also rebound to its former object and scope.</description>
      <param type="string" variable="$serialized"/>
      <throws type="object">
        <type full="SuperClosure\Exception\ClosureUnserializationException" namespace="SuperClosure\Exception" name="ClosureUnserializationException"/>
      </throws>
      <link value="http://php.net/manual/en/serializable.unserialize.php"/>
    </docblock>
    <parameter name="serialized" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="Unserialize the closure data and reconstruct the closure object." line="139"/>
      <comment value="Throw an exception if the closure could not be reconstructed." line="143"/>
      <comment value="Rebind the closure to its former binding and scope." line="150"/>
    </inline>
  </method>
  <method name="__debugInfo" start="164" end="167" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns closure data for `var_dump()`."/>
      <return type="array"/>
    </docblock>
  </method>
</class>
