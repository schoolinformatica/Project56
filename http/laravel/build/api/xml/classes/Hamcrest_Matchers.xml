<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="Hamcrest\Matchers" namespace="Hamcrest" name="Matchers" abstract="false" final="false" start="14" end="713">
  <file path="/home/robert/Desktop/Hogeschool/2ejaars Development/DevBOpdrachten/project56/http/laravel/vendor/hamcrest/hamcrest-php/hamcrest/Hamcrest" file="Matchers.php" realpath="/home/robert/Desktop/Hogeschool/2ejaars Development/DevBOpdrachten/project56/http/laravel/vendor/hamcrest/hamcrest-php/hamcrest/Hamcrest/Matchers.php" size="18961" time="2015-12-17T18:44:09+00:00" unixtime="1450377849" sha1="0244d9185ebd53eb0b3115a3ff672fb2735f3f75" relative="vendor/hamcrest/hamcrest-php/hamcrest/Hamcrest/Matchers.php"/>
  <docblock>
    <description compact="A series of static factories for all hamcrest matchers."/>
  </docblock>
  <method name="anArray" start="20" end="24" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Evaluates to true only if each $matcher[$i] is satisfied by $array[$i]."/>
    </docblock>
  </method>
  <method name="hasItemInArray" start="33" end="36" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Evaluates to true if any item in an array satisfies the given matcher."/>
      <param description="as a {@link Hamcrest\Matcher} or a value." type="mixed" variable="$item"/>
      <return type="object">
        <type full="\Hamcrest\Arrays\IsArrayContaining" namespace="\Hamcrest\Arrays" name="IsArrayContaining"/>
      </return>
    </docblock>
    <parameter name="item" byreference="false" type="{unknown}"/>
  </method>
  <method name="hasValue" start="45" end="48" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Evaluates to true if any item in an array satisfies the given matcher."/>
      <param description="as a {@link Hamcrest\Matcher} or a value." type="mixed" variable="$item"/>
      <return type="object">
        <type full="\Hamcrest\Arrays\IsArrayContaining" namespace="\Hamcrest\Arrays" name="IsArrayContaining"/>
      </return>
    </docblock>
    <parameter name="item" byreference="false" type="{unknown}"/>
  </method>
  <method name="arrayContainingInAnyOrder" start="53" end="57" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="An array with elements that match the given matchers."/>
    </docblock>
  </method>
  <method name="containsInAnyOrder" start="62" end="66" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="An array with elements that match the given matchers."/>
    </docblock>
  </method>
  <method name="arrayContaining" start="71" end="75" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="An array with elements that match the given matchers in the same order."/>
    </docblock>
  </method>
  <method name="contains" start="80" end="84" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="An array with elements that match the given matchers in the same order."/>
    </docblock>
  </method>
  <method name="hasKeyInArray" start="93" end="96" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Evaluates to true if any key in an array matches the given matcher."/>
      <param description="as a {@link Hamcrest\Matcher} or a value." type="mixed" variable="$key"/>
      <return type="object">
        <type full="\Hamcrest\Arrays\IsArrayContainingKey" namespace="\Hamcrest\Arrays" name="IsArrayContainingKey"/>
      </return>
    </docblock>
    <parameter name="key" byreference="false" type="{unknown}"/>
  </method>
  <method name="hasKey" start="105" end="108" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Evaluates to true if any key in an array matches the given matcher."/>
      <param description="as a {@link Hamcrest\Matcher} or a value." type="mixed" variable="$key"/>
      <return type="object">
        <type full="\Hamcrest\Arrays\IsArrayContainingKey" namespace="\Hamcrest\Arrays" name="IsArrayContainingKey"/>
      </return>
    </docblock>
    <parameter name="key" byreference="false" type="{unknown}"/>
  </method>
  <method name="hasKeyValuePair" start="113" end="116" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Test if an array has both an key and value in parity with each other."/>
    </docblock>
    <parameter name="key" byreference="false" type="{unknown}"/>
    <parameter name="value" byreference="false" type="{unknown}"/>
  </method>
  <method name="hasEntry" start="121" end="124" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Test if an array has both an key and value in parity with each other."/>
    </docblock>
    <parameter name="key" byreference="false" type="{unknown}"/>
    <parameter name="value" byreference="false" type="{unknown}"/>
  </method>
  <method name="arrayWithSize" start="133" end="136" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Does array size satisfy a given matcher?"/>
      <param description="as a {@link Hamcrest\Matcher} or a value." type="object" variable="$size">
        <type full="\Hamcrest\Matcher|int" namespace="\Hamcrest" name="Matcher|int"/>
      </param>
      <return type="object">
        <type full="\Hamcrest\Arrays\IsArrayWithSize" namespace="\Hamcrest\Arrays" name="IsArrayWithSize"/>
      </return>
    </docblock>
    <parameter name="size" byreference="false" type="{unknown}"/>
  </method>
  <method name="emptyArray" start="141" end="144" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Matches an empty array."/>
    </docblock>
  </method>
  <method name="nonEmptyArray" start="149" end="152" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Matches an empty array."/>
    </docblock>
  </method>
  <method name="emptyTraversable" start="157" end="160" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns true if traversable is empty."/>
    </docblock>
  </method>
  <method name="nonEmptyTraversable" start="165" end="168" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns true if traversable is not empty."/>
    </docblock>
  </method>
  <method name="traversableWithSize" start="173" end="176" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Does traversable size satisfy a given matcher?"/>
    </docblock>
    <parameter name="size" byreference="false" type="{unknown}"/>
  </method>
  <method name="allOf" start="181" end="185" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Evaluates to true only if ALL of the passed in matchers evaluate to true."/>
    </docblock>
  </method>
  <method name="anyOf" start="190" end="194" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Evaluates to true if ANY of the passed in matchers evaluate to true."/>
    </docblock>
  </method>
  <method name="noneOf" start="199" end="203" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Evaluates to false if ANY of the passed in matchers evaluate to true."/>
    </docblock>
  </method>
  <method name="both" start="212" end="215" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="This is useful for fluently combining matchers that must both pass.">For example:
&lt;pre&gt;
  assertThat($string, both(containsString("a"))-&gt;andAlso(containsString("b")));
&lt;/pre&gt;</description>
    </docblock>
    <parameter name="matcher" byreference="false" type="object">
      <type full="Hamcrest\Matcher" namespace="Hamcrest" name="Matcher"/>
    </parameter>
  </method>
  <method name="either" start="224" end="227" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="This is useful for fluently combining matchers where either may pass, for example: &lt;pre&gt;   assertThat($string, either(containsString(&quot;a&quot;))-&gt;orElse(containsString(&quot;b&quot;))); &lt;/pre&gt;"/>
    </docblock>
    <parameter name="matcher" byreference="false" type="object">
      <type full="Hamcrest\Matcher" namespace="Hamcrest" name="Matcher"/>
    </parameter>
  </method>
  <method name="describedAs" start="232" end="236" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Wraps an existing matcher and overrides the description when it fails."/>
    </docblock>
  </method>
  <method name="everyItem" start="245" end="248" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description/>
      <param type="object" variable="$itemMatcher">A matcher to apply to every element in an array.<type full="Hamcrest\Matcher" namespace="Hamcrest" name="Matcher"/></param>
      <return type="object">Evaluates to TRUE for a collection in which every item matches $itemMatcher<type full="\Hamcrest\Core\Every" namespace="\Hamcrest\Core" name="Every"/></return>
    </docblock>
    <parameter name="itemMatcher" byreference="false" type="object">
      <type full="Hamcrest\Matcher" namespace="Hamcrest" name="Matcher"/>
    </parameter>
  </method>
  <method name="hasToString" start="253" end="256" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Does array size satisfy a given matcher?"/>
    </docblock>
    <parameter name="matcher" byreference="false" type="{unknown}"/>
  </method>
  <method name="is" start="265" end="268" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Decorates another Matcher, retaining the behavior but allowing tests to be slightly more expressive.">For example:  assertThat($cheese, equalTo($smelly))
         vs.  assertThat($cheese, is(equalTo($smelly)))</description>
    </docblock>
    <parameter name="value" byreference="false" type="{unknown}"/>
  </method>
  <method name="anything" start="277" end="280" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="This matcher always evaluates to true."/>
      <param description="A meaningful string used when describing itself." type="string" variable="$description"/>
      <return type="object">
        <type full="\Hamcrest\Core\IsAnything" namespace="\Hamcrest\Core" name="IsAnything"/>
      </return>
    </docblock>
    <parameter name="description" byreference="false" type="string" default="'ANYTHING'"/>
  </method>
  <method name="hasItem" start="292" end="296" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Test if the value is an array containing this matcher.">Example:
&lt;pre&gt;
assertThat(array('a', 'b'), hasItem(equalTo('b')));
//Convenience defaults to equalTo()
assertThat(array('a', 'b'), hasItem('b'));
&lt;/pre&gt;</description>
    </docblock>
  </method>
  <method name="hasItems" start="307" end="311" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Test if the value is an array containing elements that match all of these matchers.">Example:
&lt;pre&gt;
assertThat(array('a', 'b', 'c'), hasItems(equalTo('a'), equalTo('b')));
&lt;/pre&gt;</description>
    </docblock>
  </method>
  <method name="equalTo" start="317" end="320" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Is the value equal to another value, as tested by the use of the &quot;==&quot; comparison operator?"/>
    </docblock>
    <parameter name="item" byreference="false" type="{unknown}"/>
  </method>
  <method name="identicalTo" start="325" end="328" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Tests of the value is identical to $value as tested by the &quot;===&quot; operator."/>
    </docblock>
    <parameter name="value" byreference="false" type="{unknown}"/>
  </method>
  <method name="anInstanceOf" start="336" end="339" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Is the value an instance of a particular type? This version assumes no relationship between the required type and the signature of the method that sets it up, for example in &lt;code&gt;assertThat($anObject, anInstanceOf('Thing'));&lt;/code&gt;"/>
    </docblock>
    <parameter name="theClass" byreference="false" type="{unknown}"/>
  </method>
  <method name="any" start="347" end="350" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Is the value an instance of a particular type? This version assumes no relationship between the required type and the signature of the method that sets it up, for example in &lt;code&gt;assertThat($anObject, anInstanceOf('Thing'));&lt;/code&gt;"/>
    </docblock>
    <parameter name="theClass" byreference="false" type="{unknown}"/>
  </method>
  <method name="not" start="355" end="358" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Matches if value does not match $value."/>
    </docblock>
    <parameter name="value" byreference="false" type="{unknown}"/>
  </method>
  <method name="nullValue" start="363" end="366" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Matches if value is null."/>
    </docblock>
  </method>
  <method name="notNullValue" start="371" end="374" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Matches if value is not null."/>
    </docblock>
  </method>
  <method name="sameInstance" start="385" end="388" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Creates a new instance of IsSame."/>
      <param type="mixed" variable="$object">The predicate evaluates to true only when the argument is
  this object.</param>
      <return type="object">
        <type full="\Hamcrest\Core\IsSame" namespace="\Hamcrest\Core" name="IsSame"/>
      </return>
    </docblock>
    <parameter name="object" byreference="false" type="{unknown}"/>
  </method>
  <method name="typeOf" start="393" end="396" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Is the value a particular built-in type?"/>
    </docblock>
    <parameter name="theType" byreference="false" type="{unknown}"/>
  </method>
  <method name="set" start="401" end="404" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Matches if value (class, object, or array) has named $property."/>
    </docblock>
    <parameter name="property" byreference="false" type="{unknown}"/>
  </method>
  <method name="notSet" start="409" end="412" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Matches if value (class, object, or array) does not have named $property."/>
    </docblock>
    <parameter name="property" byreference="false" type="{unknown}"/>
  </method>
  <method name="closeTo" start="418" end="421" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Matches if value is a number equal to $value within some range of acceptable error $delta."/>
    </docblock>
    <parameter name="value" byreference="false" type="{unknown}"/>
    <parameter name="delta" byreference="false" type="{unknown}"/>
  </method>
  <method name="comparesEqualTo" start="426" end="429" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="The value is not &gt; $value, nor &lt; $value."/>
    </docblock>
    <parameter name="value" byreference="false" type="{unknown}"/>
  </method>
  <method name="greaterThan" start="434" end="437" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="The value is &gt; $value."/>
    </docblock>
    <parameter name="value" byreference="false" type="{unknown}"/>
  </method>
  <method name="greaterThanOrEqualTo" start="442" end="445" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="The value is &gt;= $value."/>
    </docblock>
    <parameter name="value" byreference="false" type="{unknown}"/>
  </method>
  <method name="atLeast" start="450" end="453" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="The value is &gt;= $value."/>
    </docblock>
    <parameter name="value" byreference="false" type="{unknown}"/>
  </method>
  <method name="lessThan" start="458" end="461" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="The value is &lt; $value."/>
    </docblock>
    <parameter name="value" byreference="false" type="{unknown}"/>
  </method>
  <method name="lessThanOrEqualTo" start="466" end="469" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="The value is &lt;= $value."/>
    </docblock>
    <parameter name="value" byreference="false" type="{unknown}"/>
  </method>
  <method name="atMost" start="474" end="477" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="The value is &lt;= $value."/>
    </docblock>
    <parameter name="value" byreference="false" type="{unknown}"/>
  </method>
  <method name="isEmptyString" start="482" end="485" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Matches if value is a zero-length string."/>
    </docblock>
  </method>
  <method name="emptyString" start="490" end="493" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Matches if value is a zero-length string."/>
    </docblock>
  </method>
  <method name="isEmptyOrNullString" start="498" end="501" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Matches if value is null or a zero-length string."/>
    </docblock>
  </method>
  <method name="nullOrEmptyString" start="506" end="509" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Matches if value is null or a zero-length string."/>
    </docblock>
  </method>
  <method name="isNonEmptyString" start="514" end="517" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Matches if value is a non-zero-length string."/>
    </docblock>
  </method>
  <method name="nonEmptyString" start="522" end="525" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Matches if value is a non-zero-length string."/>
    </docblock>
  </method>
  <method name="equalToIgnoringCase" start="530" end="533" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Matches if value is a string equal to $string, regardless of the case."/>
    </docblock>
    <parameter name="string" byreference="false" type="{unknown}"/>
  </method>
  <method name="equalToIgnoringWhiteSpace" start="538" end="541" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Matches if value is a string equal to $string, regardless of whitespace."/>
    </docblock>
    <parameter name="string" byreference="false" type="{unknown}"/>
  </method>
  <method name="matchesPattern" start="546" end="549" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Matches if value is a string that matches regular expression $pattern."/>
    </docblock>
    <parameter name="pattern" byreference="false" type="{unknown}"/>
  </method>
  <method name="containsString" start="554" end="557" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Matches if value is a string that contains $substring."/>
    </docblock>
    <parameter name="substring" byreference="false" type="{unknown}"/>
  </method>
  <method name="containsStringIgnoringCase" start="562" end="565" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Matches if value is a string that contains $substring regardless of the case."/>
    </docblock>
    <parameter name="substring" byreference="false" type="{unknown}"/>
  </method>
  <method name="stringContainsInOrder" start="570" end="574" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Matches if value contains $substrings in a constrained order."/>
    </docblock>
  </method>
  <method name="endsWith" start="579" end="582" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Matches if value is a string that ends with $substring."/>
    </docblock>
    <parameter name="substring" byreference="false" type="{unknown}"/>
  </method>
  <method name="startsWith" start="587" end="590" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Matches if value is a string that starts with $substring."/>
    </docblock>
    <parameter name="substring" byreference="false" type="{unknown}"/>
  </method>
  <method name="arrayValue" start="595" end="598" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Is the value an array?"/>
    </docblock>
  </method>
  <method name="booleanValue" start="603" end="606" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Is the value a boolean?"/>
    </docblock>
  </method>
  <method name="boolValue" start="611" end="614" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Is the value a boolean?"/>
    </docblock>
  </method>
  <method name="callableValue" start="619" end="622" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Is the value callable?"/>
    </docblock>
  </method>
  <method name="doubleValue" start="627" end="630" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Is the value a float/double?"/>
    </docblock>
  </method>
  <method name="floatValue" start="635" end="638" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Is the value a float/double?"/>
    </docblock>
  </method>
  <method name="integerValue" start="643" end="646" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Is the value an integer?"/>
    </docblock>
  </method>
  <method name="intValue" start="651" end="654" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Is the value an integer?"/>
    </docblock>
  </method>
  <method name="numericValue" start="659" end="662" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Is the value a numeric?"/>
    </docblock>
  </method>
  <method name="objectValue" start="667" end="670" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Is the value an object?"/>
    </docblock>
  </method>
  <method name="anObject" start="675" end="678" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Is the value an object?"/>
    </docblock>
  </method>
  <method name="resourceValue" start="683" end="686" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Is the value a resource?"/>
    </docblock>
  </method>
  <method name="scalarValue" start="691" end="694" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Is the value a scalar (boolean, integer, double, or string)?"/>
    </docblock>
  </method>
  <method name="stringValue" start="699" end="702" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Is the value a string?"/>
    </docblock>
  </method>
  <method name="hasXPath" start="709" end="712" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Wraps &lt;code&gt;$matcher&lt;/code&gt; with {@link Hamcrest\Core\IsEqual) if it's not a matcher and the XPath in &lt;code&gt;count()&lt;/code&gt; if it's an integer."/>
    </docblock>
    <parameter name="xpath" byreference="false" type="{unknown}"/>
    <parameter name="matcher" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
</class>
