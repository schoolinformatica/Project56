<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="Faker\Provider\Text" namespace="Faker\Provider" name="Text" abstract="true" final="false" start="5" end="137">
  <file path="/home/robert/Desktop/Hogeschool/2ejaars Development/DevBOpdrachten/project56/http/laravel/vendor/fzaninotto/faker/src/Faker/Provider" file="Text.php" realpath="/home/robert/Desktop/Hogeschool/2ejaars Development/DevBOpdrachten/project56/http/laravel/vendor/fzaninotto/faker/src/Faker/Provider/Text.php" size="4543" time="2015-12-17T18:44:09+00:00" unixtime="1450377849" sha1="dbc6c8dec3006accfdd2d514f2f35ab8e8a1204c" relative="vendor/fzaninotto/faker/src/Faker/Provider/Text.php"/>
  <extends full="Faker\Provider\Base" namespace="Faker\Provider" name="Base"/>
  <member name="baseText" type="string" default="''" visibility="protected" line="7"/>
  <member name="separator" type="string" default="' '" visibility="protected" line="8"/>
  <member name="separatorLen" type="integer" default="1" visibility="protected" line="9"/>
  <member name="explodedText" type="{unknown}" default="" constant="null" visibility="protected" line="10"/>
  <member name="consecutiveWords" type="array" default="" visibility="protected" line="11"/>
  <method name="realText" start="28" end="75" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Generate a text string by the Markov chain algorithm.">Depending on the $maxNbChars, returns a random valid looking text. The algorithm
generates a weighted table with the specified number of words as the index and the
possible following words as the value.</description>
      <example value="'Alice, swallowing down her flamingo, and began by taking the little golden key'"/>
      <param description="Maximum number of characters the text should contain (minimum: 10)" type="integer" variable="$maxNbChars"/>
      <param description="Determines how many words are considered for the generation of the next word." type="integer" variable="$indexSize">The minimum is 1, and it produces the higher level of randomness, although the
                            generated text usually doesn't make sense. Higher index sizes (up to 5)
                            produce more correct text, at the price of less randomness.</param>
      <return type="string"/>
    </docblock>
    <parameter name="maxNbChars" byreference="false" type="integer" default="200"/>
    <parameter name="indexSize" byreference="false" type="integer" default="2"/>
    <inline>
      <comment value="take a random starting point" line="46"/>
      <comment value="remove the element that caused the text to overflow" line="68"/>
      <comment value="build result" line="71"/>
    </inline>
  </method>
  <method name="getConsecutiveWords" start="77" end="102" abstract="false" final="false" static="false" visibility="protected">
    <parameter name="indexSize" byreference="false" type="{unknown}"/>
  </method>
  <method name="getExplodedText" start="104" end="111" abstract="false" final="false" static="false" visibility="protected"/>
  <method name="explode" start="113" end="116" abstract="false" final="false" static="true" visibility="protected">
    <parameter name="text" byreference="false" type="{unknown}"/>
  </method>
  <method name="implode" start="118" end="121" abstract="false" final="false" static="true" visibility="protected">
    <parameter name="words" byreference="false" type="{unknown}"/>
  </method>
  <method name="strlen" start="123" end="126" abstract="false" final="false" static="true" visibility="protected">
    <parameter name="text" byreference="false" type="{unknown}"/>
  </method>
  <method name="validStart" start="128" end="131" abstract="false" final="false" static="true" visibility="protected">
    <parameter name="word" byreference="false" type="{unknown}"/>
  </method>
  <method name="appendEnd" start="133" end="136" abstract="false" final="false" static="true" visibility="protected">
    <parameter name="text" byreference="false" type="{unknown}"/>
  </method>
</class>
