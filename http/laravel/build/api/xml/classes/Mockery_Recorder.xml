<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="Mockery\Recorder" namespace="Mockery" name="Recorder" abstract="false" final="false" start="23" end="103">
  <file path="/home/robert/Desktop/Hogeschool/2ejaars Development/DevBOpdrachten/project56/http/laravel/vendor/mockery/mockery/library/Mockery" file="Recorder.php" realpath="/home/robert/Desktop/Hogeschool/2ejaars Development/DevBOpdrachten/project56/http/laravel/vendor/mockery/mockery/library/Mockery/Recorder.php" size="3056" time="2015-12-17T18:44:09+00:00" unixtime="1450377849" sha1="2f4b385d9ef2bd1b6088bf11574d0bcb37a2515d" relative="vendor/mockery/mockery/library/Mockery/Recorder.php"/>
  <member name="_mock" type="{unknown}" default="" constant="null" visibility="protected" line="32">
    <docblock>
      <description compact="Mock object on which all recorded interactions will be set as expectations"/>
      <var type="object"/>
    </docblock>
  </member>
  <member name="_subject" type="{unknown}" default="" constant="null" visibility="protected" line="39">
    <docblock>
      <description compact="The subject object whose interactions are being recorded"/>
      <var type="object"/>
    </docblock>
  </member>
  <member name="_strict" type="boolean" default="false" visibility="protected" line="49">
    <docblock>
      <description compact="Flag indicating whether the recording should maintain a strict adherence to the recorded interactions, i.e. the usual Mockery flexibility is suspended, ordering is enforced, and arguments received are set as exact requirements."/>
      <var type="object">
        <type full="Mockery\bool" namespace="Mockery" name="bool"/>
      </var>
    </docblock>
  </member>
  <constructor name="__construct" start="60" end="64" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Construct accepting the mock object on which expectations are to be recorded. The second parameter is the subject object, passed into a \Mockery::mock() call in the same way as a partial mock requires."/>
      <param type="object" variable="$mock">
        <type full="\Mockery\MockInterface" namespace="\Mockery" name="MockInterface"/>
      </param>
      <param type="object" variable="$subject"/>
      <return type="object">
        <type full="Mockery\void" namespace="Mockery" name="void"/>
      </return>
    </docblock>
    <parameter name="mock" byreference="false" type="object">
      <type full="Mockery\MockInterface" namespace="Mockery" name="MockInterface"/>
    </parameter>
    <parameter name="subject" byreference="false" type="{unknown}"/>
  </constructor>
  <method name="shouldBeStrict" start="73" end="76" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Sets the recorded into strict mode where method calls are more strictly matched against the argument and call count and ordering is also set as enforceable."/>
      <return type="object">
        <type full="Mockery\void" namespace="Mockery" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="__call" start="87" end="102" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Intercept all calls on the subject, and use the call details to create a new expectation. The actual return value is then returned after being recorded."/>
      <param type="string" variable="$method"/>
      <param type="array" variable="$args"/>
      <return type="mixed"/>
    </docblock>
    <parameter name="method" byreference="false" type="{unknown}"/>
    <parameter name="args" byreference="false" type="array"/>
  </method>
</class>
