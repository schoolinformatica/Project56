<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="Mockery\Container" namespace="Mockery" name="Container" abstract="false" final="false" start="27" end="524">
  <file path="/home/robert/Desktop/Hogeschool/2ejaars Development/DevBOpdrachten/project56/http/laravel/vendor/mockery/mockery/library/Mockery" file="Container.php" realpath="/home/robert/Desktop/Hogeschool/2ejaars Development/DevBOpdrachten/project56/http/laravel/vendor/mockery/mockery/library/Mockery/Container.php" size="15090" time="2015-12-17T18:44:09+00:00" unixtime="1450377849" sha1="d207e8882d57ae2efbfa11bd147f483f5f9ff2e0" relative="vendor/mockery/mockery/library/Mockery/Container.php"/>
  <constant type="{unknown}" name="BLOCKS" value="" constant="Mockery::BLOCKS"/>
  <member name="_mocks" type="array" default="" visibility="protected" line="36">
    <docblock>
      <description compact="Store of mock objects"/>
      <var type="array"/>
    </docblock>
  </member>
  <member name="_allocatedOrder" type="integer" default="0" visibility="protected" line="43">
    <docblock>
      <description compact="Order number of allocation"/>
      <var type="int"/>
    </docblock>
  </member>
  <member name="_currentOrder" type="integer" default="0" visibility="protected" line="50">
    <docblock>
      <description compact="Current ordered number"/>
      <var type="int"/>
    </docblock>
  </member>
  <member name="_groups" type="array" default="" visibility="protected" line="57">
    <docblock>
      <description compact="Ordered groups"/>
      <var type="array"/>
    </docblock>
  </member>
  <member name="_generator" visibility="protected" line="62">
    <docblock>
      <description/>
      <var type="object">
        <type full="Mockery\Generator\Generator" namespace="Mockery\Generator" name="Generator"/>
      </var>
    </docblock>
  </member>
  <member name="_loader" visibility="protected" line="67">
    <docblock>
      <description/>
      <var type="object">
        <type full="Mockery\Loader\Loader" namespace="Mockery\Loader" name="Loader"/>
      </var>
    </docblock>
  </member>
  <member name="_namedMocks" type="array" default="" visibility="protected" line="72">
    <docblock>
      <description/>
      <var type="array"/>
    </docblock>
  </member>
  <constructor name="__construct" start="74" end="78" abstract="false" final="false" static="false" visibility="public">
    <parameter name="generator" byreference="false" type="{unknown}" default="" constant="null">
      <type full="Mockery\Generator\Generator" namespace="Mockery\Generator" name="Generator"/>
    </parameter>
    <parameter name="loader" byreference="false" type="{unknown}" default="" constant="null">
      <type full="Mockery\Loader\Loader" namespace="Mockery\Loader" name="Loader"/>
    </parameter>
  </constructor>
  <method name="mock" start="92" end="232" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Generates a new mock object for this container">I apologies in advance for this. A God Method just fits the API which
doesn't require differentiating between classes, interfaces, abstracts,
names or partials - just so long as it's something that can be mocked.
I'll refactor it one day so it's easier to follow.</description>
      <throws type="object">
        <type full="Mockery\Exception\RuntimeException" namespace="Mockery\Exception" name="RuntimeException"/>
      </throws>
      <throws type="object">
        <type full="Mockery\Exception" namespace="Mockery" name="Exception"/>
      </throws>
      <return type="object">
        <type full="\Mockery\Mock" namespace="\Mockery" name="Mock"/>
      </return>
    </docblock>
  </method>
  <method name="instanceMock" start="234" end="236" abstract="false" final="false" static="false" visibility="public"/>
  <method name="getLoader" start="238" end="241" abstract="false" final="false" static="false" visibility="public"/>
  <method name="getGenerator" start="243" end="246" abstract="false" final="false" static="false" visibility="public"/>
  <method name="getKeyOfDemeterMockFor" start="252" end="263" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <param type="string" variable="$method"/>
      <return type="object">
        <type full="Mockery\string|null" namespace="Mockery" name="string|null"/>
      </return>
    </docblock>
    <parameter name="method" byreference="false" type="{unknown}"/>
  </method>
  <method name="getMocks" start="268" end="271" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <return type="array"/>
    </docblock>
  </method>
  <method name="mockery_teardown" start="279" end="287" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Tear down tasks for this container"/>
      <throws type="object">
        <type full="\Exception" namespace="" name="Exception"/>
      </throws>
      <return type="object">
        <type full="Mockery\void" namespace="Mockery" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="mockery_verify" start="294" end="299" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Verify the container mocks"/>
      <return type="object">
        <type full="Mockery\void" namespace="Mockery" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="mockery_close" start="306" end="312" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Reset the container to its original state"/>
      <return type="object">
        <type full="Mockery\void" namespace="Mockery" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="mockery_allocateOrder" start="319" end="323" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Fetch the next available allocation order number"/>
      <return type="int"/>
    </docblock>
  </method>
  <method name="mockery_setGroup" start="331" end="334" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Set ordering for a group"/>
      <param type="mixed" variable="$group"/>
      <param type="int" variable="$order"/>
    </docblock>
    <parameter name="group" byreference="false" type="{unknown}"/>
    <parameter name="order" byreference="false" type="{unknown}"/>
  </method>
  <method name="mockery_getGroups" start="341" end="344" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Fetch array of ordered groups"/>
      <return type="array"/>
    </docblock>
  </method>
  <method name="mockery_setCurrentOrder" start="352" end="356" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Set current ordered number"/>
      <param type="int" variable="$order"/>
      <return description="The current order number that was set" type="int"/>
    </docblock>
    <parameter name="order" byreference="false" type="{unknown}"/>
  </method>
  <method name="mockery_getCurrentOrder" start="363" end="366" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get current ordered number"/>
      <return type="int"/>
    </docblock>
  </method>
  <method name="mockery_validateOrder" start="376" end="390" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Validate the current mock's ordering"/>
      <param type="string" variable="$method"/>
      <param type="int" variable="$order"/>
      <throws type="object">
        <type full="\Mockery\Exception" namespace="\Mockery" name="Exception"/>
      </throws>
      <return type="object">
        <type full="Mockery\void" namespace="Mockery" name="void"/>
      </return>
    </docblock>
    <parameter name="method" byreference="false" type="{unknown}"/>
    <parameter name="order" byreference="false" type="{unknown}"/>
    <parameter name="mock" byreference="false" type="object">
      <type full="Mockery\MockInterface" namespace="Mockery" name="MockInterface"/>
    </parameter>
  </method>
  <method name="mockery_getExpectationCount" start="397" end="404" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Gets the count of expectations on the mocks"/>
      <return type="int"/>
    </docblock>
  </method>
  <method name="rememberMock" start="412" end="424" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Store a mock and set its container reference"/>
      <param type="object">
        <type full="\Mockery\Mock" namespace="\Mockery" name="Mock"/>
      </param>
      <return type="object">
        <type full="\Mockery\Mock" namespace="\Mockery" name="Mock"/>
      </return>
    </docblock>
    <parameter name="mock" byreference="false" type="object">
      <type full="Mockery\MockInterface" namespace="Mockery" name="MockInterface"/>
    </parameter>
  </method>
  <method name="self" start="434" end="439" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Retrieve the last remembered mock object, which is the same as saying retrieve the current mock being programmed where you have yet to call mock() to change it - thus why the method name is &quot;self&quot; since it will be be used during the programming of the same mock."/>
      <return type="object">
        <type full="\Mockery\Mock" namespace="\Mockery" name="Mock"/>
      </return>
    </docblock>
  </method>
  <method name="fetchMock" start="447" end="452" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Return a specific remembered mock according to the array index it was stored to in this container instance"/>
      <return type="object">
        <type full="\Mockery\Mock" namespace="\Mockery" name="Mock"/>
      </return>
    </docblock>
    <parameter name="reference" byreference="false" type="{unknown}"/>
  </method>
  <method name="_getInstance" start="454" end="477" abstract="false" final="false" static="false" visibility="protected">
    <parameter name="mockName" byreference="false" type="{unknown}"/>
    <parameter name="constructorArgs" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="declareClass" start="484" end="502" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Takes a class name and declares it"/>
      <param type="string" variable="$fqcn"/>
    </docblock>
    <parameter name="fqcn" byreference="false" type="{unknown}"/>
  </method>
  <method name="checkForNamedMockClashes" start="504" end="523" abstract="false" final="false" static="false" visibility="protected">
    <parameter name="config" byreference="false" type="{unknown}"/>
  </method>
</class>
