<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="Symfony\Component\Yaml\Yaml" namespace="Symfony\Component\Yaml" name="Yaml" abstract="false" final="false" start="21" end="72">
  <file path="/home/robert/Desktop/Hogeschool/2ejaars Development/DevBOpdrachten/project56/http/laravel/vendor/symfony/yaml" file="Yaml.php" realpath="/home/robert/Desktop/Hogeschool/2ejaars Development/DevBOpdrachten/project56/http/laravel/vendor/symfony/yaml/Yaml.php" size="2624" time="2015-12-17T18:44:10+00:00" unixtime="1450377850" sha1="b9f4722ab24c5be6752009a77f9491b9e4c278a2" relative="vendor/symfony/yaml/Yaml.php"/>
  <docblock>
    <description compact="Yaml offers convenience methods to load and dump YAML."/>
    <author value="Fabien Potencier &lt;fabien@symfony.com&gt;"/>
  </docblock>
  <method name="parse" start="44" end="49" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Parses YAML into a PHP array.">The parse method, when supplied with a YAML stream (string or file),
will do its best to convert YAML in a file into a PHP array.

 Usage:
 &lt;code&gt;
  $array = Yaml::parse(file_get_contents('config.yml'));
  print_r($array);
 &lt;/code&gt;</description>
      <param description="A string containing YAML" type="string" variable="$input"/>
      <param description="True if an exception must be thrown on invalid types false otherwise" type="object" variable="$exceptionOnInvalidType">
        <type full="Symfony\Component\Yaml\bool" namespace="Symfony\Component\Yaml" name="bool"/>
      </param>
      <param description="True if object support is enabled, false otherwise" type="object" variable="$objectSupport">
        <type full="Symfony\Component\Yaml\bool" namespace="Symfony\Component\Yaml" name="bool"/>
      </param>
      <param description="True if maps should return a stdClass instead of array()" type="object" variable="$objectForMap">
        <type full="Symfony\Component\Yaml\bool" namespace="Symfony\Component\Yaml" name="bool"/>
      </param>
      <return description="The YAML converted to a PHP array" type="array"/>
      <throws description="If the YAML is not valid" type="object">
        <type full="Symfony\Component\Yaml\Exception\ParseException" namespace="Symfony\Component\Yaml\Exception" name="ParseException"/>
      </throws>
    </docblock>
    <parameter name="input" byreference="false" type="{unknown}"/>
    <parameter name="exceptionOnInvalidType" byreference="false" type="boolean" default="false"/>
    <parameter name="objectSupport" byreference="false" type="boolean" default="false"/>
    <parameter name="objectForMap" byreference="false" type="boolean" default="false"/>
  </method>
  <method name="dump" start="65" end="71" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Dumps a PHP array to a YAML string.">The dump method, when supplied with an array, will do its best
to convert the array into friendly YAML.</description>
      <param description="PHP array" type="array" variable="$array"/>
      <param description="The level where you switch to inline YAML" type="int" variable="$inline"/>
      <param description="The amount of spaces to use for indentation of nested nodes." type="int" variable="$indent"/>
      <param description="true if an exception must be thrown on invalid types (a PHP resource or object), false otherwise" type="object" variable="$exceptionOnInvalidType">
        <type full="Symfony\Component\Yaml\bool" namespace="Symfony\Component\Yaml" name="bool"/>
      </param>
      <param description="true if object support is enabled, false otherwise" type="object" variable="$objectSupport">
        <type full="Symfony\Component\Yaml\bool" namespace="Symfony\Component\Yaml" name="bool"/>
      </param>
      <return description="A YAML string representing the original PHP array" type="string"/>
    </docblock>
    <parameter name="array" byreference="false" type="{unknown}"/>
    <parameter name="inline" byreference="false" type="integer" default="2"/>
    <parameter name="indent" byreference="false" type="integer" default="4"/>
    <parameter name="exceptionOnInvalidType" byreference="false" type="boolean" default="false"/>
    <parameter name="objectSupport" byreference="false" type="boolean" default="false"/>
  </method>
</class>
