<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="Symfony\Component\Console\Tests\ApplicationTest" namespace="Symfony\Component\Console\Tests" name="ApplicationTest" abstract="false" final="false" start="33" end="1020">
  <file path="/home/robert/Desktop/Hogeschool/2ejaars Development/DevBOpdrachten/project56/http/laravel/vendor/symfony/console/Tests" file="ApplicationTest.php" realpath="/home/robert/Desktop/Hogeschool/2ejaars Development/DevBOpdrachten/project56/http/laravel/vendor/symfony/console/Tests/ApplicationTest.php" size="47642" time="2015-12-17T18:44:10+00:00" unixtime="1450377850" sha1="6e262fd78f35926da1f86340de49146a9d11d891" relative="vendor/symfony/console/Tests/ApplicationTest.php"/>
  <extends full="PHPUnit_Framework_TestCase" namespace="" name="PHPUnit_Framework_TestCase"/>
  <member name="fixturesPath" visibility="protected" line="35"/>
  <method name="setUpBeforeClass" start="37" end="50" abstract="false" final="false" static="true" visibility="public"/>
  <method name="normalizeLineBreaks" start="52" end="55" abstract="false" final="false" static="false" visibility="protected">
    <parameter name="text" byreference="false" type="{unknown}"/>
  </method>
  <method name="ensureStaticCommandHelp" start="62" end="67" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Replaces the dynamic placeholders of the command help text with a static version.">The placeholder %command.full_name% includes the script path that is not predictable
and can not be tested against.</description>
    </docblock>
    <parameter name="application" byreference="false" type="object">
      <type full="Symfony\Component\Console\Application" namespace="Symfony\Component\Console" name="Application"/>
    </parameter>
  </method>
  <method name="testConstructor" start="69" end="75" abstract="false" final="false" static="false" visibility="public"/>
  <method name="testSetGetName" start="77" end="82" abstract="false" final="false" static="false" visibility="public"/>
  <method name="testSetGetVersion" start="84" end="89" abstract="false" final="false" static="false" visibility="public"/>
  <method name="testGetLongVersion" start="91" end="95" abstract="false" final="false" static="false" visibility="public"/>
  <method name="testHelp" start="97" end="101" abstract="false" final="false" static="false" visibility="public"/>
  <method name="testAll" start="103" end="112" abstract="false" final="false" static="false" visibility="public"/>
  <method name="testRegister" start="114" end="119" abstract="false" final="false" static="false" visibility="public"/>
  <method name="testAdd" start="121" end="132" abstract="false" final="false" static="false" visibility="public"/>
  <method name="testAddCommandWithEmptyConstructor" start="138" end="142" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <expectedexception value="\LogicException"/>
      <expectedexceptionmessage value="Command class &quot;Foo5Command&quot; is not correctly initialized. You probably forgot to call the parent constructor."/>
    </docblock>
  </method>
  <method name="testHasGet" start="144" end="164" abstract="false" final="false" static="false" visibility="public">
    <inline>
      <comment value="simulate --help" line="157"/>
    </inline>
  </method>
  <method name="testSilentHelp" start="166" end="176" abstract="false" final="false" static="false" visibility="public"/>
  <method name="testGetInvalidCommand" start="182" end="186" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <expectedexception value="\InvalidArgumentException"/>
      <expectedexceptionmessage value="The command &quot;foofoo&quot; does not exist."/>
    </docblock>
  </method>
  <method name="testGetNamespaces" start="188" end="194" abstract="false" final="false" static="false" visibility="public"/>
  <method name="testFindNamespace" start="196" end="204" abstract="false" final="false" static="false" visibility="public"/>
  <method name="testFindNamespaceWithSubnamespaces" start="206" end="212" abstract="false" final="false" static="false" visibility="public"/>
  <method name="testFindAmbiguousNamespace" start="218" end="225" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <expectedexception value="\InvalidArgumentException"/>
      <expectedexceptionmessage value="The namespace &quot;f&quot; is ambiguous (foo, foo1)."/>
    </docblock>
  </method>
  <method name="testFindInvalidNamespace" start="231" end="235" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <expectedexception value="\InvalidArgumentException"/>
      <expectedexceptionmessage value="There are no commands defined in the &quot;bar&quot; namespace."/>
    </docblock>
  </method>
  <method name="testFindUniqueNameButNamespaceName" start="241" end="249" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <expectedexception value="\InvalidArgumentException"/>
      <expectedexceptionmessage value="Command &quot;foo1&quot; is not defined"/>
    </docblock>
  </method>
  <method name="testFind" start="251" end="261" abstract="false" final="false" static="false" visibility="public"/>
  <method name="testFindWithAmbiguousAbbreviations" start="266" end="276" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <dataprovider value="provideAmbiguousAbbreviations"/>
    </docblock>
    <parameter name="abbreviation" byreference="false" type="{unknown}"/>
    <parameter name="expectedExceptionMessage" byreference="false" type="{unknown}"/>
  </method>
  <method name="provideAmbiguousAbbreviations" start="278" end="285" abstract="false" final="false" static="false" visibility="public"/>
  <method name="testFindCommandEqualNamespace" start="287" end="295" abstract="false" final="false" static="false" visibility="public"/>
  <method name="testFindCommandWithAmbiguousNamespacesButUniqueName" start="297" end="304" abstract="false" final="false" static="false" visibility="public"/>
  <method name="testFindCommandWithMissingNamespace" start="306" end="312" abstract="false" final="false" static="false" visibility="public"/>
  <method name="testFindAlternativeExceptionMessageSingle" start="319" end="324" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <dataprovider value="provideInvalidCommandNamesSingle"/>
      <expectedexception value="\InvalidArgumentException"/>
      <expectedexceptionmessage value="Did you mean this"/>
    </docblock>
    <parameter name="name" byreference="false" type="{unknown}"/>
  </method>
  <method name="provideInvalidCommandNamesSingle" start="326" end="332" abstract="false" final="false" static="false" visibility="public"/>
  <method name="testFindAlternativeExceptionMessageMultiple" start="334" end="374" abstract="false" final="false" static="false" visibility="public">
    <inline>
      <comment value="Command + plural" line="341"/>
      <comment value="Namespace + plural" line="352"/>
      <comment value="Subnamespace + plural" line="365"/>
    </inline>
  </method>
  <method name="testFindAlternativeCommands" start="376" end="404" abstract="false" final="false" static="false" visibility="public">
    <inline>
      <comment value="Test if &quot;bar1&quot; command throw an &quot;\InvalidArgumentException&quot; and does not contain" line="392"/>
      <comment value="&quot;foo:bar&quot; as alternative because &quot;bar1&quot; is too far from &quot;foo:bar&quot;" line="393"/>
    </inline>
  </method>
  <method name="testFindAlternativeCommandsWithAnAlias" start="406" end="417" abstract="false" final="false" static="false" visibility="public"/>
  <method name="testFindAlternativeNamespace" start="419" end="446" abstract="false" final="false" static="false" visibility="public"/>
  <method name="testFindNamespaceDoesNotFailOnDeepSimilarNamespaces" start="448" end="456" abstract="false" final="false" static="false" visibility="public"/>
  <method name="testFindWithDoubleColonInNameThrowsException" start="462" end="468" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <expectedexception value="\InvalidArgumentException"/>
      <expectedexceptionmessage value="Command &quot;foo::bar&quot; is not defined."/>
    </docblock>
  </method>
  <method name="testSetCatchExceptions" start="470" end="491" abstract="false" final="false" static="false" visibility="public"/>
  <method name="testLegacyAsText" start="496" end="503" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <group value="legacy"/>
    </docblock>
  </method>
  <method name="testLegacyAsXml" start="508" end="515" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <group value="legacy"/>
    </docblock>
  </method>
  <method name="testRenderException" start="517" end="552" abstract="false" final="false" static="false" visibility="public"/>
  <method name="testRenderExceptionWithDoubleWidthCharacters" start="557" end="586" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <requires value="extension mbstring"/>
    </docblock>
  </method>
  <method name="testRun" start="588" end="678" abstract="false" final="false" static="false" visibility="public"/>
  <method name="testVerboseValueNotBreakArguments" start="687" end="701" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Issue #9285.">If the "verbose" option is just before an argument in ArgvInput,
an argument value should not be treated as verbosity value.
This test will fail with "Not enough arguments." if broken</description>
    </docblock>
  </method>
  <method name="testRunReturnsIntegerExitCode" start="703" end="716" abstract="false" final="false" static="false" visibility="public"/>
  <method name="testRunReturnsExitCodeOneForExceptionCodeZero" start="718" end="731" abstract="false" final="false" static="false" visibility="public"/>
  <method name="testAddingAlreadySetDefinitionElementData" start="737" end="751" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <expectedexception value="\LogicException"/>
      <dataprovider value="getAddingAlreadySetDefinitionElementData"/>
    </docblock>
    <parameter name="def" byreference="false" type="{unknown}"/>
  </method>
  <method name="getAddingAlreadySetDefinitionElementData" start="753" end="760" abstract="false" final="false" static="false" visibility="public"/>
  <method name="testGetDefaultHelperSetReturnsDefaultValues" start="762" end="773" abstract="false" final="false" static="false" visibility="public"/>
  <method name="testAddingSingleHelperSetOverwritesDefaultValues" start="775" end="790" abstract="false" final="false" static="false" visibility="public">
    <inline>
      <comment value="no other default helper set should be returned" line="787"/>
    </inline>
  </method>
  <method name="testOverwritingDefaultHelperSetOverwritesDefaultValues" start="792" end="807" abstract="false" final="false" static="false" visibility="public">
    <inline>
      <comment value="no other default helper set should be returned" line="804"/>
    </inline>
  </method>
  <method name="testGetDefaultInputDefinitionReturnsDefaultValues" start="809" end="826" abstract="false" final="false" static="false" visibility="public"/>
  <method name="testOverwritingDefaultInputDefinitionOverwritesDefaultValues" start="828" end="848" abstract="false" final="false" static="false" visibility="public">
    <inline>
      <comment value="check whether the default arguments and options are not returned any more" line="836"/>
    </inline>
  </method>
  <method name="testSettingCustomInputDefinitionOverwritesDefaultValues" start="850" end="872" abstract="false" final="false" static="false" visibility="public">
    <inline>
      <comment value="check whether the default arguments and options are not returned any more" line="860"/>
    </inline>
  </method>
  <method name="testRunWithDispatcher" start="874" end="887" abstract="false" final="false" static="false" visibility="public"/>
  <method name="testRunWithExceptionAndDispatcher" start="893" end="906" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <expectedexception value="\LogicException"/>
      <expectedexceptionmessage value="caught"/>
    </docblock>
  </method>
  <method name="testRunDispatchesAllEventsWithException" start="908" end="923" abstract="false" final="false" static="false" visibility="public"/>
  <method name="testRunWithDispatcherSkippingCommand" start="925" end="939" abstract="false" final="false" static="false" visibility="public"/>
  <method name="testTerminalDimensions" start="941" end="954" abstract="false" final="false" static="false" visibility="public"/>
  <method name="getDispatcher" start="956" end="980" abstract="false" final="false" static="false" visibility="protected">
    <parameter name="skipCommand" byreference="false" type="boolean" default="false"/>
  </method>
  <method name="testSetRunCustomDefaultCommand" start="982" end="1002" abstract="false" final="false" static="false" visibility="public"/>
  <method name="testCanCheckIfTerminalIsInteractive" start="1007" end="1019" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <requires value="function posix_isatty"/>
    </docblock>
  </method>
</class>
