<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="Psy\ExecutionLoop\ForkingLoop" namespace="Psy\ExecutionLoop" name="ForkingLoop" abstract="false" final="false" start="22" end="168">
  <file path="/home/robert/Desktop/Hogeschool/2ejaars Development/DevBOpdrachten/project56/http/laravel/vendor/psy/psysh/src/Psy/ExecutionLoop" file="ForkingLoop.php" realpath="/home/robert/Desktop/Hogeschool/2ejaars Development/DevBOpdrachten/project56/http/laravel/vendor/psy/psysh/src/Psy/ExecutionLoop/ForkingLoop.php" size="4745" time="2015-12-17T18:44:10+00:00" unixtime="1450377850" sha1="8c71304122d7dced84bdc7e30e53e2a0ff603ccd" relative="vendor/psy/psysh/src/Psy/ExecutionLoop/ForkingLoop.php"/>
  <docblock>
    <description compact="A forking version of the Psy Shell execution loop.">This version is preferred, as it won't die prematurely if user input includes
a fatal error, such as redeclaring a class or function.</description>
  </docblock>
  <extends full="Psy\ExecutionLoop\Loop" namespace="Psy\ExecutionLoop" name="Loop"/>
  <member name="savegame" visibility="private" line="24"/>
  <method name="run" start="35" end="86" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Run the execution loop.">Forks into a master and a loop process. The loop process will handle the
evaluation of all instructions, then return its state via a socket upon
completion.</description>
      <param type="object" variable="$shell">
        <type full="Psy\Shell" namespace="Psy" name="Shell"/>
      </param>
    </docblock>
    <parameter name="shell" byreference="false" type="object">
      <type full="Psy\Shell" namespace="Psy" name="Shell"/>
    </parameter>
    <inline>
      <comment value="This is the child process. It's going to do all the work." line="70"/>
      <comment value="We won't be needing this one." line="75"/>
      <comment value="Let's do some processing." line="78"/>
      <comment value="Send the scope variables back up to the main thread" line="81"/>
    </inline>
  </method>
  <method name="beforeLoop" start="91" end="94" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Create a savegame at the start of each loop iteration."/>
    </docblock>
  </method>
  <method name="afterLoop" start="99" end="106" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Clean up old savegames at the end of each loop iteration."/>
    </docblock>
    <inline>
      <comment value="if there's an old savegame hanging around, let's kill it." line="101"/>
    </inline>
  </method>
  <method name="createSavegame" start="115" end="135" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Create a savegame fork.">The savegame contains the current execution state, and can be resumed in
the event that the worker dies unexpectedly (for example, by encountering
a PHP fatal error).</description>
    </docblock>
    <inline>
      <comment value="the current process will become the savegame" line="117"/>
    </inline>
  </method>
  <method name="serializeReturn" start="149" end="167" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Serialize all serializable return values.">A na√Øve serialization will run into issues if there is a Closure or
SimpleXMLElement (among other things) in scope when exiting the execution
loop. We'll just ignore these unserializable classes, and serialize what
we can.</description>
      <param type="array" variable="$return"/>
      <return type="string"/>
    </docblock>
    <parameter name="return" byreference="false" type="array"/>
  </method>
</class>
