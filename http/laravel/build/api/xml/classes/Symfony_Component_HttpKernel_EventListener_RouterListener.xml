<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="Symfony\Component\HttpKernel\EventListener\RouterListener" namespace="Symfony\Component\HttpKernel\EventListener" name="RouterListener" abstract="false" final="false" start="40" end="174">
  <file path="/home/robert/Desktop/Hogeschool/2ejaars Development/DevBOpdrachten/project56/http/laravel/vendor/symfony/http-kernel/EventListener" file="RouterListener.php" realpath="/home/robert/Desktop/Hogeschool/2ejaars Development/DevBOpdrachten/project56/http/laravel/vendor/symfony/http-kernel/EventListener/RouterListener.php" size="7120" time="2015-12-17T18:44:10+00:00" unixtime="1450377850" sha1="1d9d2f02ef0212c3a8806de119609fa8ce890cfb" relative="vendor/symfony/http-kernel/EventListener/RouterListener.php"/>
  <docblock>
    <description compact="Initializes the context from the request and sets request attributes based on a matching route.">This listener works in 2 modes:

 * 2.3 compatibility mode where you must call setRequest whenever the Request changes.
 * 2.4+ mode where you must pass a RequestStack instance in the constructor.</description>
    <author value="Fabien Potencier &lt;fabien@symfony.com&gt;"/>
  </docblock>
  <implements full="Symfony\Component\EventDispatcher\EventSubscriberInterface" namespace="Symfony\Component\EventDispatcher" name="EventSubscriberInterface"/>
  <member name="matcher" visibility="private" line="42"/>
  <member name="context" visibility="private" line="43"/>
  <member name="logger" visibility="private" line="44"/>
  <member name="request" visibility="private" line="45"/>
  <member name="requestStack" visibility="private" line="46"/>
  <constructor name="__construct" start="60" end="78" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Constructor.">RequestStack will become required in 3.0.</description>
      <param description="The Url or Request matcher" type="object" variable="$matcher">
        <type full="Symfony\Component\HttpKernel\EventListener\UrlMatcherInterface|RequestMatcherInterface" namespace="Symfony\Component\HttpKernel\EventListener" name="UrlMatcherInterface|RequestMatcherInterface"/>
      </param>
      <param description="The RequestContext (can be null when $matcher implements RequestContextAwareInterface)" type="object" variable="$context">
        <type full="Symfony\Component\HttpKernel\EventListener\RequestContext|null" namespace="Symfony\Component\HttpKernel\EventListener" name="RequestContext|null"/>
      </param>
      <param description="The logger" type="object" variable="$logger">
        <type full="Symfony\Component\HttpKernel\EventListener\LoggerInterface|null" namespace="Symfony\Component\HttpKernel\EventListener" name="LoggerInterface|null"/>
      </param>
      <param description="A RequestStack instance" type="object" variable="$requestStack">
        <type full="Symfony\Component\HttpKernel\EventListener\RequestStack|null" namespace="Symfony\Component\HttpKernel\EventListener" name="RequestStack|null"/>
      </param>
      <throws type="object">
        <type full="\InvalidArgumentException" namespace="" name="InvalidArgumentException"/>
      </throws>
    </docblock>
    <parameter name="matcher" byreference="false" type="{unknown}"/>
    <parameter name="context" byreference="false" type="{unknown}" default="" constant="null">
      <type full="Symfony\Component\Routing\RequestContext" namespace="Symfony\Component\Routing" name="RequestContext"/>
    </parameter>
    <parameter name="logger" byreference="false" type="{unknown}" default="" constant="null">
      <type full="Psr\Log\LoggerInterface" namespace="Psr\Log" name="LoggerInterface"/>
    </parameter>
    <parameter name="requestStack" byreference="false" type="{unknown}" default="" constant="null">
      <type full="Symfony\Component\HttpFoundation\RequestStack" namespace="Symfony\Component\HttpFoundation" name="RequestStack"/>
    </parameter>
  </constructor>
  <method name="setRequest" start="91" end="96" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Sets the current Request.">This method was used to synchronize the Request, but as the HttpKernel
is doing that automatically now, you should never call it directly.
It is kept public for BC with the 2.3 version.</description>
      <param description="A Request instance" type="object" variable="$request">
        <type full="Symfony\Component\HttpKernel\EventListener\Request|null" namespace="Symfony\Component\HttpKernel\EventListener" name="Request|null"/>
      </param>
      <deprecated value="since version 2.4, to be removed in 3.0."/>
    </docblock>
    <parameter name="request" byreference="false" type="{unknown}" default="" constant="null">
      <type full="Symfony\Component\HttpFoundation\Request" namespace="Symfony\Component\HttpFoundation" name="Request"/>
    </parameter>
  </method>
  <method name="setCurrentRequest" start="98" end="105" abstract="false" final="false" static="false" visibility="private">
    <parameter name="request" byreference="false" type="{unknown}" default="" constant="null">
      <type full="Symfony\Component\HttpFoundation\Request" namespace="Symfony\Component\HttpFoundation" name="Request"/>
    </parameter>
  </method>
  <method name="onKernelFinishRequest" start="107" end="114" abstract="false" final="false" static="false" visibility="public">
    <parameter name="event" byreference="false" type="object">
      <type full="Symfony\Component\HttpKernel\Event\FinishRequestEvent" namespace="Symfony\Component\HttpKernel\Event" name="FinishRequestEvent"/>
    </parameter>
  </method>
  <method name="onKernelRequest" start="116" end="165" abstract="false" final="false" static="false" visibility="public">
    <parameter name="event" byreference="false" type="object">
      <type full="Symfony\Component\HttpKernel\Event\GetResponseEvent" namespace="Symfony\Component\HttpKernel\Event" name="GetResponseEvent"/>
    </parameter>
    <inline>
      <comment value="initialize the context that is also used by the generator (assuming matcher and generator share the same context instance)" line="120"/>
      <comment value="we call setCurrentRequest even if most of the time, it has already been done to keep compatibility" line="121"/>
      <comment value="with frameworks which do not use the Symfony service container" line="122"/>
      <comment value="when we have a RequestStack, no need to do it" line="123"/>
      <comment value="add attributes based on the request (routing)" line="133"/>
    </inline>
  </method>
  <method name="getSubscribedEvents" start="167" end="173" abstract="false" final="false" static="true" visibility="public"/>
</class>
