<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="Illuminate\Mail\Mailer" namespace="Illuminate\Mail" name="Mailer" abstract="false" final="false" start="20" end="565">
  <file path="/home/robert/Desktop/Hogeschool/2ejaars Development/DevBOpdrachten/project56/http/laravel/vendor/laravel/framework/src/Illuminate/Mail" file="Mailer.php" realpath="/home/robert/Desktop/Hogeschool/2ejaars Development/DevBOpdrachten/project56/http/laravel/vendor/laravel/framework/src/Illuminate/Mail/Mailer.php" size="14370" time="2015-12-17T18:44:09+00:00" unixtime="1450377849" sha1="8d4dce2ab3a3ef028780b6cc303c77ba76da7f55" relative="vendor/laravel/framework/src/Illuminate/Mail/Mailer.php"/>
  <implements full="Illuminate\Contracts\Mail\Mailer" namespace="Illuminate\Contracts\Mail" name="Mailer"/>
  <implements full="Illuminate\Contracts\Mail\MailQueue" namespace="Illuminate\Contracts\Mail" name="MailQueue"/>
  <member name="views" visibility="protected" line="27">
    <docblock>
      <description compact="The view factory instance."/>
      <var type="object">
        <type full="\Illuminate\Contracts\View\Factory" namespace="\Illuminate\Contracts\View" name="Factory"/>
      </var>
    </docblock>
  </member>
  <member name="swift" visibility="protected" line="34">
    <docblock>
      <description compact="The Swift Mailer instance."/>
      <var type="object">
        <type full="\Swift_Mailer" namespace="" name="Swift_Mailer"/>
      </var>
    </docblock>
  </member>
  <member name="events" visibility="protected" line="41">
    <docblock>
      <description compact="The event dispatcher instance."/>
      <var type="object">
        <type full="\Illuminate\Contracts\Events\Dispatcher|null" namespace="\Illuminate\Contracts\Events" name="Dispatcher|null"/>
      </var>
    </docblock>
  </member>
  <member name="from" visibility="protected" line="48">
    <docblock>
      <description compact="The global from address and name."/>
      <var type="array"/>
    </docblock>
  </member>
  <member name="logger" visibility="protected" line="55">
    <docblock>
      <description compact="The log writer instance."/>
      <var type="object">
        <type full="\Psr\Log\LoggerInterface" namespace="\Psr\Log" name="LoggerInterface"/>
      </var>
    </docblock>
  </member>
  <member name="container" visibility="protected" line="62">
    <docblock>
      <description compact="The IoC container instance."/>
      <var type="object">
        <type full="\Illuminate\Contracts\Container\Container" namespace="\Illuminate\Contracts\Container" name="Container"/>
      </var>
    </docblock>
  </member>
  <member name="queue" visibility="protected" line="69">
    <docblock>
      <description compact="The queue implementation."/>
      <var type="object">
        <type full="\Illuminate\Contracts\Queue\Queue" namespace="\Illuminate\Contracts\Queue" name="Queue"/>
      </var>
    </docblock>
  </member>
  <member name="pretending" type="boolean" default="false" visibility="protected" line="76">
    <docblock>
      <description compact="Indicates if the actual sending is disabled."/>
      <var type="object">
        <type full="Illuminate\Mail\bool" namespace="Illuminate\Mail" name="bool"/>
      </var>
    </docblock>
  </member>
  <member name="failedRecipients" type="array" default="" visibility="protected" line="83">
    <docblock>
      <description compact="Array of failed recipients."/>
      <var type="array"/>
    </docblock>
  </member>
  <constructor name="__construct" start="93" end="98" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Create a new Mailer instance."/>
      <param type="object" variable="$views">
        <type full="\Illuminate\Contracts\View\Factory" namespace="\Illuminate\Contracts\View" name="Factory"/>
      </param>
      <param type="object" variable="$swift">
        <type full="\Swift_Mailer" namespace="" name="Swift_Mailer"/>
      </param>
      <param type="object" variable="$events">
        <type full="\Illuminate\Contracts\Events\Dispatcher|null" namespace="\Illuminate\Contracts\Events" name="Dispatcher|null"/>
      </param>
      <return type="object">
        <type full="Illuminate\Mail\void" namespace="Illuminate\Mail" name="void"/>
      </return>
    </docblock>
    <parameter name="views" byreference="false" type="object">
      <type full="Illuminate\Contracts\View\Factory" namespace="Illuminate\Contracts\View" name="Factory"/>
    </parameter>
    <parameter name="swift" byreference="false" type="object">
      <type full="Swift_Mailer" namespace="" name="Swift_Mailer"/>
    </parameter>
    <parameter name="events" byreference="false" type="{unknown}" default="" constant="null">
      <type full="Illuminate\Contracts\Events\Dispatcher" namespace="Illuminate\Contracts\Events" name="Dispatcher"/>
    </parameter>
  </constructor>
  <method name="alwaysFrom" start="107" end="110" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Set the global from address and name."/>
      <param type="string" variable="$address"/>
      <param type="object" variable="$name">
        <type full="Illuminate\Mail\string|null" namespace="Illuminate\Mail" name="string|null"/>
      </param>
      <return type="object">
        <type full="Illuminate\Mail\void" namespace="Illuminate\Mail" name="void"/>
      </return>
    </docblock>
    <parameter name="address" byreference="false" type="{unknown}"/>
    <parameter name="name" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="alwaysTo" start="119" end="122" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Set the global to address and name."/>
      <param type="string" variable="$address"/>
      <param type="object" variable="$name">
        <type full="Illuminate\Mail\string|null" namespace="Illuminate\Mail" name="string|null"/>
      </param>
      <return type="object">
        <type full="Illuminate\Mail\void" namespace="Illuminate\Mail" name="void"/>
      </return>
    </docblock>
    <parameter name="address" byreference="false" type="{unknown}"/>
    <parameter name="name" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="raw" start="131" end="134" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Send a new message when only a raw text part."/>
      <param type="string" variable="$text"/>
      <param type="mixed" variable="$callback"/>
      <return type="int"/>
    </docblock>
    <parameter name="text" byreference="false" type="{unknown}"/>
    <parameter name="callback" byreference="false" type="{unknown}"/>
  </method>
  <method name="plain" start="144" end="147" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Send a new message when only a plain part."/>
      <param type="string" variable="$view"/>
      <param type="array" variable="$data"/>
      <param type="mixed" variable="$callback"/>
      <return type="int"/>
    </docblock>
    <parameter name="view" byreference="false" type="{unknown}"/>
    <parameter name="data" byreference="false" type="array"/>
    <parameter name="callback" byreference="false" type="{unknown}"/>
  </method>
  <method name="send" start="157" end="182" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Send a new message using a view."/>
      <param type="object" variable="$view">
        <type full="Illuminate\Mail\string|array" namespace="Illuminate\Mail" name="string|array"/>
      </param>
      <param type="array" variable="$data"/>
      <param type="object" variable="$callback">
        <type full="\Closure|string" namespace="" name="Closure|string"/>
      </param>
      <return type="object">
        <type full="Illuminate\Mail\void" namespace="Illuminate\Mail" name="void"/>
      </return>
    </docblock>
    <parameter name="view" byreference="false" type="{unknown}"/>
    <parameter name="data" byreference="false" type="array"/>
    <parameter name="callback" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="First we need to parse the view, which could either be a string or an array" line="161"/>
      <comment value="containing both an HTML and plain text versions of the view which should" line="162"/>
      <comment value="be used when sending an e-mail. We will extract both of them out here." line="163"/>
      <comment value="Once we have retrieved the view content for the e-mail we will set the body" line="168"/>
      <comment value="of this message using the HTML type, which will provide a simple wrapper" line="169"/>
      <comment value="to creating view based emails that are able to receive arrays of data." line="170"/>
    </inline>
  </method>
  <method name="queue" start="193" end="198" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Queue a new e-mail message for sending."/>
      <param type="object" variable="$view">
        <type full="Illuminate\Mail\string|array" namespace="Illuminate\Mail" name="string|array"/>
      </param>
      <param type="array" variable="$data"/>
      <param type="object" variable="$callback">
        <type full="\Closure|string" namespace="" name="Closure|string"/>
      </param>
      <param type="object" variable="$queue">
        <type full="Illuminate\Mail\string|null" namespace="Illuminate\Mail" name="string|null"/>
      </param>
      <return type="mixed"/>
    </docblock>
    <parameter name="view" byreference="false" type="{unknown}"/>
    <parameter name="data" byreference="false" type="array"/>
    <parameter name="callback" byreference="false" type="{unknown}"/>
    <parameter name="queue" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="onQueue" start="209" end="212" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Queue a new e-mail message for sending on the given queue."/>
      <param type="string" variable="$queue"/>
      <param type="object" variable="$view">
        <type full="Illuminate\Mail\string|array" namespace="Illuminate\Mail" name="string|array"/>
      </param>
      <param type="array" variable="$data"/>
      <param type="object" variable="$callback">
        <type full="\Closure|string" namespace="" name="Closure|string"/>
      </param>
      <return type="mixed"/>
    </docblock>
    <parameter name="queue" byreference="false" type="{unknown}"/>
    <parameter name="view" byreference="false" type="{unknown}"/>
    <parameter name="data" byreference="false" type="array"/>
    <parameter name="callback" byreference="false" type="{unknown}"/>
  </method>
  <method name="queueOn" start="225" end="228" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Queue a new e-mail message for sending on the given queue.">This method didn't match rest of framework's "onQueue" phrasing. Added "onQueue".</description>
      <param type="string" variable="$queue"/>
      <param type="object" variable="$view">
        <type full="Illuminate\Mail\string|array" namespace="Illuminate\Mail" name="string|array"/>
      </param>
      <param type="array" variable="$data"/>
      <param type="object" variable="$callback">
        <type full="\Closure|string" namespace="" name="Closure|string"/>
      </param>
      <return type="mixed"/>
    </docblock>
    <parameter name="queue" byreference="false" type="{unknown}"/>
    <parameter name="view" byreference="false" type="{unknown}"/>
    <parameter name="data" byreference="false" type="array"/>
    <parameter name="callback" byreference="false" type="{unknown}"/>
  </method>
  <method name="later" start="240" end="245" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Queue a new e-mail message for sending after (n) seconds."/>
      <param type="int" variable="$delay"/>
      <param type="object" variable="$view">
        <type full="Illuminate\Mail\string|array" namespace="Illuminate\Mail" name="string|array"/>
      </param>
      <param type="array" variable="$data"/>
      <param type="object" variable="$callback">
        <type full="\Closure|string" namespace="" name="Closure|string"/>
      </param>
      <param type="object" variable="$queue">
        <type full="Illuminate\Mail\string|null" namespace="Illuminate\Mail" name="string|null"/>
      </param>
      <return type="mixed"/>
    </docblock>
    <parameter name="delay" byreference="false" type="{unknown}"/>
    <parameter name="view" byreference="false" type="{unknown}"/>
    <parameter name="data" byreference="false" type="array"/>
    <parameter name="callback" byreference="false" type="{unknown}"/>
    <parameter name="queue" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="laterOn" start="257" end="260" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Queue a new e-mail message for sending after (n) seconds on the given queue."/>
      <param type="string" variable="$queue"/>
      <param type="int" variable="$delay"/>
      <param type="object" variable="$view">
        <type full="Illuminate\Mail\string|array" namespace="Illuminate\Mail" name="string|array"/>
      </param>
      <param type="array" variable="$data"/>
      <param type="object" variable="$callback">
        <type full="\Closure|string" namespace="" name="Closure|string"/>
      </param>
      <return type="mixed"/>
    </docblock>
    <parameter name="queue" byreference="false" type="{unknown}"/>
    <parameter name="delay" byreference="false" type="{unknown}"/>
    <parameter name="view" byreference="false" type="{unknown}"/>
    <parameter name="data" byreference="false" type="array"/>
    <parameter name="callback" byreference="false" type="{unknown}"/>
  </method>
  <method name="buildQueueCallable" start="268" end="275" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Build the callable for a queued e-mail job."/>
      <param type="mixed" variable="$callback"/>
      <return type="mixed"/>
    </docblock>
    <parameter name="callback" byreference="false" type="{unknown}"/>
  </method>
  <method name="handleQueuedMessage" start="284" end="289" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Handle a queued e-mail message job."/>
      <param type="object" variable="$job">
        <type full="\Illuminate\Contracts\Queue\Job" namespace="\Illuminate\Contracts\Queue" name="Job"/>
      </param>
      <param type="array" variable="$data"/>
      <return type="object">
        <type full="Illuminate\Mail\void" namespace="Illuminate\Mail" name="void"/>
      </return>
    </docblock>
    <parameter name="job" byreference="false" type="{unknown}"/>
    <parameter name="data" byreference="false" type="{unknown}"/>
  </method>
  <method name="getQueuedCallable" start="297" end="304" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Get the true callable for a queued e-mail message."/>
      <param type="array" variable="$data"/>
      <return type="mixed"/>
    </docblock>
    <parameter name="data" byreference="false" type="array"/>
  </method>
  <method name="forceReconnection" start="313" end="316" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Force the transport to re-connect.">This will prevent errors in daemon queue situations.</description>
      <return type="object">
        <type full="Illuminate\Mail\void" namespace="Illuminate\Mail" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="addContent" start="328" end="345" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Add the content to a given message."/>
      <param type="object" variable="$message">
        <type full="\Illuminate\Mail\Message" namespace="\Illuminate\Mail" name="Message"/>
      </param>
      <param type="string" variable="$view"/>
      <param type="string" variable="$plain"/>
      <param type="string" variable="$raw"/>
      <param type="array" variable="$data"/>
      <return type="object">
        <type full="Illuminate\Mail\void" namespace="Illuminate\Mail" name="void"/>
      </return>
    </docblock>
    <parameter name="message" byreference="false" type="{unknown}"/>
    <parameter name="view" byreference="false" type="{unknown}"/>
    <parameter name="plain" byreference="false" type="{unknown}"/>
    <parameter name="raw" byreference="false" type="{unknown}"/>
    <parameter name="data" byreference="false" type="{unknown}"/>
  </method>
  <method name="parseView" start="355" end="380" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Parse the given view name or array."/>
      <param type="object" variable="$view">
        <type full="Illuminate\Mail\string|array" namespace="Illuminate\Mail" name="string|array"/>
      </param>
      <return type="array"/>
      <throws type="object">
        <type full="\InvalidArgumentException" namespace="" name="InvalidArgumentException"/>
      </throws>
    </docblock>
    <parameter name="view" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="If the given view is an array with numeric keys, we will just assume that" line="361"/>
      <comment value="both a &quot;pretty&quot; and &quot;plain&quot; view were provided, so we will return this" line="362"/>
      <comment value="array as is, since must should contain both views with numeric keys." line="363"/>
      <comment value="If the view is an array, but doesn't contain numeric keys, we will assume" line="368"/>
      <comment value="the the views are being explicitly specified and will extract them via" line="369"/>
      <comment value="named keys instead, allowing the developers to use one or the other." line="370"/>
    </inline>
  </method>
  <method name="sendSwiftMessage" start="388" end="399" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Send a Swift Message instance."/>
      <param type="object" variable="$message">
        <type full="\Swift_Message" namespace="" name="Swift_Message"/>
      </param>
      <return type="object">
        <type full="Illuminate\Mail\void" namespace="Illuminate\Mail" name="void"/>
      </return>
    </docblock>
    <parameter name="message" byreference="false" type="{unknown}"/>
  </method>
  <method name="logMessage" start="407" end="412" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Log that a message was sent."/>
      <param type="object" variable="$message">
        <type full="\Swift_Message" namespace="" name="Swift_Message"/>
      </param>
      <return type="object">
        <type full="Illuminate\Mail\void" namespace="Illuminate\Mail" name="void"/>
      </return>
    </docblock>
    <parameter name="message" byreference="false" type="{unknown}"/>
  </method>
  <method name="callMessageBuilder" start="423" end="434" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Call the provided message builder."/>
      <param type="object" variable="$callback">
        <type full="\Closure|string" namespace="" name="Closure|string"/>
      </param>
      <param type="object" variable="$message">
        <type full="\Illuminate\Mail\Message" namespace="\Illuminate\Mail" name="Message"/>
      </param>
      <return type="mixed"/>
      <throws type="object">
        <type full="\InvalidArgumentException" namespace="" name="InvalidArgumentException"/>
      </throws>
    </docblock>
    <parameter name="callback" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="{unknown}"/>
  </method>
  <method name="createMessage" start="441" end="453" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Create a new message instance."/>
      <return type="object">
        <type full="\Illuminate\Mail\Message" namespace="\Illuminate\Mail" name="Message"/>
      </return>
    </docblock>
    <inline>
      <comment value="If a global from address has been specified we will set it on every message" line="445"/>
      <comment value="instances so the developer does not have to repeat themselves every time" line="446"/>
      <comment value="they create a new message. We will just go ahead and push the address." line="447"/>
    </inline>
  </method>
  <method name="getView" start="462" end="465" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Render the given view."/>
      <param type="string" variable="$view"/>
      <param type="array" variable="$data"/>
      <return type="object">
        <type full="\Illuminate\View\View" namespace="\Illuminate\View" name="View"/>
      </return>
    </docblock>
    <parameter name="view" byreference="false" type="{unknown}"/>
    <parameter name="data" byreference="false" type="{unknown}"/>
  </method>
  <method name="pretend" start="473" end="476" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Tell the mailer to not really send messages."/>
      <param type="object" variable="$value">
        <type full="Illuminate\Mail\bool" namespace="Illuminate\Mail" name="bool"/>
      </param>
      <return type="object">
        <type full="Illuminate\Mail\void" namespace="Illuminate\Mail" name="void"/>
      </return>
    </docblock>
    <parameter name="value" byreference="false" type="boolean" default="true"/>
  </method>
  <method name="isPretending" start="483" end="486" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Check if the mailer is pretending to send messages."/>
      <return type="object">
        <type full="Illuminate\Mail\bool" namespace="Illuminate\Mail" name="bool"/>
      </return>
    </docblock>
  </method>
  <method name="getViewFactory" start="493" end="496" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get the view factory instance."/>
      <return type="object">
        <type full="\Illuminate\Contracts\View\Factory" namespace="\Illuminate\Contracts\View" name="Factory"/>
      </return>
    </docblock>
  </method>
  <method name="getSwiftMailer" start="503" end="506" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get the Swift Mailer instance."/>
      <return type="object">
        <type full="\Swift_Mailer" namespace="" name="Swift_Mailer"/>
      </return>
    </docblock>
  </method>
  <method name="failures" start="513" end="516" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get the array of failed recipients."/>
      <return type="array"/>
    </docblock>
  </method>
  <method name="setSwiftMailer" start="524" end="527" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Set the Swift Mailer instance."/>
      <param type="object" variable="$swift">
        <type full="\Swift_Mailer" namespace="" name="Swift_Mailer"/>
      </param>
      <return type="object">
        <type full="Illuminate\Mail\void" namespace="Illuminate\Mail" name="void"/>
      </return>
    </docblock>
    <parameter name="swift" byreference="false" type="{unknown}"/>
  </method>
  <method name="setLogger" start="535" end="540" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Set the log writer instance."/>
      <param type="object" variable="$logger">
        <type full="\Psr\Log\LoggerInterface" namespace="\Psr\Log" name="LoggerInterface"/>
      </param>
      <return type="object">
        <type full="Illuminate\Mail\$this" namespace="Illuminate\Mail" name="$this"/>
      </return>
    </docblock>
    <parameter name="logger" byreference="false" type="object">
      <type full="Psr\Log\LoggerInterface" namespace="Psr\Log" name="LoggerInterface"/>
    </parameter>
  </method>
  <method name="setQueue" start="548" end="553" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Set the queue manager instance."/>
      <param type="object" variable="$queue">
        <type full="\Illuminate\Contracts\Queue\Queue" namespace="\Illuminate\Contracts\Queue" name="Queue"/>
      </param>
      <return type="object">
        <type full="Illuminate\Mail\$this" namespace="Illuminate\Mail" name="$this"/>
      </return>
    </docblock>
    <parameter name="queue" byreference="false" type="object">
      <type full="Illuminate\Contracts\Queue\Queue" namespace="Illuminate\Contracts\Queue" name="Queue"/>
    </parameter>
  </method>
  <method name="setContainer" start="561" end="564" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Set the IoC container instance."/>
      <param type="object" variable="$container">
        <type full="\Illuminate\Contracts\Container\Container" namespace="\Illuminate\Contracts\Container" name="Container"/>
      </param>
      <return type="object">
        <type full="Illuminate\Mail\void" namespace="Illuminate\Mail" name="void"/>
      </return>
    </docblock>
    <parameter name="container" byreference="false" type="object">
      <type full="Illuminate\Contracts\Container\Container" namespace="Illuminate\Contracts\Container" name="Container"/>
    </parameter>
  </method>
</class>
