<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="Illuminate\Database\Eloquent\Builder" namespace="Illuminate\Database\Eloquent" name="Builder" abstract="false" final="false" start="14" end="957">
  <file path="/home/robert/Desktop/Hogeschool/2ejaars Development/DevBOpdrachten/project56/http/laravel/vendor/laravel/framework/src/Illuminate/Database/Eloquent" file="Builder.php" realpath="/home/robert/Desktop/Hogeschool/2ejaars Development/DevBOpdrachten/project56/http/laravel/vendor/laravel/framework/src/Illuminate/Database/Eloquent/Builder.php" size="27499" time="2015-12-17T18:44:09+00:00" unixtime="1450377849" sha1="19ea7da0821376c4cc549083bedf993c630dc4b2" relative="vendor/laravel/framework/src/Illuminate/Database/Eloquent/Builder.php"/>
  <member name="query" visibility="protected" line="21">
    <docblock>
      <description compact="The base query builder instance."/>
      <var type="object">
        <type full="\Illuminate\Database\Query\Builder" namespace="\Illuminate\Database\Query" name="Builder"/>
      </var>
    </docblock>
  </member>
  <member name="model" visibility="protected" line="28">
    <docblock>
      <description compact="The model being queried."/>
      <var type="object">
        <type full="\Illuminate\Database\Eloquent\Model" namespace="\Illuminate\Database\Eloquent" name="Model"/>
      </var>
    </docblock>
  </member>
  <member name="eagerLoad" type="array" default="" visibility="protected" line="35">
    <docblock>
      <description compact="The relationships that should be eager loaded."/>
      <var type="array"/>
    </docblock>
  </member>
  <member name="macros" type="array" default="" visibility="protected" line="42">
    <docblock>
      <description compact="All of the registered builder macros."/>
      <var type="array"/>
    </docblock>
  </member>
  <member name="onDelete" visibility="protected" line="49">
    <docblock>
      <description compact="A replacement for the typical delete function."/>
      <var type="object">
        <type full="\Closure" namespace="" name="Closure"/>
      </var>
    </docblock>
  </member>
  <member name="passthru" type="array" default="" visibility="protected" line="56">
    <docblock>
      <description compact="The methods that should be returned from query builder."/>
      <var type="array"/>
    </docblock>
  </member>
  <constructor name="__construct" start="67" end="70" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Create a new Eloquent query builder instance."/>
      <param type="object" variable="$query">
        <type full="\Illuminate\Database\Query\Builder" namespace="\Illuminate\Database\Query" name="Builder"/>
      </param>
      <return type="object">
        <type full="Illuminate\Database\Eloquent\void" namespace="Illuminate\Database\Eloquent" name="void"/>
      </return>
    </docblock>
    <parameter name="query" byreference="false" type="object">
      <type full="Illuminate\Database\Query\Builder" namespace="Illuminate\Database\Query" name="Builder"/>
    </parameter>
  </constructor>
  <method name="find" start="79" end="88" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Find a model by its primary key."/>
      <param type="mixed" variable="$id"/>
      <param type="array" variable="$columns"/>
      <return type="object">
        <type full="\Illuminate\Database\Eloquent\Model|\Illuminate\Database\Eloquent\Collection|null" namespace="\Illuminate\Database\Eloquent\Model|\Illuminate\Database\Eloquent" name="Collection|null"/>
      </return>
    </docblock>
    <parameter name="id" byreference="false" type="{unknown}"/>
    <parameter name="columns" byreference="false" type="array" default=""/>
  </method>
  <method name="findMany" start="97" end="106" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Find a model by its primary key."/>
      <param type="array" variable="$ids"/>
      <param type="array" variable="$columns"/>
      <return type="object">
        <type full="\Illuminate\Database\Eloquent\Collection" namespace="\Illuminate\Database\Eloquent" name="Collection"/>
      </return>
    </docblock>
    <parameter name="ids" byreference="false" type="{unknown}"/>
    <parameter name="columns" byreference="false" type="array" default=""/>
  </method>
  <method name="findOrFail" start="117" end="130" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Find a model by its primary key or throw an exception."/>
      <param type="mixed" variable="$id"/>
      <param type="array" variable="$columns"/>
      <return type="object">
        <type full="\Illuminate\Database\Eloquent\Model|\Illuminate\Database\Eloquent\Collection" namespace="\Illuminate\Database\Eloquent\Model|\Illuminate\Database\Eloquent" name="Collection"/>
      </return>
      <throws type="object">
        <type full="\Illuminate\Database\Eloquent\ModelNotFoundException" namespace="\Illuminate\Database\Eloquent" name="ModelNotFoundException"/>
      </throws>
    </docblock>
    <parameter name="id" byreference="false" type="{unknown}"/>
    <parameter name="columns" byreference="false" type="array" default=""/>
  </method>
  <method name="first" start="138" end="141" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Execute the query and get the first result."/>
      <param type="array" variable="$columns"/>
      <return type="object">
        <type full="\Illuminate\Database\Eloquent\Model|static|null" namespace="\Illuminate\Database\Eloquent" name="Model|static|null"/>
      </return>
    </docblock>
    <parameter name="columns" byreference="false" type="array" default=""/>
  </method>
  <method name="firstOrFail" start="151" end="158" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Execute the query and get the first result or throw an exception."/>
      <param type="array" variable="$columns"/>
      <return type="object">
        <type full="\Illuminate\Database\Eloquent\Model|static" namespace="\Illuminate\Database\Eloquent" name="Model|static"/>
      </return>
      <throws type="object">
        <type full="\Illuminate\Database\Eloquent\ModelNotFoundException" namespace="\Illuminate\Database\Eloquent" name="ModelNotFoundException"/>
      </throws>
    </docblock>
    <parameter name="columns" byreference="false" type="array" default=""/>
  </method>
  <method name="get" start="166" end="178" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Execute the query as a &quot;select&quot; statement."/>
      <param type="array" variable="$columns"/>
      <return type="array" of="object">
        <type full="\Illuminate\Database\Eloquent\Collection|static" namespace="\Illuminate\Database\Eloquent" name="Collection|static"/>
      </return>
    </docblock>
    <parameter name="columns" byreference="false" type="array" default=""/>
    <inline>
      <comment value="If we actually found models we will also eager load any relationships that" line="170"/>
      <comment value="have been specified as needing to be eager loaded, which will solve the" line="171"/>
      <comment value="n+1 query issue for the developers to avoid running a lot of queries." line="172"/>
    </inline>
  </method>
  <method name="value" start="186" end="193" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get a single column's value from the first result of a query."/>
      <param type="string" variable="$column"/>
      <return type="mixed"/>
    </docblock>
    <parameter name="column" byreference="false" type="{unknown}"/>
  </method>
  <method name="pluck" start="205" end="208" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get a single column's value from the first result of a query.">This is an alias for the "value" method.</description>
      <param type="string" variable="$column"/>
      <return type="mixed"/>
      <deprecated value="since version 5.1."/>
    </docblock>
    <parameter name="column" byreference="false" type="{unknown}"/>
  </method>
  <method name="chunk" start="217" end="233" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Chunk the results of the query."/>
      <param type="int" variable="$count"/>
      <param type="object" variable="$callback">
        <type full="Illuminate\Database\Eloquent\callable" namespace="Illuminate\Database\Eloquent" name="callable"/>
      </param>
      <return type="object">
        <type full="Illuminate\Database\Eloquent\void" namespace="Illuminate\Database\Eloquent" name="void"/>
      </return>
    </docblock>
    <parameter name="count" byreference="false" type="{unknown}"/>
    <parameter name="callback" byreference="false" type="object">
      <type full="Illuminate\Database\Eloquent\callable" namespace="Illuminate\Database\Eloquent" name="callable"/>
    </parameter>
  </method>
  <method name="lists" start="242" end="258" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get an array with the values of a given column."/>
      <param type="string" variable="$column"/>
      <param type="object" variable="$key">
        <type full="Illuminate\Database\Eloquent\string|null" namespace="Illuminate\Database\Eloquent" name="string|null"/>
      </param>
      <return type="object">
        <type full="\Illuminate\Support\Collection" namespace="\Illuminate\Support" name="Collection"/>
      </return>
    </docblock>
    <parameter name="column" byreference="false" type="{unknown}"/>
    <parameter name="key" byreference="false" type="{unknown}" default="" constant="null"/>
    <inline>
      <comment value="If the model has a mutator for the requested column, we will spin through" line="246"/>
      <comment value="the results and mutate the values so that the mutated version of these" line="247"/>
      <comment value="columns are returned as you would expect from these Eloquent models." line="248"/>
    </inline>
  </method>
  <method name="paginate" start="271" end="284" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Paginate the given query."/>
      <param type="int" variable="$perPage"/>
      <param type="array" variable="$columns"/>
      <param type="string" variable="$pageName"/>
      <param type="object" variable="$page">
        <type full="Illuminate\Database\Eloquent\int|null" namespace="Illuminate\Database\Eloquent" name="int|null"/>
      </param>
      <return type="object">
        <type full="\Illuminate\Contracts\Pagination\LengthAwarePaginator" namespace="\Illuminate\Contracts\Pagination" name="LengthAwarePaginator"/>
      </return>
      <throws type="object">
        <type full="\InvalidArgumentException" namespace="" name="InvalidArgumentException"/>
      </throws>
    </docblock>
    <parameter name="perPage" byreference="false" type="{unknown}" default="" constant="null"/>
    <parameter name="columns" byreference="false" type="array" default=""/>
    <parameter name="pageName" byreference="false" type="string" default="'page'"/>
    <parameter name="page" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="simplePaginate" start="294" end="306" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Paginate the given query into a simple paginator."/>
      <param type="int" variable="$perPage"/>
      <param type="array" variable="$columns"/>
      <param type="string" variable="$pageName"/>
      <return type="object">
        <type full="\Illuminate\Contracts\Pagination\Paginator" namespace="\Illuminate\Contracts\Pagination" name="Paginator"/>
      </return>
    </docblock>
    <parameter name="perPage" byreference="false" type="{unknown}" default="" constant="null"/>
    <parameter name="columns" byreference="false" type="array" default=""/>
    <parameter name="pageName" byreference="false" type="string" default="'page'"/>
  </method>
  <method name="update" start="314" end="317" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Update a record in the database."/>
      <param type="array" variable="$values"/>
      <return type="int"/>
    </docblock>
    <parameter name="values" byreference="false" type="array"/>
  </method>
  <method name="increment" start="327" end="332" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Increment a column's value by a given amount."/>
      <param type="string" variable="$column"/>
      <param type="int" variable="$amount"/>
      <param type="array" variable="$extra"/>
      <return type="int"/>
    </docblock>
    <parameter name="column" byreference="false" type="{unknown}"/>
    <parameter name="amount" byreference="false" type="integer" default="1"/>
    <parameter name="extra" byreference="false" type="array" default=""/>
  </method>
  <method name="decrement" start="342" end="347" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Decrement a column's value by a given amount."/>
      <param type="string" variable="$column"/>
      <param type="int" variable="$amount"/>
      <param type="array" variable="$extra"/>
      <return type="int"/>
    </docblock>
    <parameter name="column" byreference="false" type="{unknown}"/>
    <parameter name="amount" byreference="false" type="integer" default="1"/>
    <parameter name="extra" byreference="false" type="array" default=""/>
  </method>
  <method name="addUpdatedAtColumn" start="355" end="364" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Add the &quot;updated at&quot; column to an array of values."/>
      <param type="array" variable="$values"/>
      <return type="array"/>
    </docblock>
    <parameter name="values" byreference="false" type="array"/>
  </method>
  <method name="delete" start="371" end="378" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Delete a record from the database."/>
      <return type="mixed"/>
    </docblock>
  </method>
  <method name="forceDelete" start="385" end="388" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Run the default delete function on the builder."/>
      <return type="mixed"/>
    </docblock>
  </method>
  <method name="onDelete" start="396" end="399" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Register a replacement for the default delete function."/>
      <param type="object" variable="$callback">
        <type full="\Closure" namespace="" name="Closure"/>
      </param>
      <return type="object">
        <type full="Illuminate\Database\Eloquent\void" namespace="Illuminate\Database\Eloquent" name="void"/>
      </return>
    </docblock>
    <parameter name="callback" byreference="false" type="object">
      <type full="Closure" namespace="" name="Closure"/>
    </parameter>
  </method>
  <method name="getModels" start="407" end="414" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get the hydrated models without eager loading."/>
      <param type="array" variable="$columns"/>
      <return type="array" of="object">
        <type full="\Illuminate\Database\Eloquent\Model" namespace="\Illuminate\Database\Eloquent" name="Model"/>
      </return>
    </docblock>
    <parameter name="columns" byreference="false" type="array" default=""/>
  </method>
  <method name="eagerLoadRelations" start="422" end="434" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Eager load the relationships for the models."/>
      <param type="array" variable="$models"/>
      <return type="array"/>
    </docblock>
    <parameter name="models" byreference="false" type="array"/>
  </method>
  <method name="loadRelation" start="444" end="463" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Eagerly load the relationship on a set of models."/>
      <param type="array" variable="$models"/>
      <param type="string" variable="$name"/>
      <param type="object" variable="$constraints">
        <type full="\Closure" namespace="" name="Closure"/>
      </param>
      <return type="array"/>
    </docblock>
    <parameter name="models" byreference="false" type="array"/>
    <parameter name="name" byreference="false" type="{unknown}"/>
    <parameter name="constraints" byreference="false" type="object">
      <type full="Closure" namespace="" name="Closure"/>
    </parameter>
    <inline>
      <comment value="First we will &quot;back up&quot; the existing where conditions on the query so we can" line="446"/>
      <comment value="add our eager constraints. Then we will merge the wheres that were on the" line="447"/>
      <comment value="query back to it in order that any where conditions might be specified." line="448"/>
      <comment value="Once we have the results, we just match those back up to their parent models" line="457"/>
      <comment value="using the relationship instance. Then we just return the finished arrays" line="458"/>
      <comment value="of models which have been eagerly hydrated and are readied for return." line="459"/>
    </inline>
  </method>
  <method name="getRelation" start="471" end="490" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get the relation instance for the given relation name."/>
      <param type="string" variable="$relation"/>
      <return type="object">
        <type full="\Illuminate\Database\Eloquent\Relations\Relation" namespace="\Illuminate\Database\Eloquent\Relations" name="Relation"/>
      </return>
    </docblock>
    <parameter name="relation" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="We want to run a relationship query without any constrains so that we will" line="473"/>
      <comment value="not have to remove these where clauses manually which gets really hacky" line="474"/>
      <comment value="and is error prone while we remove the developer's own where clauses." line="475"/>
      <comment value="If there are nested relationships set on the query, we will put those onto" line="482"/>
      <comment value="the query instances so that they can be handled after this relationship" line="483"/>
      <comment value="is loaded. In this way they will all trickle down as they are loaded." line="484"/>
    </inline>
  </method>
  <method name="nestedRelations" start="498" end="512" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Get the deeply nested relations for a given top-level relation."/>
      <param type="string" variable="$relation"/>
      <return type="array"/>
    </docblock>
    <parameter name="relation" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="We are basically looking for any relationships that are nested deeper than" line="502"/>
      <comment value="the given top-level relationship. We will just check for any relations" line="503"/>
      <comment value="that start with the given top relations and adds them to our arrays." line="504"/>
    </inline>
  </method>
  <method name="isNested" start="521" end="526" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Determine if the relationship is nested."/>
      <param type="string" variable="$name"/>
      <param type="string" variable="$relation"/>
      <return type="object">
        <type full="Illuminate\Database\Eloquent\bool" namespace="Illuminate\Database\Eloquent" name="bool"/>
      </return>
    </docblock>
    <parameter name="name" byreference="false" type="{unknown}"/>
    <parameter name="relation" byreference="false" type="{unknown}"/>
  </method>
  <method name="where" start="537" end="550" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Add a basic where clause to the query."/>
      <param type="string" variable="$column"/>
      <param type="string" variable="$operator"/>
      <param type="mixed" variable="$value"/>
      <param type="string" variable="$boolean"/>
      <return type="object">
        <type full="Illuminate\Database\Eloquent\$this" namespace="Illuminate\Database\Eloquent" name="$this"/>
      </return>
    </docblock>
    <parameter name="column" byreference="false" type="{unknown}"/>
    <parameter name="operator" byreference="false" type="{unknown}" default="" constant="null"/>
    <parameter name="value" byreference="false" type="{unknown}" default="" constant="null"/>
    <parameter name="boolean" byreference="false" type="string" default="'and'"/>
  </method>
  <method name="orWhere" start="560" end="563" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Add an &quot;or where&quot; clause to the query."/>
      <param type="string" variable="$column"/>
      <param type="string" variable="$operator"/>
      <param type="mixed" variable="$value"/>
      <return type="object">
        <type full="\Illuminate\Database\Eloquent\Builder|static" namespace="\Illuminate\Database\Eloquent" name="Builder|static"/>
      </return>
    </docblock>
    <parameter name="column" byreference="false" type="{unknown}"/>
    <parameter name="operator" byreference="false" type="{unknown}" default="" constant="null"/>
    <parameter name="value" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="has" start="575" end="590" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Add a relationship count condition to the query."/>
      <param type="string" variable="$relation"/>
      <param type="string" variable="$operator"/>
      <param type="int" variable="$count"/>
      <param type="string" variable="$boolean"/>
      <param type="object" variable="$callback">
        <type full="\Closure|null" namespace="" name="Closure|null"/>
      </param>
      <return type="object">
        <type full="\Illuminate\Database\Eloquent\Builder|static" namespace="\Illuminate\Database\Eloquent" name="Builder|static"/>
      </return>
    </docblock>
    <parameter name="relation" byreference="false" type="{unknown}"/>
    <parameter name="operator" byreference="false" type="string" default="'&gt;='"/>
    <parameter name="count" byreference="false" type="integer" default="1"/>
    <parameter name="boolean" byreference="false" type="string" default="'and'"/>
    <parameter name="callback" byreference="false" type="{unknown}" default="" constant="null">
      <type full="Closure" namespace="" name="Closure"/>
    </parameter>
  </method>
  <method name="hasNested" start="602" end="618" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Add nested relationship count conditions to the query."/>
      <param type="string" variable="$relations"/>
      <param type="string" variable="$operator"/>
      <param type="int" variable="$count"/>
      <param type="string" variable="$boolean"/>
      <param type="object" variable="$callback">
        <type full="\Closure|null" namespace="" name="Closure|null"/>
      </param>
      <return type="object">
        <type full="\Illuminate\Database\Eloquent\Builder|static" namespace="\Illuminate\Database\Eloquent" name="Builder|static"/>
      </return>
    </docblock>
    <parameter name="relations" byreference="false" type="{unknown}"/>
    <parameter name="operator" byreference="false" type="string" default="'&gt;='"/>
    <parameter name="count" byreference="false" type="integer" default="1"/>
    <parameter name="boolean" byreference="false" type="string" default="'and'"/>
    <parameter name="callback" byreference="false" type="{unknown}" default="" constant="null"/>
    <inline>
      <comment value="In order to nest &quot;has&quot;, we need to add count relation constraints on the" line="606"/>
      <comment value="callback Closure. We'll do this by simply passing the Closure its own" line="607"/>
      <comment value="reference to itself so it calls itself recursively on each segment." line="608"/>
    </inline>
  </method>
  <method name="doesntHave" start="628" end="631" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Add a relationship count condition to the query."/>
      <param type="string" variable="$relation"/>
      <param type="string" variable="$boolean"/>
      <param type="object" variable="$callback">
        <type full="\Closure|null" namespace="" name="Closure|null"/>
      </param>
      <return type="object">
        <type full="\Illuminate\Database\Eloquent\Builder|static" namespace="\Illuminate\Database\Eloquent" name="Builder|static"/>
      </return>
    </docblock>
    <parameter name="relation" byreference="false" type="{unknown}"/>
    <parameter name="boolean" byreference="false" type="string" default="'and'"/>
    <parameter name="callback" byreference="false" type="{unknown}" default="" constant="null">
      <type full="Closure" namespace="" name="Closure"/>
    </parameter>
  </method>
  <method name="whereHas" start="642" end="645" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Add a relationship count condition to the query with where clauses."/>
      <param type="string" variable="$relation"/>
      <param type="object" variable="$callback">
        <type full="\Closure" namespace="" name="Closure"/>
      </param>
      <param type="string" variable="$operator"/>
      <param type="int" variable="$count"/>
      <return type="object">
        <type full="\Illuminate\Database\Eloquent\Builder|static" namespace="\Illuminate\Database\Eloquent" name="Builder|static"/>
      </return>
    </docblock>
    <parameter name="relation" byreference="false" type="{unknown}"/>
    <parameter name="callback" byreference="false" type="object">
      <type full="Closure" namespace="" name="Closure"/>
    </parameter>
    <parameter name="operator" byreference="false" type="string" default="'&gt;='"/>
    <parameter name="count" byreference="false" type="integer" default="1"/>
  </method>
  <method name="whereDoesntHave" start="654" end="657" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Add a relationship count condition to the query with where clauses."/>
      <param type="string" variable="$relation"/>
      <param type="object" variable="$callback">
        <type full="\Closure|null" namespace="" name="Closure|null"/>
      </param>
      <return type="object">
        <type full="\Illuminate\Database\Eloquent\Builder|static" namespace="\Illuminate\Database\Eloquent" name="Builder|static"/>
      </return>
    </docblock>
    <parameter name="relation" byreference="false" type="{unknown}"/>
    <parameter name="callback" byreference="false" type="{unknown}" default="" constant="null">
      <type full="Closure" namespace="" name="Closure"/>
    </parameter>
  </method>
  <method name="orHas" start="667" end="670" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Add a relationship count condition to the query with an &quot;or&quot;."/>
      <param type="string" variable="$relation"/>
      <param type="string" variable="$operator"/>
      <param type="int" variable="$count"/>
      <return type="object">
        <type full="\Illuminate\Database\Eloquent\Builder|static" namespace="\Illuminate\Database\Eloquent" name="Builder|static"/>
      </return>
    </docblock>
    <parameter name="relation" byreference="false" type="{unknown}"/>
    <parameter name="operator" byreference="false" type="string" default="'&gt;='"/>
    <parameter name="count" byreference="false" type="integer" default="1"/>
  </method>
  <method name="orWhereHas" start="681" end="684" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Add a relationship count condition to the query with where clauses and an &quot;or&quot;."/>
      <param type="string" variable="$relation"/>
      <param type="object" variable="$callback">
        <type full="\Closure" namespace="" name="Closure"/>
      </param>
      <param type="string" variable="$operator"/>
      <param type="int" variable="$count"/>
      <return type="object">
        <type full="\Illuminate\Database\Eloquent\Builder|static" namespace="\Illuminate\Database\Eloquent" name="Builder|static"/>
      </return>
    </docblock>
    <parameter name="relation" byreference="false" type="{unknown}"/>
    <parameter name="callback" byreference="false" type="object">
      <type full="Closure" namespace="" name="Closure"/>
    </parameter>
    <parameter name="operator" byreference="false" type="string" default="'&gt;='"/>
    <parameter name="count" byreference="false" type="integer" default="1"/>
  </method>
  <method name="addHasWhere" start="696" end="705" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Add the &quot;has&quot; condition where clause to the query."/>
      <param type="object" variable="$hasQuery">
        <type full="\Illuminate\Database\Eloquent\Builder" namespace="\Illuminate\Database\Eloquent" name="Builder"/>
      </param>
      <param type="object" variable="$relation">
        <type full="\Illuminate\Database\Eloquent\Relations\Relation" namespace="\Illuminate\Database\Eloquent\Relations" name="Relation"/>
      </param>
      <param type="string" variable="$operator"/>
      <param type="int" variable="$count"/>
      <param type="string" variable="$boolean"/>
      <return type="object">
        <type full="\Illuminate\Database\Eloquent\Builder" namespace="\Illuminate\Database\Eloquent" name="Builder"/>
      </return>
    </docblock>
    <parameter name="hasQuery" byreference="false" type="object">
      <type full="Illuminate\Database\Eloquent\Builder" namespace="Illuminate\Database\Eloquent" name="Builder"/>
    </parameter>
    <parameter name="relation" byreference="false" type="object">
      <type full="Illuminate\Database\Eloquent\Relations\Relation" namespace="Illuminate\Database\Eloquent\Relations" name="Relation"/>
    </parameter>
    <parameter name="operator" byreference="false" type="{unknown}"/>
    <parameter name="count" byreference="false" type="{unknown}"/>
    <parameter name="boolean" byreference="false" type="{unknown}"/>
  </method>
  <method name="mergeWheresToHas" start="714" end="728" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Merge the &quot;wheres&quot; from a relation query to a has query."/>
      <param type="object" variable="$hasQuery">
        <type full="\Illuminate\Database\Eloquent\Builder" namespace="\Illuminate\Database\Eloquent" name="Builder"/>
      </param>
      <param type="object" variable="$relation">
        <type full="\Illuminate\Database\Eloquent\Relations\Relation" namespace="\Illuminate\Database\Eloquent\Relations" name="Relation"/>
      </param>
      <return type="object">
        <type full="Illuminate\Database\Eloquent\void" namespace="Illuminate\Database\Eloquent" name="void"/>
      </return>
    </docblock>
    <parameter name="hasQuery" byreference="false" type="object">
      <type full="Illuminate\Database\Eloquent\Builder" namespace="Illuminate\Database\Eloquent" name="Builder"/>
    </parameter>
    <parameter name="relation" byreference="false" type="object">
      <type full="Illuminate\Database\Eloquent\Relations\Relation" namespace="Illuminate\Database\Eloquent\Relations" name="Relation"/>
    </parameter>
    <inline>
      <comment value="Here we have the &quot;has&quot; query and the original relation. We need to copy over any" line="716"/>
      <comment value="where clauses the developer may have put in the relationship function over to" line="717"/>
      <comment value="the has query, and then copy the bindings from the &quot;has&quot; query to the main." line="718"/>
    </inline>
  </method>
  <method name="getHasRelationQuery" start="736" end="741" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Get the &quot;has relation&quot; base query instance."/>
      <param type="string" variable="$relation"/>
      <return type="object">
        <type full="\Illuminate\Database\Eloquent\Relations\Relation" namespace="\Illuminate\Database\Eloquent\Relations" name="Relation"/>
      </return>
    </docblock>
    <parameter name="relation" byreference="false" type="{unknown}"/>
  </method>
  <method name="with" start="749" end="760" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Set the relationships that should be eager loaded."/>
      <param type="mixed" variable="$relations"/>
      <return type="object">
        <type full="Illuminate\Database\Eloquent\$this" namespace="Illuminate\Database\Eloquent" name="$this"/>
      </return>
    </docblock>
    <parameter name="relations" byreference="false" type="{unknown}"/>
  </method>
  <method name="parseRelations" start="768" end="791" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Parse a list of relations into individuals."/>
      <param type="array" variable="$relations"/>
      <return type="array"/>
    </docblock>
    <parameter name="relations" byreference="false" type="array"/>
  </method>
  <method name="parseNested" start="800" end="816" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Parse the nested relationships in a relation."/>
      <param type="string" variable="$name"/>
      <param type="array" variable="$results"/>
      <return type="array"/>
    </docblock>
    <parameter name="name" byreference="false" type="{unknown}"/>
    <parameter name="results" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="If the relation has already been set on the result array, we will not set it" line="804"/>
      <comment value="again, since that would override any constraints that were already placed" line="805"/>
      <comment value="on the relationships. We will only set the ones that are not specified." line="806"/>
    </inline>
  </method>
  <method name="callScope" start="825" end="830" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Call the given model scope on the underlying model."/>
      <param type="string" variable="$scope"/>
      <param type="array" variable="$parameters"/>
      <return type="object">
        <type full="\Illuminate\Database\Query\Builder" namespace="\Illuminate\Database\Query" name="Builder"/>
      </return>
    </docblock>
    <parameter name="scope" byreference="false" type="{unknown}"/>
    <parameter name="parameters" byreference="false" type="{unknown}"/>
  </method>
  <method name="getQuery" start="837" end="840" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get the underlying query builder instance."/>
      <return type="object">
        <type full="\Illuminate\Database\Query\Builder|static" namespace="\Illuminate\Database\Query" name="Builder|static"/>
      </return>
    </docblock>
  </method>
  <method name="setQuery" start="848" end="853" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Set the underlying query builder instance."/>
      <param type="object" variable="$query">
        <type full="\Illuminate\Database\Query\Builder" namespace="\Illuminate\Database\Query" name="Builder"/>
      </param>
      <return type="object">
        <type full="Illuminate\Database\Eloquent\$this" namespace="Illuminate\Database\Eloquent" name="$this"/>
      </return>
    </docblock>
    <parameter name="query" byreference="false" type="{unknown}"/>
  </method>
  <method name="getEagerLoads" start="860" end="863" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get the relationships being eagerly loaded."/>
      <return type="array"/>
    </docblock>
  </method>
  <method name="setEagerLoads" start="871" end="876" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Set the relationships being eagerly loaded."/>
      <param type="array" variable="$eagerLoad"/>
      <return type="object">
        <type full="Illuminate\Database\Eloquent\$this" namespace="Illuminate\Database\Eloquent" name="$this"/>
      </return>
    </docblock>
    <parameter name="eagerLoad" byreference="false" type="array"/>
  </method>
  <method name="getModel" start="883" end="886" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get the model instance being queried."/>
      <return type="object">
        <type full="\Illuminate\Database\Eloquent\Model" namespace="\Illuminate\Database\Eloquent" name="Model"/>
      </return>
    </docblock>
  </method>
  <method name="setModel" start="894" end="901" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Set a model instance for the model being queried."/>
      <param type="object" variable="$model">
        <type full="\Illuminate\Database\Eloquent\Model" namespace="\Illuminate\Database\Eloquent" name="Model"/>
      </param>
      <return type="object">
        <type full="Illuminate\Database\Eloquent\$this" namespace="Illuminate\Database\Eloquent" name="$this"/>
      </return>
    </docblock>
    <parameter name="model" byreference="false" type="object">
      <type full="Illuminate\Database\Eloquent\Model" namespace="Illuminate\Database\Eloquent" name="Model"/>
    </parameter>
  </method>
  <method name="macro" start="910" end="913" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Extend the builder with a given callback."/>
      <param type="string" variable="$name"/>
      <param type="object" variable="$callback">
        <type full="\Closure" namespace="" name="Closure"/>
      </param>
      <return type="object">
        <type full="Illuminate\Database\Eloquent\void" namespace="Illuminate\Database\Eloquent" name="void"/>
      </return>
    </docblock>
    <parameter name="name" byreference="false" type="{unknown}"/>
    <parameter name="callback" byreference="false" type="object">
      <type full="Closure" namespace="" name="Closure"/>
    </parameter>
  </method>
  <method name="getMacro" start="921" end="924" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get the given macro by name."/>
      <param type="string" variable="$name"/>
      <return type="object">
        <type full="\Closure" namespace="" name="Closure"/>
      </return>
    </docblock>
    <parameter name="name" byreference="false" type="{unknown}"/>
  </method>
  <method name="__call" start="933" end="946" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Dynamically handle calls into the query instance."/>
      <param type="string" variable="$method"/>
      <param type="array" variable="$parameters"/>
      <return type="mixed"/>
    </docblock>
    <parameter name="method" byreference="false" type="{unknown}"/>
    <parameter name="parameters" byreference="false" type="{unknown}"/>
  </method>
  <method name="__clone" start="953" end="956" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Force a clone of the underlying query builder when cloning."/>
      <return type="object">
        <type full="Illuminate\Database\Eloquent\void" namespace="Illuminate\Database\Eloquent" name="void"/>
      </return>
    </docblock>
  </method>
</class>
