<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="Illuminate\Events\Dispatcher" namespace="Illuminate\Events" name="Dispatcher" abstract="false" final="false" start="14" end="499">
  <file path="/home/robert/Desktop/Hogeschool/2ejaars Development/DevBOpdrachten/project56/http/laravel/vendor/laravel/framework/src/Illuminate/Events" file="Dispatcher.php" realpath="/home/robert/Desktop/Hogeschool/2ejaars Development/DevBOpdrachten/project56/http/laravel/vendor/laravel/framework/src/Illuminate/Events/Dispatcher.php" size="13226" time="2015-12-17T18:44:09+00:00" unixtime="1450377849" sha1="d7ebf950856aae275ecd49a97e94879df7a0a7c4" relative="vendor/laravel/framework/src/Illuminate/Events/Dispatcher.php"/>
  <implements full="Illuminate\Contracts\Events\Dispatcher" namespace="Illuminate\Contracts\Events" name="Dispatcher"/>
  <member name="container" visibility="protected" line="21">
    <docblock>
      <description compact="The IoC container instance."/>
      <var type="object">
        <type full="\Illuminate\Contracts\Container\Container" namespace="\Illuminate\Contracts\Container" name="Container"/>
      </var>
    </docblock>
  </member>
  <member name="listeners" type="array" default="" visibility="protected" line="28">
    <docblock>
      <description compact="The registered event listeners."/>
      <var type="array"/>
    </docblock>
  </member>
  <member name="wildcards" type="array" default="" visibility="protected" line="35">
    <docblock>
      <description compact="The wildcard listeners."/>
      <var type="array"/>
    </docblock>
  </member>
  <member name="sorted" type="array" default="" visibility="protected" line="42">
    <docblock>
      <description compact="The sorted event listeners."/>
      <var type="array"/>
    </docblock>
  </member>
  <member name="firing" type="array" default="" visibility="protected" line="49">
    <docblock>
      <description compact="The event firing stack."/>
      <var type="array"/>
    </docblock>
  </member>
  <member name="queueResolver" visibility="protected" line="56">
    <docblock>
      <description compact="The queue resolver instance."/>
      <var type="object">
        <type full="Illuminate\Events\callable" namespace="Illuminate\Events" name="callable"/>
      </var>
    </docblock>
  </member>
  <constructor name="__construct" start="64" end="67" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Create a new event dispatcher instance."/>
      <param type="object" variable="$container">
        <type full="\Illuminate\Contracts\Container\Container|null" namespace="\Illuminate\Contracts\Container" name="Container|null"/>
      </param>
      <return type="object">
        <type full="Illuminate\Events\void" namespace="Illuminate\Events" name="void"/>
      </return>
    </docblock>
    <parameter name="container" byreference="false" type="{unknown}" default="" constant="null">
      <type full="Illuminate\Contracts\Container\Container" namespace="Illuminate\Contracts\Container" name="Container"/>
    </parameter>
  </constructor>
  <method name="listen" start="77" end="88" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Register an event listener with the dispatcher."/>
      <param type="object" variable="$events">
        <type full="Illuminate\Events\string|array" namespace="Illuminate\Events" name="string|array"/>
      </param>
      <param type="mixed" variable="$listener"/>
      <param type="int" variable="$priority"/>
      <return type="object">
        <type full="Illuminate\Events\void" namespace="Illuminate\Events" name="void"/>
      </return>
    </docblock>
    <parameter name="events" byreference="false" type="{unknown}"/>
    <parameter name="listener" byreference="false" type="{unknown}"/>
    <parameter name="priority" byreference="false" type="integer" default="0"/>
  </method>
  <method name="setupWildcardListen" start="97" end="100" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Setup a wildcard listener callback."/>
      <param type="string" variable="$event"/>
      <param type="mixed" variable="$listener"/>
      <return type="object">
        <type full="Illuminate\Events\void" namespace="Illuminate\Events" name="void"/>
      </return>
    </docblock>
    <parameter name="event" byreference="false" type="{unknown}"/>
    <parameter name="listener" byreference="false" type="{unknown}"/>
  </method>
  <method name="hasListeners" start="108" end="111" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Determine if a given event has listeners."/>
      <param type="string" variable="$eventName"/>
      <return type="object">
        <type full="Illuminate\Events\bool" namespace="Illuminate\Events" name="bool"/>
      </return>
    </docblock>
    <parameter name="eventName" byreference="false" type="{unknown}"/>
  </method>
  <method name="push" start="120" end="125" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Register an event and payload to be fired later."/>
      <param type="string" variable="$event"/>
      <param type="array" variable="$payload"/>
      <return type="object">
        <type full="Illuminate\Events\void" namespace="Illuminate\Events" name="void"/>
      </return>
    </docblock>
    <parameter name="event" byreference="false" type="{unknown}"/>
    <parameter name="payload" byreference="false" type="array" default=""/>
  </method>
  <method name="subscribe" start="133" end="138" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Register an event subscriber with the dispatcher."/>
      <param type="object" variable="$subscriber">
        <type full="Illuminate\Events\object|string" namespace="Illuminate\Events" name="object|string"/>
      </param>
      <return type="object">
        <type full="Illuminate\Events\void" namespace="Illuminate\Events" name="void"/>
      </return>
    </docblock>
    <parameter name="subscriber" byreference="false" type="{unknown}"/>
  </method>
  <method name="resolveSubscriber" start="146" end="153" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Resolve the subscriber instance."/>
      <param type="object" variable="$subscriber">
        <type full="Illuminate\Events\object|string" namespace="Illuminate\Events" name="object|string"/>
      </param>
      <return type="mixed"/>
    </docblock>
    <parameter name="subscriber" byreference="false" type="{unknown}"/>
  </method>
  <method name="until" start="162" end="165" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Fire an event until the first non-null response is returned."/>
      <param type="object" variable="$event">
        <type full="Illuminate\Events\string|object" namespace="Illuminate\Events" name="string|object"/>
      </param>
      <param type="array" variable="$payload"/>
      <return type="mixed"/>
    </docblock>
    <parameter name="event" byreference="false" type="{unknown}"/>
    <parameter name="payload" byreference="false" type="array" default=""/>
  </method>
  <method name="flush" start="173" end="176" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Flush a set of pushed events."/>
      <param type="string" variable="$event"/>
      <return type="object">
        <type full="Illuminate\Events\void" namespace="Illuminate\Events" name="void"/>
      </return>
    </docblock>
    <parameter name="event" byreference="false" type="{unknown}"/>
  </method>
  <method name="firing" start="183" end="186" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get the event that is currently firing."/>
      <return type="string"/>
    </docblock>
  </method>
  <method name="fire" start="196" end="245" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Fire an event and call the listeners."/>
      <param type="object" variable="$event">
        <type full="Illuminate\Events\string|object" namespace="Illuminate\Events" name="string|object"/>
      </param>
      <param type="mixed" variable="$payload"/>
      <param type="object" variable="$halt">
        <type full="Illuminate\Events\bool" namespace="Illuminate\Events" name="bool"/>
      </param>
      <return type="object">
        <type full="Illuminate\Events\array|null" namespace="Illuminate\Events" name="array|null"/>
      </return>
    </docblock>
    <parameter name="event" byreference="false" type="{unknown}"/>
    <parameter name="payload" byreference="false" type="array" default=""/>
    <parameter name="halt" byreference="false" type="boolean" default="false"/>
    <inline>
      <comment value="When the given &quot;event&quot; is actually an object we will assume it is an event" line="198"/>
      <comment value="object and use the class as the event name and this event itself as the" line="199"/>
      <comment value="payload to the handler, which makes object based events quite simple." line="200"/>
      <comment value="If an array is not given to us as the payload, we will turn it into one so" line="207"/>
      <comment value="we can easily use call_user_func_array on the listeners, passing in the" line="208"/>
      <comment value="payload to each of them so that they receive each of these arguments." line="209"/>
    </inline>
  </method>
  <method name="broadcastEvent" start="253" end="264" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Broadcast the given event class."/>
      <param type="object" variable="$event">
        <type full="\Illuminate\Contracts\Broadcasting\ShouldBroadcast" namespace="\Illuminate\Contracts\Broadcasting" name="ShouldBroadcast"/>
      </param>
      <return type="object">
        <type full="Illuminate\Events\void" namespace="Illuminate\Events" name="void"/>
      </return>
    </docblock>
    <parameter name="event" byreference="false" type="{unknown}"/>
  </method>
  <method name="getListeners" start="272" end="281" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get all of the listeners for a given event name."/>
      <param type="string" variable="$eventName"/>
      <return type="array"/>
    </docblock>
    <parameter name="eventName" byreference="false" type="{unknown}"/>
  </method>
  <method name="getWildcardListeners" start="289" end="300" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Get the wildcard listeners for the event."/>
      <param type="string" variable="$eventName"/>
      <return type="array"/>
    </docblock>
    <parameter name="eventName" byreference="false" type="{unknown}"/>
  </method>
  <method name="sortListeners" start="308" end="322" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Sort the listeners for a given event by priority."/>
      <param type="string" variable="$eventName"/>
      <return type="array"/>
    </docblock>
    <parameter name="eventName" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="If listeners exist for the given event, we will sort them by the priority" line="312"/>
      <comment value="so that we can call them in the correct order. We will cache off these" line="313"/>
      <comment value="sorted event listeners so we do not have to re-sort on every events." line="314"/>
    </inline>
  </method>
  <method name="makeListener" start="330" end="333" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Register an event listener with the dispatcher."/>
      <param type="mixed" variable="$listener"/>
      <return type="mixed"/>
    </docblock>
    <parameter name="listener" byreference="false" type="{unknown}"/>
  </method>
  <method name="createClassListener" start="341" end="350" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Create a class based listener using the IoC container."/>
      <param type="mixed" variable="$listener"/>
      <return type="object">
        <type full="\Closure" namespace="" name="Closure"/>
      </return>
    </docblock>
    <parameter name="listener" byreference="false" type="{unknown}"/>
  </method>
  <method name="createClassCallable" start="359" end="368" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Create the class based event callable."/>
      <param type="string" variable="$listener"/>
      <param type="object" variable="$container">
        <type full="\Illuminate\Container\Container" namespace="\Illuminate\Container" name="Container"/>
      </param>
      <return type="object">
        <type full="Illuminate\Events\callable" namespace="Illuminate\Events" name="callable"/>
      </return>
    </docblock>
    <parameter name="listener" byreference="false" type="{unknown}"/>
    <parameter name="container" byreference="false" type="{unknown}"/>
  </method>
  <method name="parseClassCallable" start="376" end="381" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Parse the class listener into class and method."/>
      <param type="string" variable="$listener"/>
      <return type="array"/>
    </docblock>
    <parameter name="listener" byreference="false" type="{unknown}"/>
  </method>
  <method name="handlerShouldBeQueued" start="389" end="398" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Determine if the event handler class should be queued."/>
      <param type="string" variable="$class"/>
      <return type="object">
        <type full="Illuminate\Events\bool" namespace="Illuminate\Events" name="bool"/>
      </return>
    </docblock>
    <parameter name="class" byreference="false" type="{unknown}"/>
  </method>
  <method name="createQueuedHandlerCallable" start="407" end="420" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Create a callable for putting an event handler on the queue."/>
      <param type="string" variable="$class"/>
      <param type="string" variable="$method"/>
      <return type="object">
        <type full="\Closure" namespace="" name="Closure"/>
      </return>
    </docblock>
    <parameter name="class" byreference="false" type="{unknown}"/>
    <parameter name="method" byreference="false" type="{unknown}"/>
  </method>
  <method name="cloneArgumentsForQueueing" start="428" end="433" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Clone the given arguments for queueing."/>
      <param type="array" variable="$arguments"/>
      <return type="array"/>
    </docblock>
    <parameter name="arguments" byreference="false" type="array"/>
  </method>
  <method name="callQueueMethodOnHandler" start="443" end="450" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Call the queue method on the handler class."/>
      <param type="string" variable="$class"/>
      <param type="string" variable="$method"/>
      <param type="array" variable="$arguments"/>
      <return type="object">
        <type full="Illuminate\Events\void" namespace="Illuminate\Events" name="void"/>
      </return>
    </docblock>
    <parameter name="class" byreference="false" type="{unknown}"/>
    <parameter name="method" byreference="false" type="{unknown}"/>
    <parameter name="arguments" byreference="false" type="{unknown}"/>
  </method>
  <method name="forget" start="458" end="461" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Remove a set of listeners from the dispatcher."/>
      <param type="string" variable="$event"/>
      <return type="object">
        <type full="Illuminate\Events\void" namespace="Illuminate\Events" name="void"/>
      </return>
    </docblock>
    <parameter name="event" byreference="false" type="{unknown}"/>
  </method>
  <method name="forgetPushed" start="468" end="475" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Forget all of the pushed listeners."/>
      <return type="object">
        <type full="Illuminate\Events\void" namespace="Illuminate\Events" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="resolveQueue" start="482" end="485" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Get the queue implementation from the resolver."/>
      <return type="object">
        <type full="\Illuminate\Contracts\Queue\Queue" namespace="\Illuminate\Contracts\Queue" name="Queue"/>
      </return>
    </docblock>
  </method>
  <method name="setQueueResolver" start="493" end="498" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Set the queue resolver implementation."/>
      <param type="object" variable="$resolver">
        <type full="Illuminate\Events\callable" namespace="Illuminate\Events" name="callable"/>
      </param>
      <return type="object">
        <type full="Illuminate\Events\$this" namespace="Illuminate\Events" name="$this"/>
      </return>
    </docblock>
    <parameter name="resolver" byreference="false" type="object">
      <type full="Illuminate\Events\callable" namespace="Illuminate\Events" name="callable"/>
    </parameter>
  </method>
</class>
