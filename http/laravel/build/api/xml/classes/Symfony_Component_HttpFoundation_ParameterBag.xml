<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="Symfony\Component\HttpFoundation\ParameterBag" namespace="Symfony\Component\HttpFoundation" name="ParameterBag" abstract="false" final="false" start="19" end="291">
  <file path="/home/robert/Desktop/Hogeschool/2ejaars Development/DevBOpdrachten/project56/http/laravel/vendor/symfony/http-foundation" file="ParameterBag.php" realpath="/home/robert/Desktop/Hogeschool/2ejaars Development/DevBOpdrachten/project56/http/laravel/vendor/symfony/http-foundation/ParameterBag.php" size="8316" time="2015-12-17T18:44:10+00:00" unixtime="1450377850" sha1="8c63853229affebe15b2e76546da140d856897e9" relative="vendor/symfony/http-foundation/ParameterBag.php"/>
  <docblock>
    <description compact="ParameterBag is a container for key/value pairs."/>
    <author value="Fabien Potencier &lt;fabien@symfony.com&gt;"/>
  </docblock>
  <implements full="IteratorAggregate" namespace="" name="IteratorAggregate"/>
  <implements full="Countable" namespace="" name="Countable"/>
  <member name="parameters" visibility="protected" line="26">
    <docblock>
      <description compact="Parameter storage."/>
      <var type="array"/>
    </docblock>
  </member>
  <constructor name="__construct" start="33" end="36" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Constructor."/>
      <param description="An array of parameters" type="array" variable="$parameters"/>
    </docblock>
    <parameter name="parameters" byreference="false" type="array" default=""/>
  </constructor>
  <method name="all" start="43" end="46" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the parameters."/>
      <return description="An array of parameters" type="array"/>
    </docblock>
  </method>
  <method name="keys" start="53" end="56" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the parameter keys."/>
      <return description="An array of parameter keys" type="array"/>
    </docblock>
  </method>
  <method name="replace" start="63" end="66" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Replaces the current parameters by a new set."/>
      <param description="An array of parameters" type="array" variable="$parameters"/>
    </docblock>
    <parameter name="parameters" byreference="false" type="array" default=""/>
  </method>
  <method name="add" start="73" end="76" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Adds parameters."/>
      <param description="An array of parameters" type="array" variable="$parameters"/>
    </docblock>
    <parameter name="parameters" byreference="false" type="array" default=""/>
  </method>
  <method name="get" start="89" end="136" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns a parameter by name."/>
      <param description="The key" type="string" variable="$path"/>
      <param description="The default value if the parameter key does not exist" type="mixed" variable="$default"/>
      <param description="If true, a path like foo[bar] will find deeper items" type="object" variable="$deep">
        <type full="Symfony\Component\HttpFoundation\bool" namespace="Symfony\Component\HttpFoundation" name="bool"/>
      </param>
      <return type="mixed"/>
      <throws type="object">
        <type full="\InvalidArgumentException" namespace="" name="InvalidArgumentException"/>
      </throws>
    </docblock>
    <parameter name="path" byreference="false" type="{unknown}"/>
    <parameter name="default" byreference="false" type="{unknown}" default="" constant="null"/>
    <parameter name="deep" byreference="false" type="boolean" default="false"/>
  </method>
  <method name="set" start="144" end="147" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Sets a parameter by name."/>
      <param description="The key" type="string" variable="$key"/>
      <param description="The value" type="mixed" variable="$value"/>
    </docblock>
    <parameter name="key" byreference="false" type="{unknown}"/>
    <parameter name="value" byreference="false" type="{unknown}"/>
  </method>
  <method name="has" start="156" end="159" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns true if the parameter is defined."/>
      <param description="The key" type="string" variable="$key"/>
      <return description="true if the parameter exists, false otherwise" type="object">
        <type full="Symfony\Component\HttpFoundation\bool" namespace="Symfony\Component\HttpFoundation" name="bool"/>
      </return>
    </docblock>
    <parameter name="key" byreference="false" type="{unknown}"/>
  </method>
  <method name="remove" start="166" end="169" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Removes a parameter."/>
      <param description="The key" type="string" variable="$key"/>
    </docblock>
    <parameter name="key" byreference="false" type="{unknown}"/>
  </method>
  <method name="getAlpha" start="180" end="183" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the alphabetic characters of the parameter value."/>
      <param description="The parameter key" type="string" variable="$key"/>
      <param description="The default value if the parameter key does not exist" type="string" variable="$default"/>
      <param description="If true, a path like foo[bar] will find deeper items" type="object" variable="$deep">
        <type full="Symfony\Component\HttpFoundation\bool" namespace="Symfony\Component\HttpFoundation" name="bool"/>
      </param>
      <return description="The filtered value" type="string"/>
    </docblock>
    <parameter name="key" byreference="false" type="{unknown}"/>
    <parameter name="default" byreference="false" type="string" default="''"/>
    <parameter name="deep" byreference="false" type="boolean" default="false"/>
  </method>
  <method name="getAlnum" start="194" end="197" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the alphabetic characters and digits of the parameter value."/>
      <param description="The parameter key" type="string" variable="$key"/>
      <param description="The default value if the parameter key does not exist" type="string" variable="$default"/>
      <param description="If true, a path like foo[bar] will find deeper items" type="object" variable="$deep">
        <type full="Symfony\Component\HttpFoundation\bool" namespace="Symfony\Component\HttpFoundation" name="bool"/>
      </param>
      <return description="The filtered value" type="string"/>
    </docblock>
    <parameter name="key" byreference="false" type="{unknown}"/>
    <parameter name="default" byreference="false" type="string" default="''"/>
    <parameter name="deep" byreference="false" type="boolean" default="false"/>
  </method>
  <method name="getDigits" start="208" end="212" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the digits of the parameter value."/>
      <param description="The parameter key" type="string" variable="$key"/>
      <param description="The default value if the parameter key does not exist" type="string" variable="$default"/>
      <param description="If true, a path like foo[bar] will find deeper items" type="object" variable="$deep">
        <type full="Symfony\Component\HttpFoundation\bool" namespace="Symfony\Component\HttpFoundation" name="bool"/>
      </param>
      <return description="The filtered value" type="string"/>
    </docblock>
    <parameter name="key" byreference="false" type="{unknown}"/>
    <parameter name="default" byreference="false" type="string" default="''"/>
    <parameter name="deep" byreference="false" type="boolean" default="false"/>
    <inline>
      <comment value="we need to remove - and + because they're allowed in the filter" line="210"/>
    </inline>
  </method>
  <method name="getInt" start="223" end="226" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the parameter value converted to integer."/>
      <param description="The parameter key" type="string" variable="$key"/>
      <param description="The default value if the parameter key does not exist" type="int" variable="$default"/>
      <param description="If true, a path like foo[bar] will find deeper items" type="object" variable="$deep">
        <type full="Symfony\Component\HttpFoundation\bool" namespace="Symfony\Component\HttpFoundation" name="bool"/>
      </param>
      <return description="The filtered value" type="int"/>
    </docblock>
    <parameter name="key" byreference="false" type="{unknown}"/>
    <parameter name="default" byreference="false" type="integer" default="0"/>
    <parameter name="deep" byreference="false" type="boolean" default="false"/>
  </method>
  <method name="getBoolean" start="237" end="240" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the parameter value converted to boolean."/>
      <param description="The parameter key" type="string" variable="$key"/>
      <param description="The default value if the parameter key does not exist" type="mixed" variable="$default"/>
      <param description="If true, a path like foo[bar] will find deeper items" type="object" variable="$deep">
        <type full="Symfony\Component\HttpFoundation\bool" namespace="Symfony\Component\HttpFoundation" name="bool"/>
      </param>
      <return description="The filtered value" type="object">
        <type full="Symfony\Component\HttpFoundation\bool" namespace="Symfony\Component\HttpFoundation" name="bool"/>
      </return>
    </docblock>
    <parameter name="key" byreference="false" type="{unknown}"/>
    <parameter name="default" byreference="false" type="boolean" default="false"/>
    <parameter name="deep" byreference="false" type="boolean" default="false"/>
  </method>
  <method name="filter" start="255" end="270" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Filter key."/>
      <param description="Key." type="string" variable="$key"/>
      <param description="Default = null." type="mixed" variable="$default"/>
      <param description="Default = false." type="object" variable="$deep">
        <type full="Symfony\Component\HttpFoundation\bool" namespace="Symfony\Component\HttpFoundation" name="bool"/>
      </param>
      <param description="FILTER_* constant." type="int" variable="$filter"/>
      <param description="Filter options." type="mixed" variable="$options"/>
      <see value="http://php.net/manual/en/function.filter-var.php"/>
      <return type="mixed"/>
    </docblock>
    <parameter name="key" byreference="false" type="{unknown}"/>
    <parameter name="default" byreference="false" type="{unknown}" default="" constant="null"/>
    <parameter name="deep" byreference="false" type="boolean" default="false"/>
    <parameter name="filter" byreference="false" type="{unknown}" default="" constant="FILTER_DEFAULT"/>
    <parameter name="options" byreference="false" type="array" default=""/>
    <inline>
      <comment value="Always turn $options into an array - this allows filter_var option shortcuts." line="259"/>
      <comment value="Add a convenience check for arrays." line="264"/>
    </inline>
  </method>
  <method name="getIterator" start="277" end="280" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns an iterator for parameters."/>
      <return description="An \ArrayIterator instance" type="object">
        <type full="\ArrayIterator" namespace="" name="ArrayIterator"/>
      </return>
    </docblock>
  </method>
  <method name="count" start="287" end="290" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the number of parameters."/>
      <return description="The number of parameters" type="int"/>
    </docblock>
  </method>
</class>
