<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="Diff_SequenceMatcher" namespace="" name="Diff_SequenceMatcher" abstract="false" final="false" start="43" end="748">
  <file path="/home/robert/Desktop/Hogeschool/2ejaars Development/DevBOpdrachten/project56/http/laravel/vendor/phpspec/php-diff/lib/Diff" file="SequenceMatcher.php" realpath="/home/robert/Desktop/Hogeschool/2ejaars Development/DevBOpdrachten/project56/http/laravel/vendor/phpspec/php-diff/lib/Diff/SequenceMatcher.php" size="19137" time="2015-12-17T18:44:10+00:00" unixtime="1450377850" sha1="5a020a664a920740275f5038b585aff2b1860c0d" relative="vendor/phpspec/php-diff/lib/Diff/SequenceMatcher.php"/>
  <docblock>
    <description compact="Sequence matcher for Diff">PHP version 5

Copyright (c) 2009 Chris Boulton &lt;chris.boulton@interspire.com&gt;

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 - Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.
 - Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.
 - Neither the name of the Chris Boulton nor the names of its contributors
   may be used to endorse or promote products derived from this software
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.</description>
    <package value="Diff"/>
    <author value="Chris Boulton &lt;chris.boulton@interspire.com&gt;"/>
    <copyright value="(c) 2009 Chris Boulton"/>
    <license name="New BSD License http://www.opensource.org/licenses/bsd-license.php"/>
    <version value="1.1"/>
    <link value="http://github.com/chrisboulton/php-diff"/>
  </docblock>
  <member name="junkCallback" type="{unknown}" default="" constant="null" visibility="private" line="48">
    <docblock>
      <description/>
      <var description="Either a string or an array containing a callback function to determine if a line is &quot;junk&quot; or not." type="object">
        <type full="string|array" namespace="" name="string|array"/>
      </var>
    </docblock>
  </member>
  <member name="a" type="{unknown}" default="" constant="null" visibility="private" line="53">
    <docblock>
      <description/>
      <var description="The first sequence to compare against." type="array"/>
    </docblock>
  </member>
  <member name="b" type="{unknown}" default="" constant="null" visibility="private" line="58">
    <docblock>
      <description/>
      <var description="The second sequence." type="array"/>
    </docblock>
  </member>
  <member name="junkDict" type="array" default="" visibility="private" line="63">
    <docblock>
      <description/>
      <var description="Array of characters that are considered junk from the second sequence. Characters are the array key." type="array"/>
    </docblock>
  </member>
  <member name="b2j" type="array" default="" visibility="private" line="68">
    <docblock>
      <description/>
      <var description="Array of indices that do not contain junk elements." type="array"/>
    </docblock>
  </member>
  <member name="options" type="array" default="" visibility="private" line="70"/>
  <member name="defaultOptions" type="array" default="" visibility="private" line="72"/>
  <constructor name="__construct" start="88" end="95" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="The constructor. With the sequences being passed, they'll be set for the sequence matcher and it will perform a basic cleanup &amp; calculate junk elements."/>
      <param description="A string or array containing the lines to compare against." type="object" variable="$a">
        <type full="string|array" namespace="" name="string|array"/>
      </param>
      <param description="A string or array containing the lines to compare." type="object" variable="$b">
        <type full="string|array" namespace="" name="string|array"/>
      </param>
      <param description="Either an array or string that references a callback function (if there is one) to determine 'junk' characters." type="object" variable="$junkCallback">
        <type full="string|array" namespace="" name="string|array"/>
      </param>
      <param type="array" variable="$options"/>
    </docblock>
    <parameter name="a" byreference="false" type="{unknown}"/>
    <parameter name="b" byreference="false" type="{unknown}"/>
    <parameter name="junkCallback" byreference="false" type="{unknown}" default="" constant="null"/>
    <parameter name="options" byreference="false" type="{unknown}"/>
  </constructor>
  <method name="setOptions" start="102" end="105" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Set new options"/>
      <param type="array" variable="$options"/>
    </docblock>
    <parameter name="options" byreference="false" type="{unknown}"/>
  </method>
  <method name="setSequences" start="113" end="117" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Set the first and second sequences to use with the sequence matcher."/>
      <param description="A string or array containing the lines to compare against." type="object" variable="$a">
        <type full="string|array" namespace="" name="string|array"/>
      </param>
      <param description="A string or array containing the lines to compare." type="object" variable="$b">
        <type full="string|array" namespace="" name="string|array"/>
      </param>
    </docblock>
    <parameter name="a" byreference="false" type="{unknown}"/>
    <parameter name="b" byreference="false" type="{unknown}"/>
  </method>
  <method name="setSeq1" start="125" end="137" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Set the first sequence ($a) and reset any internal caches to indicate that when calling the calculation methods, we need to recalculate them."/>
      <param description="The sequence to set as the first sequence." type="object" variable="$a">
        <type full="string|array" namespace="" name="string|array"/>
      </param>
    </docblock>
    <parameter name="a" byreference="false" type="{unknown}"/>
  </method>
  <method name="setSeq2" start="145" end="159" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Set the second sequence ($b) and reset any internal caches to indicate that when calling the calculation methods, we need to recalculate them."/>
      <param description="The sequence to set as the second sequence." type="object" variable="$b">
        <type full="string|array" namespace="" name="string|array"/>
      </param>
    </docblock>
    <parameter name="b" byreference="false" type="{unknown}"/>
  </method>
  <method name="chainB" start="165" end="210" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Generate the internal arrays containing the list of junk and non-junk characters for the second ($b) sequence."/>
    </docblock>
    <inline>
      <comment value="Remove leftovers" line="189"/>
    </inline>
  </method>
  <method name="isBJunk" start="218" end="225" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Checks if a particular character is in the junk dictionary for the list of junk characters."/>
      <param variable="$b"/>
      <return description="True if the character is considered junk. False if not." type="boolean"/>
    </docblock>
    <parameter name="b" byreference="false" type="{unknown}"/>
  </method>
  <method name="findLongestMatch" start="246" end="310" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Find the longest matching block in the two sequences, as defined by the lower and upper constraints for each sequence. (for the first sequence, $alo - $ahi and for the second sequence, $blo - $bhi)">Essentially, of all of the maximal matching blocks, return the one that
startest earliest in $a, and all of those maximal matching blocks that
start earliest in $a, return the one that starts earliest in $b.

If the junk callback is defined, do the above but with the restriction
that the junk element appears in the block. Extend it as far as possible
by matching only junk elements in both $a and $b.</description>
      <param description="The lower constraint for the first sequence." type="int" variable="$alo"/>
      <param description="The upper constraint for the first sequence." type="int" variable="$ahi"/>
      <param description="The lower constraint for the second sequence." type="int" variable="$blo"/>
      <param description="The upper constraint for the second sequence." type="int" variable="$bhi"/>
      <return description="Array containing the longest match that includes the starting position in $a, start in $b and the length/size." type="array"/>
    </docblock>
    <parameter name="alo" byreference="false" type="{unknown}"/>
    <parameter name="ahi" byreference="false" type="{unknown}"/>
    <parameter name="blo" byreference="false" type="{unknown}"/>
    <parameter name="bhi" byreference="false" type="{unknown}"/>
  </method>
  <method name="linesAreDifferent" start="319" end="340" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Check if the two lines at the given indexes are different or not."/>
      <param description="Line number to check against in a." type="int" variable="$aIndex"/>
      <param description="Line number to check against in b." type="int" variable="$bIndex"/>
      <return description="True if the lines are different and false if not." type="boolean"/>
    </docblock>
    <parameter name="aIndex" byreference="false" type="{unknown}"/>
    <parameter name="bIndex" byreference="false" type="{unknown}"/>
  </method>
  <method name="getMatchingBlocks" start="352" end="439" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Return a nested set of arrays for all of the matching sub-sequences in the strings $a and $b.">Each block contains the lower constraint of the block in $a, the lower
constraint of the block in $b and finally the number of lines that the
block continues for.</description>
      <return description="Nested array of the matching blocks, as described by the function." type="array"/>
    </docblock>
  </method>
  <method name="getOpCodes" start="463" end="511" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Return a list of all of the opcodes for the differences between the two strings.">The nested array returned contains an array describing the opcode
which includes:
0 - The type of tag (as described below) for the opcode.
1 - The beginning line in the first sequence.
2 - The end line in the first sequence.
3 - The beginning line in the second sequence.
4 - The end line in the second sequence.

The different types of tags include:
replace - The string from $i1 to $i2 in $a should be replaced by
          the string in $b from $j1 to $j2.
delete -  The string in $a from $i1 to $j2 should be deleted.
insert -  The string in $b from $j1 to $j2 should be inserted at
          $i1 in $a.
equal  -  The two strings with the specified ranges are equal.</description>
      <return description="Array of the opcodes describing the differences between the strings." type="array"/>
    </docblock>
  </method>
  <method name="getGroupedOpcodes" start="527" end="596" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Return a series of nested arrays containing different groups of generated opcodes for the differences between the strings with up to $context lines of surrounding content.">Essentially what happens here is any big equal blocks of strings are stripped
out, the smaller subsets of changes are then arranged in to their groups.
This means that the sequence matcher and diffs do not need to include the full
content of the different files but can still provide context as to where the
changes are.</description>
      <param description="The number of lines of context to provide around the groups." type="int" variable="$context"/>
      <return description="Nested array of all of the grouped opcodes." type="array"/>
    </docblock>
    <parameter name="context" byreference="false" type="integer" default="3"/>
  </method>
  <method name="Ratio" start="612" end="616" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Return a measure of the similarity between the two sequences.">This will be a float value between 0 and 1.

Out of all of the ratio calculation functions, this is the most
expensive to call if getMatchingBlocks or getOpCodes is yet to be
called. The other calculation methods (quickRatio and realquickRatio)
can be used to perform quicker calculations but may be less accurate.

The ratio is calculated as (2 * number of matches) / total number of
elements in both sequences.</description>
      <return description="The calculated ratio." type="float"/>
    </docblock>
  </method>
  <method name="ratioReduce" start="625" end="628" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Helper function to calculate the number of matches for Ratio()."/>
      <param description="The running total for the number of matches." type="int" variable="$sum"/>
      <param description="Array containing the matching block triple to add to the running total." type="array" variable="$triple"/>
      <return description="The new running total for the number of matches." type="int"/>
    </docblock>
    <parameter name="sum" byreference="false" type="{unknown}"/>
    <parameter name="triple" byreference="false" type="{unknown}"/>
  </method>
  <method name="quickRatio" start="636" end="665" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Quickly return an upper bound ratio for the similarity of the strings.">This is quicker to compute than Ratio().</description>
      <return description="The calculated ratio." type="float"/>
    </docblock>
  </method>
  <method name="realquickRatio" start="673" end="679" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Return an upper bound ratio really quickly for the similarity of the strings.">This is quicker to compute than Ratio() and quickRatio().</description>
      <return description="The calculated ratio." type="float"/>
    </docblock>
  </method>
  <method name="calculateRatio" start="689" end="697" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Helper function for calculating the ratio to measure similarity for the strings.">The ratio is defined as being 2 * (number of matches / total length)</description>
      <param description="The number of matches in the two strings." type="int" variable="$matches"/>
      <param description="The length of the two strings." type="int" variable="$length"/>
      <return description="The calculated ratio." type="float"/>
    </docblock>
    <parameter name="matches" byreference="false" type="{unknown}"/>
    <parameter name="length" byreference="false" type="integer" default="0"/>
  </method>
  <method name="arrayGetDefault" start="709" end="717" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Helper function that provides the ability to return the value for a key in an array of it exists, or if it doesn't then return a default value.">Essentially cleaner than doing a series of if(isset()) {} else {} calls.</description>
      <param description="The array to search." type="array" variable="$array"/>
      <param description="The key to check that exists." type="string" variable="$key"/>
      <param description="The value to return as the default value if the key doesn't exist." type="mixed" variable="$default"/>
      <return description="The value from the array if the key exists or otherwise the default." type="mixed"/>
    </docblock>
    <parameter name="array" byreference="false" type="{unknown}"/>
    <parameter name="key" byreference="false" type="{unknown}"/>
    <parameter name="default" byreference="false" type="{unknown}"/>
  </method>
  <method name="tupleSort" start="726" end="747" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Sort an array by the nested arrays it contains. Helper function for getMatchingBlocks"/>
      <param description="First array to compare." type="array" variable="$a"/>
      <param description="Second array to compare." type="array" variable="$b"/>
      <return description="-1, 0 or 1, as expected by the usort function." type="int"/>
    </docblock>
    <parameter name="a" byreference="false" type="{unknown}"/>
    <parameter name="b" byreference="false" type="{unknown}"/>
  </method>
</class>
