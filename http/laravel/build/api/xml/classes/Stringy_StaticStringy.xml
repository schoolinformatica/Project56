<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="Stringy\StaticStringy" namespace="Stringy" name="StaticStringy" abstract="false" final="false" start="5" end="979">
  <file path="/home/robert/Desktop/Hogeschool/2ejaars Development/DevBOpdrachten/project56/http/laravel/vendor/danielstjules/stringy/src" file="StaticStringy.php" realpath="/home/robert/Desktop/Hogeschool/2ejaars Development/DevBOpdrachten/project56/http/laravel/vendor/danielstjules/stringy/src/StaticStringy.php" size="38010" time="2015-12-17T18:44:09+00:00" unixtime="1450377849" sha1="50a0401227c73ddabf6685c8c5cfbc9260a26869" relative="vendor/danielstjules/stringy/src/StaticStringy.php"/>
  <method name="chars" start="14" end="17" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns an array consisting of the characters in the string."/>
      <param description="String for which to return the chars" type="string" variable="$str"/>
      <param description="The character encoding" type="string" variable="$encoding"/>
      <return description="An array of string chars" type="array"/>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="encoding" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="upperCaseFirst" start="26" end="29" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Converts the first character of the supplied string to upper case."/>
      <param description="String to modify" type="string" variable="$str"/>
      <param description="The character encoding" type="string" variable="$encoding"/>
      <return description="String with the first character being upper case" type="string"/>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="encoding" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="lowerCaseFirst" start="38" end="41" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Converts the first character of the supplied string to lower case."/>
      <param description="String to modify" type="string" variable="$str"/>
      <param description="The character encoding" type="string" variable="$encoding"/>
      <return description="String with the first character being lower case" type="string"/>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="encoding" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="camelize" start="52" end="55" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns a camelCase version of the string. Trims surrounding spaces, capitalizes letters following digits, spaces, dashes and underscores, and removes spaces, dashes, as well as underscores."/>
      <param description="String to convert to camelCase" type="string" variable="$str"/>
      <param description="The character encoding" type="string" variable="$encoding"/>
      <return description="String in camelCase" type="string"/>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="encoding" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="upperCamelize" start="66" end="69" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns an UpperCamelCase version of the supplied string. It trims surrounding spaces, capitalizes letters following digits, spaces, dashes and underscores, and removes spaces, dashes, underscores."/>
      <param description="String to convert to UpperCamelCase" type="string" variable="$str"/>
      <param description="The character encoding" type="string" variable="$encoding"/>
      <return description="String in UpperCamelCase" type="string"/>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="encoding" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="dasherize" start="80" end="83" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns a lowercase and trimmed string separated by dashes. Dashes are inserted before uppercase characters (with the exception of the first character of the string), and in place of spaces as well as underscores."/>
      <param description="String to convert" type="string" variable="$str"/>
      <param description="The character encoding" type="string" variable="$encoding"/>
      <return description="Dasherized string" type="string"/>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="encoding" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="underscored" start="95" end="98" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns a lowercase and trimmed string separated by underscores.">Underscores are inserted before uppercase characters (with the exception
of the first character of the string), and in place of spaces as well as
dashes.</description>
      <param description="String to convert" type="string" variable="$str"/>
      <param description="The character encoding" type="string" variable="$encoding"/>
      <return description="Underscored string" type="string"/>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="encoding" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="delimit" start="111" end="114" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns a lowercase and trimmed string separated by the given delimiter.">Delimiters are inserted before uppercase characters (with the exception
of the first character of the string), and in place of spaces, dashes,
and underscores. Alpha delimiters are not converted to lowercase.</description>
      <param description="String to convert" type="string" variable="$str"/>
      <param description="Sequence used to separate parts of the string" type="string" variable="$delimiter"/>
      <param description="The character encoding" type="string" variable="$encoding"/>
      <return description="String with delimiter" type="string"/>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="delimiter" byreference="false" type="{unknown}"/>
    <parameter name="encoding" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="swapCase" start="123" end="126" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns a case swapped version of the string."/>
      <param description="String to swap case" type="string" variable="$str"/>
      <param description="The character encoding" type="string" variable="$encoding"/>
      <return description="String with each character's case swapped" type="string"/>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="encoding" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="titleize" start="138" end="141" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns a trimmed string with the first letter of each word capitalized.">Ignores the case of other letters, preserving any acronyms. Also accepts
an array, $ignore, allowing you to list words not to be capitalized.</description>
      <param description="String to titleize" type="string" variable="$str"/>
      <param description="The character encoding" type="string" variable="$encoding"/>
      <param description="An array of words not to capitalize" type="array" variable="$ignore"/>
      <return description="Titleized string" type="string"/>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="ignore" byreference="false" type="{unknown}" default="" constant="null"/>
    <parameter name="encoding" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="humanize" start="151" end="154" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Capitalizes the first word of the string, replaces underscores with spaces, and strips '_id'."/>
      <param description="String to humanize" type="string" variable="$str"/>
      <param description="The character encoding" type="string" variable="$encoding"/>
      <return description="A humanized string" type="string"/>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="encoding" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="tidy" start="164" end="167" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns a string with smart quotes, ellipsis characters, and dashes from Windows-1252 (commonly used in Word documents) replaced by their ASCII equivalents."/>
      <param description="String to remove special chars" type="string" variable="$str"/>
      <return description="String with those characters removed" type="string"/>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
  </method>
  <method name="collapseWhitespace" start="178" end="181" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Trims the string and replaces consecutive whitespace characters with a single space. This includes tabs and newline characters, as well as multibyte whitespace such as the thin space and ideographic space."/>
      <param description="The string to cleanup whitespace" type="string" variable="$str"/>
      <param description="The character encoding" type="string" variable="$encoding"/>
      <return description="The trimmed string with condensed whitespace" type="string"/>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="encoding" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="toAscii" start="193" end="196" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns an ASCII version of the string. A set of non-ASCII characters are replaced with their closest ASCII counterparts, and the rest are removed unless instructed otherwise."/>
      <param description="A string with non-ASCII characters" type="string" variable="$str"/>
      <param description="Whether or not to remove the" type="object" variable="$removeUnsupported">unsupported characters<type full="Stringy\bool" namespace="Stringy" name="bool"/></param>
      <return description="A string containing only ASCII characters" type="string"/>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="removeUnsupported" byreference="false" type="boolean" default="true"/>
  </method>
  <method name="pad" start="214" end="219" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Pads the string to a given length with $padStr. If length is less than or equal to the length of the string, no padding takes places. The default string used for padding is a space, and the default type (one of 'left', 'right', 'both') is 'right'. Throws an InvalidArgumentException if $padType isn't one of those 3 values."/>
      <param description="String to pad" type="string" variable="$str"/>
      <param description="Desired string length after padding" type="int" variable="$length"/>
      <param description="String used to pad, defaults to space" type="string" variable="$padStr"/>
      <param description="One of 'left', 'right', 'both'" type="string" variable="$padType"/>
      <param description="The character encoding" type="string" variable="$encoding"/>
      <return description="The padded string" type="string"/>
      <throws description="If $padType isn't one of 'right'," type="object">'left' or 'both'<type full="\InvalidArgumentException" namespace="" name="InvalidArgumentException"/></throws>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="length" byreference="false" type="{unknown}"/>
    <parameter name="padStr" byreference="false" type="string" default="' '"/>
    <parameter name="padType" byreference="false" type="string" default="'right'"/>
    <parameter name="encoding" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="padLeft" start="231" end="235" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns a new string of a given length such that the beginning of the string is padded. Alias for pad() with a $padType of 'left'."/>
      <param description="String to pad" type="string" variable="$str"/>
      <param description="Desired string length after padding" type="int" variable="$length"/>
      <param description="String used to pad, defaults to space" type="string" variable="$padStr"/>
      <param description="The character encoding" type="string" variable="$encoding"/>
      <return description="The padded string" type="string"/>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="length" byreference="false" type="{unknown}"/>
    <parameter name="padStr" byreference="false" type="string" default="' '"/>
    <parameter name="encoding" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="padRight" start="247" end="251" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns a new string of a given length such that the end of the string is padded. Alias for pad() with a $padType of 'right'."/>
      <param description="String to pad" type="string" variable="$str"/>
      <param description="Desired string length after padding" type="int" variable="$length"/>
      <param description="String used to pad, defaults to space" type="string" variable="$padStr"/>
      <param description="The character encoding" type="string" variable="$encoding"/>
      <return description="The padded string" type="string"/>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="length" byreference="false" type="{unknown}"/>
    <parameter name="padStr" byreference="false" type="string" default="' '"/>
    <parameter name="encoding" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="padBoth" start="263" end="267" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns a new string of a given length such that both sides of the string are padded. Alias for pad() with a $padType of 'both'."/>
      <param description="String to pad" type="string" variable="$str"/>
      <param description="Desired string length after padding" type="int" variable="$length"/>
      <param description="String used to pad, defaults to space" type="string" variable="$padStr"/>
      <param description="The character encoding" type="string" variable="$encoding"/>
      <return description="The padded string" type="string"/>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="length" byreference="false" type="{unknown}"/>
    <parameter name="padStr" byreference="false" type="string" default="' '"/>
    <parameter name="encoding" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="startsWith" start="280" end="285" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns true if the string begins with $substring, false otherwise. By default, the comparison is case-sensitive, but can be made insensitive by setting $caseSensitive to false."/>
      <param description="String to check the start of" type="string" variable="$str"/>
      <param description="The substring to look for" type="string" variable="$substring"/>
      <param description="Whether or not to enforce case-sensitivity" type="object" variable="$caseSensitive">
        <type full="Stringy\bool" namespace="Stringy" name="bool"/>
      </param>
      <param description="The character encoding" type="string" variable="$encoding"/>
      <return description="Whether or not $str starts with $substring" type="object">
        <type full="Stringy\bool" namespace="Stringy" name="bool"/>
      </return>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="substring" byreference="false" type="{unknown}"/>
    <parameter name="caseSensitive" byreference="false" type="boolean" default="true"/>
    <parameter name="encoding" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="endsWith" start="298" end="303" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns true if the string ends with $substring, false otherwise. By default, the comparison is case-sensitive, but can be made insensitive by setting $caseSensitive to false."/>
      <param description="String to check the end of" type="string" variable="$str"/>
      <param description="The substring to look for" type="string" variable="$substring"/>
      <param description="Whether or not to enforce case-sensitivity" type="object" variable="$caseSensitive">
        <type full="Stringy\bool" namespace="Stringy" name="bool"/>
      </param>
      <param description="The character encoding" type="string" variable="$encoding"/>
      <return description="Whether or not $str ends with $substring" type="object">
        <type full="Stringy\bool" namespace="Stringy" name="bool"/>
      </return>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="substring" byreference="false" type="{unknown}"/>
    <parameter name="caseSensitive" byreference="false" type="boolean" default="true"/>
    <parameter name="encoding" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="toSpaces" start="313" end="316" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Converts each tab in the string to some number of spaces, as defined by $tabLength. By default, each tab is converted to 4 consecutive spaces."/>
      <param description="String to convert tabs to spaces" type="string" variable="$str"/>
      <param description="Number of spaces to replace each tab with" type="int" variable="$tabLength"/>
      <return description="String with tabs switched to spaces" type="string"/>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="tabLength" byreference="false" type="integer" default="4"/>
  </method>
  <method name="toTabs" start="327" end="330" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Converts each occurrence of some consecutive number of spaces, as defined by $tabLength, to a tab. By default, each 4 consecutive spaces are converted to a tab."/>
      <param description="String to convert spaces to tabs" type="string" variable="$str"/>
      <param description="Number of spaces to replace with a tab" type="int" variable="$tabLength"/>
      <return description="String with spaces switched to tabs" type="string"/>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="tabLength" byreference="false" type="integer" default="4"/>
  </method>
  <method name="toLowerCase" start="340" end="343" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Converts all characters in the string to lowercase. An alias for PHP's mb_strtolower()."/>
      <param description="String to convert case" type="string" variable="$str"/>
      <param description="The character encoding" type="string" variable="$encoding"/>
      <return description="The lowercase string" type="string"/>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="encoding" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="toTitleCase" start="352" end="355" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Converts the first character of each word in the string to uppercase."/>
      <param description="String to convert case" type="string" variable="$str"/>
      <param description="The character encoding" type="string" variable="$encoding"/>
      <return description="The title-cased string" type="string"/>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="encoding" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="toUpperCase" start="365" end="368" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Converts all characters in the string to uppercase. An alias for PHP's mb_strtoupper()."/>
      <param description="String to convert case" type="string" variable="$str"/>
      <param description="The character encoding" type="string" variable="$encoding"/>
      <return description="The uppercase string" type="string"/>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="encoding" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="slugify" start="381" end="384" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Converts the string into an URL slug. This includes replacing non-ASCII characters with their closest ASCII equivalents, removing remaining non-ASCII and non-alphanumeric characters, and replacing whitespace with $replacement. The replacement defaults to a single dash, and the string is also converted to lowercase."/>
      <param description="Text to transform into an URL slug" type="string" variable="$str"/>
      <param description="The string used to replace whitespace" type="string" variable="$replacement"/>
      <return description="The corresponding URL slug" type="string"/>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="replacement" byreference="false" type="string" default="'-'"/>
  </method>
  <method name="contains" start="397" end="402" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns true if the string contains $needle, false otherwise. By default, the comparison is case-sensitive, but can be made insensitive by setting $caseSensitive to false."/>
      <param description="String being checked" type="string" variable="$haystack"/>
      <param description="Substring to look for" type="string" variable="$needle"/>
      <param description="Whether or not to enforce case-sensitivity" type="object" variable="$caseSensitive">
        <type full="Stringy\bool" namespace="Stringy" name="bool"/>
      </param>
      <param description="The character encoding" type="string" variable="$encoding"/>
      <return description="Whether or not $haystack contains $needle" type="object">
        <type full="Stringy\bool" namespace="Stringy" name="bool"/>
      </return>
    </docblock>
    <parameter name="haystack" byreference="false" type="{unknown}"/>
    <parameter name="needle" byreference="false" type="{unknown}"/>
    <parameter name="caseSensitive" byreference="false" type="boolean" default="true"/>
    <parameter name="encoding" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="containsAny" start="415" end="420" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns true if the string contains any $needles, false otherwise. By default, the comparison is case-sensitive, but can be made insensitive by setting $caseSensitive to false."/>
      <param description="String being checked" type="string" variable="$haystack"/>
      <param description="Substrings to look for" type="array" variable="$needles"/>
      <param description="Whether or not to enforce case-sensitivity" type="object" variable="$caseSensitive">
        <type full="Stringy\bool" namespace="Stringy" name="bool"/>
      </param>
      <param description="The character encoding" type="string" variable="$encoding"/>
      <return description="Whether or not $haystack contains any $needles" type="object">
        <type full="Stringy\bool" namespace="Stringy" name="bool"/>
      </return>
    </docblock>
    <parameter name="haystack" byreference="false" type="{unknown}"/>
    <parameter name="needles" byreference="false" type="{unknown}"/>
    <parameter name="caseSensitive" byreference="false" type="boolean" default="true"/>
    <parameter name="encoding" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="containsAll" start="433" end="438" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns true if the string contains all $needles, false otherwise. By default, the comparison is case-sensitive, but can be made insensitive by setting $caseSensitive to false."/>
      <param description="String being checked" type="string" variable="$haystack"/>
      <param description="Substrings to look for" type="array" variable="$needles"/>
      <param description="Whether or not to enforce case-sensitivity" type="object" variable="$caseSensitive">
        <type full="Stringy\bool" namespace="Stringy" name="bool"/>
      </param>
      <param description="The character encoding" type="string" variable="$encoding"/>
      <return description="Whether or not $haystack contains all $needles" type="object">
        <type full="Stringy\bool" namespace="Stringy" name="bool"/>
      </return>
    </docblock>
    <parameter name="haystack" byreference="false" type="{unknown}"/>
    <parameter name="needles" byreference="false" type="{unknown}"/>
    <parameter name="caseSensitive" byreference="false" type="boolean" default="true"/>
    <parameter name="encoding" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="indexOf" start="450" end="455" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns the index of the first occurrence of $needle in the string, and false if not found. Accepts an optional offset from which to begin the search."/>
      <param description="String to search" type="string" variable="$haystack"/>
      <param description="Substring to look for" type="string" variable="$needle"/>
      <param description="Offset from which to search" type="int" variable="$offset"/>
      <return description="The occurrence's index if found, otherwise false" type="object">
        <type full="Stringy\int|bool" namespace="Stringy" name="int|bool"/>
      </return>
    </docblock>
    <parameter name="haystack" byreference="false" type="{unknown}"/>
    <parameter name="needle" byreference="false" type="{unknown}"/>
    <parameter name="offset" byreference="false" type="integer" default="0"/>
    <parameter name="encoding" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="indexOfLast" start="467" end="472" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns the index of the last occurrence of $needle in the string, and false if not found. Accepts an optional offset from which to begin the search."/>
      <param description="String to search" type="string" variable="$haystack"/>
      <param description="Substring to look for" type="string" variable="$needle"/>
      <param description="Offset from which to search" type="int" variable="$offset"/>
      <return description="The last occurrence's index if found, otherwise false" type="object">
        <type full="Stringy\int|bool" namespace="Stringy" name="int|bool"/>
      </return>
    </docblock>
    <parameter name="haystack" byreference="false" type="{unknown}"/>
    <parameter name="needle" byreference="false" type="{unknown}"/>
    <parameter name="offset" byreference="false" type="integer" default="0"/>
    <parameter name="encoding" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="surround" start="481" end="484" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Surrounds a string with the given substring."/>
      <param description="The string to surround" type="string" variable="$str"/>
      <param description="The substring to add to both sides" type="string" variable="$substring"/>
      <return description="The string with the substring prepended and appended" type="string"/>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="substring" byreference="false" type="{unknown}"/>
  </method>
  <method name="insert" start="495" end="499" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Inserts $substring into the string at the $index provided."/>
      <param description="String to insert into" type="string" variable="$str"/>
      <param description="String to be inserted" type="string" variable="$substring"/>
      <param description="The index at which to insert the substring" type="int" variable="$index"/>
      <param description="The character encoding" type="string" variable="$encoding"/>
      <return description="The resulting string after the insertion" type="string"/>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="substring" byreference="false" type="{unknown}"/>
    <parameter name="index" byreference="false" type="{unknown}"/>
    <parameter name="encoding" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="truncate" start="512" end="517" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Truncates the string to a given length. If $substring is provided, and truncating occurs, the string is further truncated so that the substring may be appended without exceeding the desired length."/>
      <param description="String to truncate" type="string" variable="$str"/>
      <param description="Desired length of the truncated string" type="int" variable="$length"/>
      <param description="The substring to append if it can fit" type="string" variable="$substring"/>
      <param description="The character encoding" type="string" variable="$encoding"/>
      <return description="The resulting string after truncating" type="string"/>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="length" byreference="false" type="{unknown}"/>
    <parameter name="substring" byreference="false" type="string" default="''"/>
    <parameter name="encoding" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="safeTruncate" start="531" end="536" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Truncates the string to a given length, while ensuring that it does not split words. If $substring is provided, and truncating occurs, the string is further truncated so that the substring may be appended without exceeding the desired length."/>
      <param description="String to truncate" type="string" variable="$str"/>
      <param description="Desired length of the truncated string" type="int" variable="$length"/>
      <param description="The substring to append if it can fit" type="string" variable="$substring"/>
      <param description="The character encoding" type="string" variable="$encoding"/>
      <return description="The resulting string after truncating" type="string"/>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="length" byreference="false" type="{unknown}"/>
    <parameter name="substring" byreference="false" type="string" default="''"/>
    <parameter name="encoding" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="reverse" start="545" end="548" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns a reversed string. A multibyte version of strrev()."/>
      <param description="String to reverse" type="string" variable="$str"/>
      <param description="The character encoding" type="string" variable="$encoding"/>
      <return description="The reversed string" type="string"/>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="encoding" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="shuffle" start="558" end="561" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="A multibyte str_shuffle() function. It returns a string with its characters in random order."/>
      <param description="String to shuffle" type="string" variable="$str"/>
      <param description="The character encoding" type="string" variable="$encoding"/>
      <return description="The shuffled string" type="string"/>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="encoding" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="trim" start="573" end="576" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns a string with whitespace removed from the start and end of the string. Supports the removal of unicode whitespace. Accepts an optional string of characters to strip instead of the defaults."/>
      <param description="String to trim" type="string" variable="$str"/>
      <param description="Optional string of characters to strip" type="string" variable="$chars"/>
      <param description="The character encoding" type="string" variable="$encoding"/>
      <return description="Trimmed $str" type="string"/>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="chars" byreference="false" type="{unknown}" default="" constant="null"/>
    <parameter name="encoding" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="trimLeft" start="588" end="591" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns a string with whitespace removed from the start of the string.">Supports the removal of unicode whitespace. Accepts an optional
string of characters to strip instead of the defaults.</description>
      <param description="String to trim" type="string" variable="$str"/>
      <param description="Optional string of characters to strip" type="string" variable="$chars"/>
      <param description="The character encoding" type="string" variable="$encoding"/>
      <return description="Trimmed $str" type="string"/>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="chars" byreference="false" type="{unknown}" default="" constant="null"/>
    <parameter name="encoding" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="trimRight" start="603" end="606" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns a string with whitespace removed from the end of the string.">Supports the removal of unicode whitespace. Accepts an optional
string of characters to strip instead of the defaults.</description>
      <param description="String to trim" type="string" variable="$str"/>
      <param description="Optional string of characters to strip" type="string" variable="$chars"/>
      <param description="The character encoding" type="string" variable="$encoding"/>
      <return description="Trimmed $str" type="string"/>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="chars" byreference="false" type="{unknown}" default="" constant="null"/>
    <parameter name="encoding" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="longestCommonPrefix" start="616" end="620" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns the longest common prefix between the string and $otherStr."/>
      <param description="First string for comparison" type="string" variable="$str"/>
      <param description="Second string for comparison" type="string" variable="$otherStr"/>
      <param description="The character encoding" type="string" variable="$encoding"/>
      <return description="The longest common prefix" type="string"/>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="otherStr" byreference="false" type="{unknown}"/>
    <parameter name="encoding" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="longestCommonSuffix" start="630" end="634" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns the longest common suffix between the string and $otherStr."/>
      <param description="First string for comparison" type="string" variable="$str"/>
      <param description="Second string for comparison" type="string" variable="$otherStr"/>
      <param description="The character encoding" type="string" variable="$encoding"/>
      <return description="The longest common suffix" type="string"/>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="otherStr" byreference="false" type="{unknown}"/>
    <parameter name="encoding" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="longestCommonSubstring" start="645" end="650" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns the longest common substring between the string and $otherStr.">In the case of ties, it returns that which occurs first.</description>
      <param description="First string for comparison" type="string" variable="$str"/>
      <param description="Second string for comparison" type="string" variable="$otherStr"/>
      <param description="The character encoding" type="string" variable="$encoding"/>
      <return description="The longest common substring" type="string"/>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="otherStr" byreference="false" type="{unknown}"/>
    <parameter name="encoding" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="length" start="659" end="662" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns the length of the string. An alias for PHP's mb_strlen() function."/>
      <param description="The string to get the length of" type="string" variable="$str"/>
      <param description="The character encoding" type="string" variable="$encoding"/>
      <return description="The number of characters in $str given the encoding" type="int"/>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="encoding" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="substr" start="675" end="678" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns the substring beginning at $start with the specified $length.">It differs from the mb_substr() function in that providing a $length of
null will return the rest of the string, rather than an empty string.</description>
      <param description="The string to get the length of" type="string" variable="$str"/>
      <param description="Position of the first character to use" type="int" variable="$start"/>
      <param description="Maximum number of characters used" type="int" variable="$length"/>
      <param description="The character encoding" type="string" variable="$encoding"/>
      <return description="The substring of $str" type="string"/>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="start" byreference="false" type="{unknown}"/>
    <parameter name="length" byreference="false" type="{unknown}" default="" constant="null"/>
    <parameter name="encoding" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="at" start="688" end="691" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns the character at $index, with indexes starting at 0."/>
      <param description="The string from which to get the char" type="string" variable="$str"/>
      <param description="Position of the character" type="int" variable="$index"/>
      <param description="The character encoding" type="string" variable="$encoding"/>
      <return description="The character at $index" type="string"/>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="index" byreference="false" type="{unknown}"/>
    <parameter name="encoding" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="first" start="701" end="704" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns the first $n characters of the string."/>
      <param description="The string from which to get the substring" type="string" variable="$str"/>
      <param description="Number of chars to retrieve from the start" type="int" variable="$n"/>
      <param description="The character encoding" type="string" variable="$encoding"/>
      <return description="The first $n characters" type="string"/>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="n" byreference="false" type="{unknown}"/>
    <parameter name="encoding" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="last" start="714" end="717" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns the last $n characters of the string."/>
      <param description="The string from which to get the substring" type="string" variable="$str"/>
      <param description="Number of chars to retrieve from the end" type="int" variable="$n"/>
      <param description="The character encoding" type="string" variable="$encoding"/>
      <return description="The last $n characters" type="string"/>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="n" byreference="false" type="{unknown}"/>
    <parameter name="encoding" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="ensureLeft" start="728" end="731" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Ensures that the string begins with $substring. If it doesn't, it's prepended."/>
      <param description="The string to modify" type="string" variable="$str"/>
      <param description="The substring to add if not present" type="string" variable="$substring"/>
      <param description="The character encoding" type="string" variable="$encoding"/>
      <return description="The string prefixed by the $substring" type="string"/>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="substring" byreference="false" type="{unknown}"/>
    <parameter name="encoding" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="ensureRight" start="742" end="745" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Ensures that the string begins with $substring. If it doesn't, it's appended."/>
      <param description="The string to modify" type="string" variable="$str"/>
      <param description="The substring to add if not present" type="string" variable="$substring"/>
      <param description="The character encoding" type="string" variable="$encoding"/>
      <return description="The string suffixed by the $substring" type="string"/>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="substring" byreference="false" type="{unknown}"/>
    <parameter name="encoding" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="removeLeft" start="755" end="758" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns a new string with the prefix $substring removed, if present."/>
      <param description="String from which to remove the prefix" type="string" variable="$str"/>
      <param description="The prefix to remove" type="string" variable="$substring"/>
      <param description="The character encoding" type="string" variable="$encoding"/>
      <return description="The string without the prefix $substring" type="string"/>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="substring" byreference="false" type="{unknown}"/>
    <parameter name="encoding" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="removeRight" start="768" end="771" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns a new string with the suffix $substring removed, if present."/>
      <param description="String from which to remove the suffix" type="string" variable="$str"/>
      <param description="The suffix to remove" type="string" variable="$substring"/>
      <param description="The character encoding" type="string" variable="$encoding"/>
      <return description="The string without the suffix $substring" type="string"/>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="substring" byreference="false" type="{unknown}"/>
    <parameter name="encoding" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="hasLowerCase" start="781" end="784" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns true if the string contains a lower case char, false otherwise."/>
      <param description="String to check" type="string" variable="$str"/>
      <param description="The character encoding" type="string" variable="$encoding"/>
      <return description="Whether or not $str contains a lower case character." type="object">
        <type full="Stringy\bool" namespace="Stringy" name="bool"/>
      </return>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="encoding" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="hasUpperCase" start="794" end="797" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns true if the string contains an upper case char, false otherwise."/>
      <param description="String to check" type="string" variable="$str"/>
      <param description="The character encoding" type="string" variable="$encoding"/>
      <return description="Whether or not $str contains an upper case character." type="object">
        <type full="Stringy\bool" namespace="Stringy" name="bool"/>
      </return>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="encoding" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="isAlpha" start="807" end="810" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns true if the string contains only alphabetic chars, false otherwise."/>
      <param description="String to check" type="string" variable="$str"/>
      <param description="The character encoding" type="string" variable="$encoding"/>
      <return description="Whether or not $str contains only alphabetic chars" type="object">
        <type full="Stringy\bool" namespace="Stringy" name="bool"/>
      </return>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="encoding" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="isAlphanumeric" start="820" end="823" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns true if the string contains only alphabetic and numeric chars, false otherwise."/>
      <param description="String to check" type="string" variable="$str"/>
      <param description="The character encoding" type="string" variable="$encoding"/>
      <return description="Whether or not $str contains only alphanumeric chars" type="object">
        <type full="Stringy\bool" namespace="Stringy" name="bool"/>
      </return>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="encoding" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="isBlank" start="833" end="836" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns true if the string contains only whitespace chars, false otherwise."/>
      <param description="String to check" type="string" variable="$str"/>
      <param description="The character encoding" type="string" variable="$encoding"/>
      <return description="Whether or not $str contains only whitespace characters" type="object">
        <type full="Stringy\bool" namespace="Stringy" name="bool"/>
      </return>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="encoding" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="isJson" start="845" end="848" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns true if the string is JSON, false otherwise."/>
      <param description="String to check" type="string" variable="$str"/>
      <param description="The character encoding" type="string" variable="$encoding"/>
      <return description="Whether or not $str is JSON" type="object">
        <type full="Stringy\bool" namespace="Stringy" name="bool"/>
      </return>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="encoding" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="isLowerCase" start="858" end="861" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns true if the string contains only lower case chars, false otherwise."/>
      <param description="String to check" type="string" variable="$str"/>
      <param description="The character encoding" type="string" variable="$encoding"/>
      <return description="Whether or not $str contains only lower case characters" type="object">
        <type full="Stringy\bool" namespace="Stringy" name="bool"/>
      </return>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="encoding" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="isSerialized" start="870" end="873" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns true if the string is serialized, false otherwise."/>
      <param description="String to check" type="string" variable="$str"/>
      <param description="The character encoding" type="string" variable="$encoding"/>
      <return description="Whether or not $str is serialized" type="object">
        <type full="Stringy\bool" namespace="Stringy" name="bool"/>
      </return>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="encoding" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="isUpperCase" start="883" end="886" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns true if the string contains only upper case chars, false otherwise."/>
      <param description="String to check" type="string" variable="$str"/>
      <param description="The character encoding" type="string" variable="$encoding"/>
      <return description="Whether or not $str contains only upper case characters" type="object">
        <type full="Stringy\bool" namespace="Stringy" name="bool"/>
      </return>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="encoding" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="isHexadecimal" start="896" end="899" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns true if the string contains only hexadecimal chars, false otherwise."/>
      <param description="String to check" type="string" variable="$str"/>
      <param description="The character encoding" type="string" variable="$encoding"/>
      <return description="Whether or not $str contains only hexadecimal characters" type="object">
        <type full="Stringy\bool" namespace="Stringy" name="bool"/>
      </return>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="encoding" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="countSubstr" start="912" end="917" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns the number of occurrences of $substring in the given string.">By default, the comparison is case-sensitive, but can be made insensitive
by setting $caseSensitive to false.</description>
      <param description="The string to search through" type="string" variable="$str"/>
      <param description="The substring to search for" type="string" variable="$substring"/>
      <param description="Whether or not to enforce case-sensitivity" type="object" variable="$caseSensitive">
        <type full="Stringy\bool" namespace="Stringy" name="bool"/>
      </param>
      <param description="The character encoding" type="string" variable="$encoding"/>
      <return description="The number of $substring occurrences" type="int"/>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="substring" byreference="false" type="{unknown}"/>
    <parameter name="caseSensitive" byreference="false" type="boolean" default="true"/>
    <parameter name="encoding" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="replace" start="928" end="932" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Replaces all occurrences of $search in $str by $replacement."/>
      <param description="The haystack to search through" type="string" variable="$str"/>
      <param description="The needle to search for" type="string" variable="$search"/>
      <param description="The string to replace with" type="string" variable="$replacement"/>
      <param description="The character encoding" type="string" variable="$encoding"/>
      <return description="The resulting string after the replacements" type="string"/>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="search" byreference="false" type="{unknown}"/>
    <parameter name="replacement" byreference="false" type="{unknown}"/>
    <parameter name="encoding" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="regexReplace" start="947" end="952" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Replaces all occurrences of $pattern in $str by $replacement. An alias for mb_ereg_replace(). Note that the 'i' option with multibyte patterns in mb_ereg_replace() requires PHP 5.4+. This is due to a lack of support in the bundled version of Oniguruma in PHP 5.3."/>
      <param description="The haystack to search through" type="string" variable="$str"/>
      <param description="The regular expression pattern" type="string" variable="$pattern"/>
      <param description="The string to replace with" type="string" variable="$replacement"/>
      <param description="Matching conditions to be used" type="string" variable="$options"/>
      <param description="The character encoding" type="string" variable="$encoding"/>
      <return description="The resulting string after the replacements" type="string"/>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="pattern" byreference="false" type="{unknown}"/>
    <parameter name="replacement" byreference="false" type="{unknown}"/>
    <parameter name="options" byreference="false" type="string" default="'msr'"/>
    <parameter name="encoding" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="htmlEncode" start="962" end="965" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Convert all applicable characters to HTML entities."/>
      <param description="The string to encode." type="string" variable="$str"/>
      <param description="See http://php.net/manual/en/function.htmlentities.php" type="object" variable="$flags">
        <type full="Stringy\int|null" namespace="Stringy" name="int|null"/>
      </param>
      <param description="The character encoding" type="string" variable="$encoding"/>
      <return description="Object with the resulting $str after being html encoded." type="object">
        <type full="Stringy\Stringy" namespace="Stringy" name="Stringy"/>
      </return>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="flags" byreference="false" type="{unknown}" default="" constant="ENT_COMPAT"/>
    <parameter name="encoding" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="htmlDecode" start="975" end="978" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Convert all HTML entities to their applicable characters."/>
      <param description="The string to decode." type="string" variable="$str"/>
      <param description="See http://php.net/manual/en/function.html-entity-decode.php" type="object" variable="$flags">
        <type full="Stringy\int|null" namespace="Stringy" name="int|null"/>
      </param>
      <param description="The character encoding" type="string" variable="$encoding"/>
      <return description="Object with the resulting $str after being html decoded." type="object">
        <type full="Stringy\Stringy" namespace="Stringy" name="Stringy"/>
      </return>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="flags" byreference="false" type="{unknown}" default="" constant="ENT_COMPAT"/>
    <parameter name="encoding" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
</class>
