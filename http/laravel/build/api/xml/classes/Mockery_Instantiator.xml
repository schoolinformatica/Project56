<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="Mockery\Instantiator" namespace="Mockery" name="Instantiator" abstract="false" final="true" start="34" end="215">
  <file path="/home/robert/Desktop/Hogeschool/2ejaars Development/DevBOpdrachten/project56/http/laravel/vendor/mockery/mockery/library/Mockery" file="Instantiator.php" realpath="/home/robert/Desktop/Hogeschool/2ejaars Development/DevBOpdrachten/project56/http/laravel/vendor/mockery/mockery/library/Mockery/Instantiator.php" size="6887" time="2015-12-17T18:44:09+00:00" unixtime="1450377849" sha1="17c3c1e0dc214d83687b8f3c3fa6340fc00ad656" relative="vendor/mockery/mockery/library/Mockery/Instantiator.php"/>
  <docblock>
    <description compact="This is a trimmed down version of https://github.com/doctrine/instantiator, basically without the caching"/>
    <author value="Marco Pivetta &lt;ocramius@gmail.com&gt;"/>
  </docblock>
  <constant type="string" name="SERIALIZATION_FORMAT_USE_UNSERIALIZER" value="'C'">
    <docblock>
      <description compact="Markers used internally by PHP to define whether {@see \unserialize} should invoke the method {@see \Serializable::unserialize()} when dealing with classes implementing the {@see \Serializable} interface."/>
    </docblock>
  </constant>
  <constant type="string" name="SERIALIZATION_FORMAT_AVOID_UNSERIALIZER" value="'O'"/>
  <method name="instantiate" start="47" end="54" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="{@inheritDoc}"/>
    </docblock>
    <parameter name="className" byreference="false" type="{unknown}"/>
  </method>
  <method name="buildFactory" start="69" end="91" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <internal/>
      <private>Builds a <see xmlns="http://xml.phpdox.net/src" value="\Closure"/> capable of instantiating the given $className without
invoking its constructor.
This method is only exposed as public because of PHP 5.3 compatibility. Do not
use this method in your own code
</private>
      <param type="string" variable="$className"/>
      <return type="object">
        <type full="Closure" namespace="" name="Closure"/>
      </return>
    </docblock>
    <parameter name="className" byreference="false" type="{unknown}"/>
  </method>
  <method name="getReflectionClass" start="100" end="113" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description/>
      <param type="string" variable="$className"/>
      <return type="object">
        <type full="ReflectionClass" namespace="" name="ReflectionClass"/>
      </return>
      <throws type="object">
        <type full="InvalidArgumentException" namespace="" name="InvalidArgumentException"/>
      </throws>
    </docblock>
    <parameter name="className" byreference="false" type="{unknown}"/>
  </method>
  <method name="attemptInstantiationViaUnSerialization" start="123" end="149" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description/>
      <param type="object" variable="$reflectionClass">
        <type full="ReflectionClass" namespace="" name="ReflectionClass"/>
      </param>
      <param type="string" variable="$serializedString"/>
      <throws type="object">
        <type full="UnexpectedValueException" namespace="" name="UnexpectedValueException"/>
      </throws>
      <return type="object">
        <type full="Mockery\void" namespace="Mockery" name="void"/>
      </return>
    </docblock>
    <parameter name="reflectionClass" byreference="false" type="object">
      <type full="ReflectionClass" namespace="" name="ReflectionClass"/>
    </parameter>
    <parameter name="serializedString" byreference="false" type="{unknown}"/>
  </method>
  <method name="isInstantiableViaReflection" start="156" end="163" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description/>
      <param type="object" variable="$reflectionClass">
        <type full="ReflectionClass" namespace="" name="ReflectionClass"/>
      </param>
      <return type="object">
        <type full="Mockery\bool" namespace="Mockery" name="bool"/>
      </return>
    </docblock>
    <parameter name="reflectionClass" byreference="false" type="object">
      <type full="ReflectionClass" namespace="" name="ReflectionClass"/>
    </parameter>
  </method>
  <method name="hasInternalAncestors" start="172" end="181" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Verifies whether the given class is to be considered internal"/>
      <param type="object" variable="$reflectionClass">
        <type full="ReflectionClass" namespace="" name="ReflectionClass"/>
      </param>
      <return type="object">
        <type full="Mockery\bool" namespace="Mockery" name="bool"/>
      </return>
    </docblock>
    <parameter name="reflectionClass" byreference="false" type="object">
      <type full="ReflectionClass" namespace="" name="ReflectionClass"/>
    </parameter>
  </method>
  <method name="getSerializationFormat" start="195" end="204" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Verifies if the given PHP version implements the `Serializable` interface serialization with an incompatible serialization format. If that's the case, use serialization marker &quot;C&quot; instead of &quot;O&quot;."/>
      <link value="http://news.php.net/php.internals/74654"/>
      <param type="object" variable="$reflectionClass">
        <type full="ReflectionClass" namespace="" name="ReflectionClass"/>
      </param>
      <return description="the serialization format marker, either self::SERIALIZATION_FORMAT_USE_UNSERIALIZER" type="string">or self::SERIALIZATION_FORMAT_AVOID_UNSERIALIZER</return>
    </docblock>
    <parameter name="reflectionClass" byreference="false" type="object">
      <type full="ReflectionClass" namespace="" name="ReflectionClass"/>
    </parameter>
  </method>
  <method name="isPhpVersionWithBrokenSerializationFormat" start="211" end="214" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Checks whether the current PHP runtime uses an incompatible serialization format"/>
      <return type="object">
        <type full="Mockery\bool" namespace="Mockery" name="bool"/>
      </return>
    </docblock>
  </method>
</class>
