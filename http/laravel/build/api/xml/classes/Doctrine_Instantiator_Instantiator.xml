<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="Doctrine\Instantiator\Instantiator" namespace="Doctrine\Instantiator" name="Instantiator" abstract="false" final="true" start="33" end="273">
  <file path="/home/robert/Desktop/Hogeschool/2ejaars Development/DevBOpdrachten/project56/http/laravel/vendor/doctrine/instantiator/src/Doctrine/Instantiator" file="Instantiator.php" realpath="/home/robert/Desktop/Hogeschool/2ejaars Development/DevBOpdrachten/project56/http/laravel/vendor/doctrine/instantiator/src/Doctrine/Instantiator/Instantiator.php" size="8387" time="2015-12-17T18:44:09+00:00" unixtime="1450377849" sha1="11263312ae94a12380d300b4350988c8f46bd333" relative="vendor/doctrine/instantiator/src/Doctrine/Instantiator/Instantiator.php"/>
  <docblock>
    <description compact="{@inheritDoc}"/>
    <author value="Marco Pivetta &lt;ocramius@gmail.com&gt;"/>
  </docblock>
  <implements full="Doctrine\Instantiator\InstantiatorInterface" namespace="Doctrine\Instantiator" name="InstantiatorInterface"/>
  <constant type="string" name="SERIALIZATION_FORMAT_USE_UNSERIALIZER" value="'C'">
    <docblock>
      <description compact="Markers used internally by PHP to define whether {@see \unserialize} should invoke the method {@see \Serializable::unserialize()} when dealing with classes implementing the {@see \Serializable} interface."/>
    </docblock>
  </constant>
  <constant type="string" name="SERIALIZATION_FORMAT_AVOID_UNSERIALIZER" value="'O'"/>
  <member name="cachedInstantiators" type="array" default="" visibility="private" line="46">
    <docblock>
      <description/>
      <var description="of {@see \Closure} instances used to instantiate specific classes" type="array" of="object">
        <type full="\Closure" namespace="" name="Closure"/>
      </var>
    </docblock>
  </member>
  <member name="cachedCloneables" type="array" default="" visibility="private" line="51">
    <docblock>
      <description/>
      <var description="of objects that can directly be cloned" type="array" of="object">
        <type full="Doctrine\Instantiator\object" namespace="Doctrine\Instantiator" name="object"/>
      </var>
    </docblock>
  </member>
  <method name="instantiate" start="56" end="69" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="{@inheritDoc}"/>
    </docblock>
    <parameter name="className" byreference="false" type="{unknown}"/>
  </method>
  <method name="buildAndCacheFromFactory" start="78" end="88" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Builds the requested object and caches it in static properties for performance"/>
      <param type="string" variable="$className"/>
      <return type="object"/>
    </docblock>
    <parameter name="className" byreference="false" type="{unknown}"/>
  </method>
  <method name="buildFactory" start="98" end="120" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Builds a {@see \Closure} capable of instantiating the given $className without invoking its constructor."/>
      <param type="string" variable="$className"/>
      <return type="object">
        <type full="Closure" namespace="" name="Closure"/>
      </return>
    </docblock>
    <parameter name="className" byreference="false" type="{unknown}"/>
  </method>
  <method name="getReflectionClass" start="129" end="142" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description/>
      <param type="string" variable="$className"/>
      <return type="object">
        <type full="ReflectionClass" namespace="" name="ReflectionClass"/>
      </return>
      <throws type="object">
        <type full="Doctrine\Instantiator\Exception\InvalidArgumentException" namespace="Doctrine\Instantiator\Exception" name="InvalidArgumentException"/>
      </throws>
    </docblock>
    <parameter name="className" byreference="false" type="{unknown}"/>
  </method>
  <method name="checkIfUnSerializationIsSupported" start="152" end="171" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description/>
      <param type="object" variable="$reflectionClass">
        <type full="ReflectionClass" namespace="" name="ReflectionClass"/>
      </param>
      <param type="string" variable="$serializedString"/>
      <throws type="object">
        <type full="Doctrine\Instantiator\Exception\UnexpectedValueException" namespace="Doctrine\Instantiator\Exception" name="UnexpectedValueException"/>
      </throws>
      <return type="object">
        <type full="Doctrine\Instantiator\void" namespace="Doctrine\Instantiator" name="void"/>
      </return>
    </docblock>
    <parameter name="reflectionClass" byreference="false" type="object">
      <type full="ReflectionClass" namespace="" name="ReflectionClass"/>
    </parameter>
    <parameter name="serializedString" byreference="false" type="{unknown}"/>
  </method>
  <method name="attemptInstantiationViaUnSerialization" start="181" end="190" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description/>
      <param type="object" variable="$reflectionClass">
        <type full="ReflectionClass" namespace="" name="ReflectionClass"/>
      </param>
      <param type="string" variable="$serializedString"/>
      <throws type="object">
        <type full="Doctrine\Instantiator\Exception\UnexpectedValueException" namespace="Doctrine\Instantiator\Exception" name="UnexpectedValueException"/>
      </throws>
      <return type="object">
        <type full="Doctrine\Instantiator\void" namespace="Doctrine\Instantiator" name="void"/>
      </return>
    </docblock>
    <parameter name="reflectionClass" byreference="false" type="object">
      <type full="ReflectionClass" namespace="" name="ReflectionClass"/>
    </parameter>
    <parameter name="serializedString" byreference="false" type="{unknown}"/>
  </method>
  <method name="isInstantiableViaReflection" start="197" end="204" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description/>
      <param type="object" variable="$reflectionClass">
        <type full="ReflectionClass" namespace="" name="ReflectionClass"/>
      </param>
      <return type="object">
        <type full="Doctrine\Instantiator\bool" namespace="Doctrine\Instantiator" name="bool"/>
      </return>
    </docblock>
    <parameter name="reflectionClass" byreference="false" type="object">
      <type full="ReflectionClass" namespace="" name="ReflectionClass"/>
    </parameter>
  </method>
  <method name="hasInternalAncestors" start="213" end="222" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Verifies whether the given class is to be considered internal"/>
      <param type="object" variable="$reflectionClass">
        <type full="ReflectionClass" namespace="" name="ReflectionClass"/>
      </param>
      <return type="object">
        <type full="Doctrine\Instantiator\bool" namespace="Doctrine\Instantiator" name="bool"/>
      </return>
    </docblock>
    <parameter name="reflectionClass" byreference="false" type="object">
      <type full="ReflectionClass" namespace="" name="ReflectionClass"/>
    </parameter>
  </method>
  <method name="getSerializationFormat" start="236" end="245" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Verifies if the given PHP version implements the `Serializable` interface serialization with an incompatible serialization format. If that's the case, use serialization marker &quot;C&quot; instead of &quot;O&quot;."/>
      <link value="http://news.php.net/php.internals/74654"/>
      <param type="object" variable="$reflectionClass">
        <type full="ReflectionClass" namespace="" name="ReflectionClass"/>
      </param>
      <return description="the serialization format marker, either self::SERIALIZATION_FORMAT_USE_UNSERIALIZER" type="string">or self::SERIALIZATION_FORMAT_AVOID_UNSERIALIZER</return>
    </docblock>
    <parameter name="reflectionClass" byreference="false" type="object">
      <type full="ReflectionClass" namespace="" name="ReflectionClass"/>
    </parameter>
  </method>
  <method name="isPhpVersionWithBrokenSerializationFormat" start="252" end="255" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Checks whether the current PHP runtime uses an incompatible serialization format"/>
      <return type="object">
        <type full="Doctrine\Instantiator\bool" namespace="Doctrine\Instantiator" name="bool"/>
      </return>
    </docblock>
  </method>
  <method name="isSafeToClone" start="264" end="272" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Checks if a class is cloneable"/>
      <param type="object" variable="$reflection">
        <type full="ReflectionClass" namespace="" name="ReflectionClass"/>
      </param>
      <return type="object">
        <type full="Doctrine\Instantiator\bool" namespace="Doctrine\Instantiator" name="bool"/>
      </return>
    </docblock>
    <parameter name="reflection" byreference="false" type="object">
      <type full="ReflectionClass" namespace="" name="ReflectionClass"/>
    </parameter>
    <inline>
      <comment value="not cloneable if it implements `__clone`, as we want to avoid calling it" line="270"/>
    </inline>
  </method>
</class>
