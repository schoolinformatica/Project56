<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="Faker\Provider\Base" namespace="Faker\Provider" name="Base" abstract="false" final="false" start="9" end="509">
  <file path="/home/robert/Desktop/Hogeschool/2ejaars Development/DevBOpdrachten/project56/http/laravel/vendor/fzaninotto/faker/src/Faker/Provider" file="Base.php" realpath="/home/robert/Desktop/Hogeschool/2ejaars Development/DevBOpdrachten/project56/http/laravel/vendor/fzaninotto/faker/src/Faker/Provider/Base.php" size="16737" time="2015-12-17T18:44:09+00:00" unixtime="1450377849" sha1="1f509e0acc7deeb14588cd77f3052816df83bfde" relative="vendor/fzaninotto/faker/src/Faker/Provider/Base.php"/>
  <member name="generator" visibility="protected" line="14">
    <docblock>
      <description/>
      <var type="object">
        <type full="\Faker\Generator" namespace="\Faker" name="Generator"/>
      </var>
    </docblock>
  </member>
  <member name="unique" visibility="protected" line="19">
    <docblock>
      <description/>
      <var type="object">
        <type full="\Faker\UniqueGenerator" namespace="\Faker" name="UniqueGenerator"/>
      </var>
    </docblock>
  </member>
  <constructor name="__construct" start="24" end="27" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <param type="object" variable="$generator">
        <type full="\Faker\Generator" namespace="\Faker" name="Generator"/>
      </param>
    </docblock>
    <parameter name="generator" byreference="false" type="object">
      <type full="Faker\Generator" namespace="Faker" name="Generator"/>
    </parameter>
  </constructor>
  <method name="randomDigit" start="34" end="37" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns a random number between 0 and 9"/>
      <return type="integer"/>
    </docblock>
  </method>
  <method name="randomDigitNotNull" start="44" end="47" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns a random number between 1 and 9"/>
      <return type="integer"/>
    </docblock>
  </method>
  <method name="randomNumber" start="60" end="77" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns a random integer with 0 to $nbDigits digits.">The maximum value returned is mt_getrandmax()</description>
      <param description="Defaults to a random number between 1 and 9" type="integer" variable="$nbDigits"/>
      <param description="Whether the returned number should have exactly $nbDigits" type="boolean" variable="$strict"/>
      <example value="79907610"/>
      <return type="integer"/>
    </docblock>
    <parameter name="nbDigits" byreference="false" type="{unknown}" default="" constant="null"/>
    <parameter name="strict" byreference="false" type="boolean" default="false"/>
  </method>
  <method name="randomFloat" start="89" end="106" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Return a random float number"/>
      <param type="int" variable="$nbMaxDecimals"/>
      <param type="object" variable="$min">
        <type full="Faker\Provider\int|float" namespace="Faker\Provider" name="int|float"/>
      </param>
      <param type="object" variable="$max">
        <type full="Faker\Provider\int|float" namespace="Faker\Provider" name="int|float"/>
      </param>
      <example value="48.8932"/>
      <return type="float"/>
    </docblock>
    <parameter name="nbMaxDecimals" byreference="false" type="{unknown}" default="" constant="null"/>
    <parameter name="min" byreference="false" type="integer" default="0"/>
    <parameter name="max" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="numberBetween" start="117" end="120" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns a random number between $min and $max"/>
      <param description="default to 0" type="integer" variable="$min"/>
      <param description="defaults to 32 bit max integer, ie 2147483647" type="integer" variable="$max"/>
      <example value="79907610"/>
      <return type="integer"/>
    </docblock>
    <parameter name="min" byreference="false" type="integer" default="0"/>
    <parameter name="max" byreference="false" type="integer" default="2147483647"/>
  </method>
  <method name="randomLetter" start="127" end="130" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns a random letter from a to z"/>
      <return type="string"/>
    </docblock>
  </method>
  <method name="randomAscii" start="135" end="138" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns a random ASCII character (excluding accents and special chars)"/>
    </docblock>
  </method>
  <method name="randomElements" start="149" end="174" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns random elements from a provided array"/>
      <param description="Array to take elements from. Defaults to a-f" type="array" variable="$array"/>
      <param description="Number of elements to take." type="integer" variable="$count"/>
      <throws description="When requesting more elements than provided" type="object">
        <type full="\LengthException" namespace="" name="LengthException"/>
      </throws>
      <return description="New array with $count elements from $array" type="array"/>
    </docblock>
    <parameter name="array" byreference="false" type="array" default=""/>
    <parameter name="count" byreference="false" type="integer" default="1"/>
  </method>
  <method name="randomElement" start="182" end="190" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns a random element from a passed array"/>
      <param type="array" variable="$array"/>
      <return type="mixed"/>
    </docblock>
    <parameter name="array" byreference="false" type="array" default=""/>
  </method>
  <method name="randomKey" start="198" end="207" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns a random key from a passed associative array"/>
      <param type="array" variable="$array"/>
      <return type="object">
        <type full="Faker\Provider\int|string|null" namespace="Faker\Provider" name="int|string|null"/>
      </return>
    </docblock>
    <parameter name="array" byreference="false" type="array" default=""/>
  </method>
  <method name="shuffle" start="223" end="232" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns a shuffled version of the argument.">This function accepts either an array, or a string.</description>
      <example value="$faker-&gt;shuffle([1, 2, 3]); // [2, 1, 3]"/>
      <example value="$faker-&gt;shuffle('hello, world'); // 'rlo,h eold!lw'"/>
      <see value="shuffleArray()"/>
      <see value="shuffleString()"/>
      <param description="The set to shuffle" type="object" variable="$arg">
        <type full="Faker\Provider\array|string" namespace="Faker\Provider" name="array|string"/>
      </param>
      <return description="The shuffled set" type="object">
        <type full="Faker\Provider\array|string" namespace="Faker\Provider" name="array|string"/>
      </return>
    </docblock>
    <parameter name="arg" byreference="false" type="string" default="''"/>
  </method>
  <method name="shuffleArray" start="249" end="269" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns a shuffled version of the array.">This function does not mutate the original array. It uses the
Fisher–Yates algorithm, which is unbiaised, together with a Mersenne
twister random generator. This function is therefore more random than
PHP's shuffle() function, and it is seedable.</description>
      <link value="http://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle"/>
      <example value="$faker-&gt;shuffleArray([1, 2, 3]); // [2, 1, 3]"/>
      <param description="The set to shuffle" type="array" variable="$array"/>
      <return description="The shuffled set" type="array"/>
    </docblock>
    <parameter name="array" byreference="false" type="array" default=""/>
  </method>
  <method name="shuffleString" start="288" end="301" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns a shuffled version of the string.">This function does not mutate the original string. It uses the
Fisher–Yates algorithm, which is unbiaised, together with a Mersenne
twister random generator. This function is therefore more random than
PHP's shuffle() function, and it is seedable. Additionally, it is
UTF8 safe if the mb extension is available.</description>
      <link value="http://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle"/>
      <example value="$faker-&gt;shuffleString('hello, world'); // 'rlo,h eold!lw'"/>
      <param description="The set to shuffle" type="string" variable="$string"/>
      <param description="The string encoding (defaults to UTF-8)" type="string" variable="$encoding"/>
      <return description="The shuffled set" type="string"/>
    </docblock>
    <parameter name="string" byreference="false" type="string" default="''"/>
    <parameter name="encoding" byreference="false" type="string" default="'UTF-8'"/>
  </method>
  <method name="numerify" start="310" end="336" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Replaces all hash sign ('#') occurrences with a random number Replaces all percentage sign ('%') occurrences with a not null number"/>
      <param description="String that needs to bet parsed" type="string" variable="$string"/>
      <return type="string"/>
    </docblock>
    <parameter name="string" byreference="false" type="string" default="'###'"/>
    <inline>
      <comment value="instead of using randomDigit() several times, which is slow," line="312"/>
      <comment value="count the number of hashes and generate once a large number" line="313"/>
    </inline>
  </method>
  <method name="lexify" start="344" end="347" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Replaces all question mark ('?') occurrences with a random letter"/>
      <param description="String that needs to bet parsed" type="string" variable="$string"/>
      <return type="string"/>
    </docblock>
    <parameter name="string" byreference="false" type="string" default="'????'"/>
  </method>
  <method name="bothify" start="355" end="358" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Replaces hash signs and question marks with random numbers and letters"/>
      <param description="String that needs to bet parsed" type="string" variable="$string"/>
      <return type="string"/>
    </docblock>
    <parameter name="string" byreference="false" type="string" default="'## ??'"/>
  </method>
  <method name="asciify" start="368" end="371" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Replaces * signs with random numbers and letters and special characters"/>
      <example value="$faker-&gt;asciify(''********'); // &quot;s5'G!uC3&quot;"/>
      <param description="String that needs to bet parsed" type="string" variable="$string"/>
      <return type="string"/>
    </docblock>
    <parameter name="string" byreference="false" type="string" default="'****'"/>
  </method>
  <method name="regexify" start="399" end="444" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Transforms a basic regular expression into a random string satisfying the expression."/>
      <example value="$faker-&gt;regexify('[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}'); // sm0@y8k96a.ej">Regex delimiters '/.../' and begin/end markers '^...$' are ignored.

Only supports a small subset of the regex syntax. For instance,
unicode, negated classes, unbouned ranges, subpatterns, back references,
assertions, recursive patterns, and comments are not supported. Escaping
support is extremely fragile.

This method is also VERY slow. Use it only when no other formatter
can generate the fake data you want. For instance, prefer calling
`$faker-&gt;email` rather than `regexify` with the previous regular
expression.

Also note than `bothify` can probably do most of what this method does,
but much faster. For instance, for a dummy email generation, try
`$faker-&gt;bothify('?????????@???.???')`.</example>
      <see value="https://github.com/icomefromthenet/ReverseRegex for a more robust implementation"/>
      <param description="A regular expression (delimiters are optional)" type="string" variable="$regex"/>
      <return type="string"/>
    </docblock>
    <parameter name="regex" byreference="false" type="string" default="''"/>
    <inline>
      <comment value="ditch the anchors" line="401"/>
      <comment value="All {2} become {2,2}" line="404"/>
      <comment value="Single-letter quantifiers (?, *, +) become bracket quantifiers ({0,1}, {0,rand}, {1, rand})" line="406"/>
      <comment value="[12]{1,2} becomes [12] or [12][12]" line="410"/>
      <comment value="(12|34){1,2} becomes (12|34) or (12|34)(12|34)" line="414"/>
      <comment value="A{1,2} becomes A or AA or \d{3} becomes \d\d\d" line="418"/>
      <comment value="(this|that) becomes 'this' or 'that'" line="422"/>
      <comment value="All A-F inside of [] become ABCDEF" line="426"/>
      <comment value="All [ABC] become B (or A or C)" line="432"/>
      <comment value="replace \d with number and \w with letter and . with ascii" line="436"/>
      <comment value="remove remaining backslashes" line="440"/>
      <comment value="phew" line="442"/>
    </inline>
  </method>
  <method name="toLower" start="453" end="456" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Converts string to lowercase.">Uses mb_string extension if available.</description>
      <param description="String that should be converted to lowercase" type="string" variable="$string"/>
      <return type="string"/>
    </docblock>
    <parameter name="string" byreference="false" type="string" default="''"/>
  </method>
  <method name="toUpper" start="465" end="468" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Converts string to uppercase.">Uses mb_string extension if available.</description>
      <param description="String that should be converted to uppercase" type="string" variable="$string"/>
      <return type="string"/>
    </docblock>
    <parameter name="string" byreference="false" type="string" default="''"/>
  </method>
  <method name="optional" start="477" end="484" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Chainable method for making any formatter optional."/>
      <param description="Set the probability of receiving a null value." type="float" variable="$weight">"0" will always return null, "1" will always return the generator.</param>
      <return type="object">
        <type full="Faker\Provider\Generator|DefaultGenerator" namespace="Faker\Provider" name="Generator|DefaultGenerator"/>
      </return>
    </docblock>
    <parameter name="weight" byreference="false" type="float" default="0.5"/>
    <parameter name="default" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="unique" start="501" end="508" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Chainable method for making any formatter unique.">&lt;code&gt;
// will never return twice the same value
$faker-&gt;unique()-&gt;randomElement(array(1, 2, 3));
&lt;/code&gt;</description>
      <param description="If set to true, resets the list of existing values" type="boolean" variable="$reset"/>
      <param description="Maximum number of retries to find a unique value," type="integer" variable="$maxRetries">After which an OverflowException is thrown.</param>
      <throws description="When no unique value can be found by iterating $maxRetries times" type="object">
        <type full="\OverflowException" namespace="" name="OverflowException"/>
      </throws>
      <return description="A proxy class returning only non-existing values" type="object">
        <type full="Faker\UniqueGenerator" namespace="Faker" name="UniqueGenerator"/>
      </return>
    </docblock>
    <parameter name="reset" byreference="false" type="boolean" default="false"/>
    <parameter name="maxRetries" byreference="false" type="integer" default="10000"/>
  </method>
</class>
