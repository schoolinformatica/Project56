<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="Util_TestTest" namespace="" name="Util_TestTest" abstract="false" final="false" start="25" end="673">
  <file path="/home/robert/Desktop/Hogeschool/2ejaars Development/DevBOpdrachten/project56/http/laravel/vendor/phpunit/phpunit/tests/Util" file="TestTest.php" realpath="/home/robert/Desktop/Hogeschool/2ejaars Development/DevBOpdrachten/project56/http/laravel/vendor/phpunit/phpunit/tests/Util/TestTest.php" size="23223" time="2015-12-17T18:44:10+00:00" unixtime="1450377850" sha1="05cfeca5e2fc6810fd1b677f2acdf5e526691833" relative="vendor/phpunit/phpunit/tests/Util/TestTest.php"/>
  <docblock>
    <description/>
    <since value="Class available since Release 3.3.6"/>
  </docblock>
  <extends full="PHPUnit_Framework_TestCase" namespace="" name="PHPUnit_Framework_TestCase"/>
  <method name="testGetExpectedException" start="32" end="99" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <covers value="PHPUnit_Util_Test::getExpectedException"/>
      <todo value="Split up in separate tests"/>
    </docblock>
    <inline>
      <comment value="Ensure the Class::CONST expression is only evaluated when the constant really exists" line="89"/>
    </inline>
  </method>
  <method name="testGetExpectedRegExp" start="104" end="120" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <covers value="PHPUnit_Util_Test::getExpectedException"/>
    </docblock>
  </method>
  <method name="testGetRequirements" start="126" end="132" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <covers value="PHPUnit_Util_Test::getRequirements"/>
      <dataprovider value="requirementsProvider"/>
    </docblock>
    <parameter name="test" byreference="false" type="{unknown}"/>
    <parameter name="result" byreference="false" type="{unknown}"/>
  </method>
  <method name="requirementsProvider" start="134" end="172" abstract="false" final="false" static="false" visibility="public"/>
  <method name="testGetRequirementsMergesClassAndMethodDocBlocks" start="177" end="197" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <covers value="PHPUnit_Util_Test::getRequirements"/>
    </docblock>
  </method>
  <method name="testGetMissingRequirements" start="203" end="209" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <covers value="PHPUnit_Util_Test::getMissingRequirements"/>
      <dataprovider value="missingRequirementsProvider"/>
    </docblock>
    <parameter name="test" byreference="false" type="{unknown}"/>
    <parameter name="result" byreference="false" type="{unknown}"/>
  </method>
  <method name="missingRequirementsProvider" start="211" end="230" abstract="false" final="false" static="false" visibility="public"/>
  <method name="testGetProvidedDataRegEx" start="237" end="258" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <coversnothing/>
      <todo value="This test does not really test functionality of PHPUnit_Util_Test"/>
    </docblock>
  </method>
  <method name="testTestWithEmptyAnnotation" start="263" end="267" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <covers value="PHPUnit_Util_Test::getDataFromTestWithAnnotation"/>
    </docblock>
  </method>
  <method name="testTestWithSimpleCase" start="272" end="278" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <covers value="PHPUnit_Util_Test::getDataFromTestWithAnnotation"/>
    </docblock>
  </method>
  <method name="testTestWithMultiLineMultiParameterCase" start="283" end="290" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <covers value="PHPUnit_Util_Test::getDataFromTestWithAnnotation"/>
    </docblock>
  </method>
  <method name="testTestWithVariousTypes" start="295" end="303" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <covers value="PHPUnit_Util_Test::getDataFromTestWithAnnotation"/>
    </docblock>
  </method>
  <method name="testTestWithAnnotationAfter" start="308" end="316" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <covers value="PHPUnit_Util_Test::getDataFromTestWithAnnotation"/>
    </docblock>
  </method>
  <method name="testTestWithSimpleTextAfter" start="321" end="329" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <covers value="PHPUnit_Util_Test::getDataFromTestWithAnnotation"/>
    </docblock>
  </method>
  <method name="testTestWithCharacterEscape" start="334" end="340" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <covers value="PHPUnit_Util_Test::getDataFromTestWithAnnotation"/>
    </docblock>
  </method>
  <method name="testTestWithThrowsProperExceptionIfDatasetCannotBeParsed" start="345" end="354" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <covers value="PHPUnit_Util_Test::getDataFromTestWithAnnotation"/>
    </docblock>
  </method>
  <method name="testParseAnnotation" start="361" end="367" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <covers value="PHPUnit_Util_Test::getDependencies"/>
      <todo value="Not sure what this test tests (name is misleading at least)"/>
    </docblock>
  </method>
  <method name="methodForTestParseAnnotation" start="375" end="377" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <depends value="Foo"/>
      <depends value="ほげ"/>
      <todo value="Remove fixture from test class"/>
    </docblock>
  </method>
  <method name="testParseAnnotationThatIsOnlyOneLine" start="382" end="388" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <covers value="PHPUnit_Util_Test::getDependencies"/>
    </docblock>
  </method>
  <method name="methodForTestParseAnnotationThatIsOnlyOneLine" start="391" end="394" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="@depends Bar"/>
    </docblock>
  </method>
  <method name="testGetLinesToBeCovered" start="402" end="426" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <covers value="PHPUnit_Util_Test::getLinesToBeCovered"/>
      <covers value="PHPUnit_Util_Test::getLinesToBeCoveredOrUsed"/>
      <covers value="PHPUnit_Util_Test::resolveElementToReflectionObjects"/>
      <dataprovider value="getLinesToBeCoveredProvider"/>
    </docblock>
    <parameter name="test" byreference="false" type="{unknown}"/>
    <parameter name="lines" byreference="false" type="{unknown}"/>
  </method>
  <method name="testGetLinesToBeCovered2" start="434" end="439" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <covers value="PHPUnit_Util_Test::getLinesToBeCovered"/>
      <covers value="PHPUnit_Util_Test::getLinesToBeCoveredOrUsed"/>
      <covers value="PHPUnit_Util_Test::resolveElementToReflectionObjects"/>
      <expectedexception value="PHPUnit_Framework_CodeCoverageException"/>
    </docblock>
  </method>
  <method name="testGetLinesToBeCovered3" start="447" end="452" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <covers value="PHPUnit_Util_Test::getLinesToBeCovered"/>
      <covers value="PHPUnit_Util_Test::getLinesToBeCoveredOrUsed"/>
      <covers value="PHPUnit_Util_Test::resolveElementToReflectionObjects"/>
      <expectedexception value="PHPUnit_Framework_CodeCoverageException"/>
    </docblock>
  </method>
  <method name="testGetLinesToBeCovered4" start="460" end="465" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <covers value="PHPUnit_Util_Test::getLinesToBeCovered"/>
      <covers value="PHPUnit_Util_Test::getLinesToBeCoveredOrUsed"/>
      <covers value="PHPUnit_Util_Test::resolveElementToReflectionObjects"/>
      <expectedexception value="PHPUnit_Framework_CodeCoverageException"/>
    </docblock>
  </method>
  <method name="testGetLinesToBeCoveredSkipsNonExistentMethods" start="471" end="480" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <covers value="PHPUnit_Util_Test::getLinesToBeCovered"/>
      <covers value="PHPUnit_Util_Test::getLinesToBeCoveredOrUsed"/>
    </docblock>
  </method>
  <method name="testTwoCoversDefaultClassAnnoationsAreNotAllowed" start="487" end="493" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <covers value="PHPUnit_Util_Test::getLinesToBeCovered"/>
      <covers value="PHPUnit_Util_Test::getLinesToBeCoveredOrUsed"/>
      <expectedexception value="PHPUnit_Framework_CodeCoverageException"/>
    </docblock>
  </method>
  <method name="testFunctionParenthesesAreAllowed" start="499" end="508" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <covers value="PHPUnit_Util_Test::getLinesToBeCovered"/>
      <covers value="PHPUnit_Util_Test::getLinesToBeCoveredOrUsed"/>
    </docblock>
  </method>
  <method name="testFunctionParenthesesAreAllowedWithWhitespace" start="514" end="523" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <covers value="PHPUnit_Util_Test::getLinesToBeCovered"/>
      <covers value="PHPUnit_Util_Test::getLinesToBeCoveredOrUsed"/>
    </docblock>
  </method>
  <method name="testMethodParenthesesAreAllowed" start="529" end="538" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <covers value="PHPUnit_Util_Test::getLinesToBeCovered"/>
      <covers value="PHPUnit_Util_Test::getLinesToBeCoveredOrUsed"/>
    </docblock>
  </method>
  <method name="testMethodParenthesesAreAllowedWithWhitespace" start="544" end="553" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <covers value="PHPUnit_Util_Test::getLinesToBeCovered"/>
      <covers value="PHPUnit_Util_Test::getLinesToBeCoveredOrUsed"/>
    </docblock>
  </method>
  <method name="testNamespacedFunctionCanBeCoveredOrUsed" start="559" end="570" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <covers value="PHPUnit_Util_Test::getLinesToBeCovered"/>
      <covers value="PHPUnit_Util_Test::getLinesToBeCoveredOrUsed"/>
    </docblock>
  </method>
  <method name="getLinesToBeCoveredProvider" start="572" end="672" abstract="false" final="false" static="false" visibility="public"/>
</class>
