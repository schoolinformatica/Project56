<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="Symfony\Component\DomCrawler\Crawler" namespace="Symfony\Component\DomCrawler" name="Crawler" abstract="false" final="false" start="21" end="1016">
  <file path="/home/robert/Desktop/Hogeschool/2ejaars Development/DevBOpdrachten/project56/http/laravel/vendor/symfony/dom-crawler" file="Crawler.php" realpath="/home/robert/Desktop/Hogeschool/2ejaars Development/DevBOpdrachten/project56/http/laravel/vendor/symfony/dom-crawler/Crawler.php" size="31490" time="2015-12-17T18:44:10+00:00" unixtime="1450377850" sha1="6b186ecfcde9a024886f377eb63cec9ad403a75e" relative="vendor/symfony/dom-crawler/Crawler.php"/>
  <docblock>
    <description compact="Crawler eases navigation of a list of \DOMElement objects."/>
    <author value="Fabien Potencier &lt;fabien@symfony.com&gt;"/>
  </docblock>
  <extends full="SplObjectStorage" namespace="" name="SplObjectStorage"/>
  <member name="uri" visibility="protected" line="26">
    <docblock>
      <description/>
      <var description="The current URI" type="string"/>
    </docblock>
  </member>
  <member name="defaultNamespacePrefix" type="string" default="'default'" visibility="private" line="31">
    <docblock>
      <description/>
      <var description="The default namespace prefix to be used with XPath and CSS expressions" type="string"/>
    </docblock>
  </member>
  <member name="namespaces" type="array" default="" visibility="private" line="36">
    <docblock>
      <description/>
      <var description="A map of manually registered namespaces" type="array"/>
    </docblock>
  </member>
  <member name="baseHref" visibility="private" line="41">
    <docblock>
      <description/>
      <var description="The base href value" type="string"/>
    </docblock>
  </member>
  <constructor name="__construct" start="50" end="56" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Constructor."/>
      <param description="A Node to use as the base for the crawling" type="mixed" variable="$node"/>
      <param description="The current URI" type="string" variable="$currentUri"/>
      <param description="The base href value" type="string" variable="$baseHref"/>
    </docblock>
    <parameter name="node" byreference="false" type="{unknown}" default="" constant="null"/>
    <parameter name="currentUri" byreference="false" type="{unknown}" default="" constant="null"/>
    <parameter name="baseHref" byreference="false" type="{unknown}" default="" constant="null"/>
  </constructor>
  <method name="clear" start="61" end="64" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Removes all the nodes."/>
    </docblock>
  </method>
  <method name="add" start="76" end="89" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Adds a node to the current list of nodes.">This method uses the appropriate specialized add*() method based
on the type of the argument.</description>
      <param description="A node" type="object" variable="$node">
        <type full="\DOMNodeList|\DOMNode|array|string|null" namespace="\DOMNodeList|" name="DOMNode|array|string|null"/>
      </param>
      <throws description="When node is not the expected type." type="object">
        <type full="\InvalidArgumentException" namespace="" name="InvalidArgumentException"/>
      </throws>
    </docblock>
    <parameter name="node" byreference="false" type="{unknown}"/>
  </method>
  <method name="addContent" start="101" end="136" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Adds HTML/XML content.">If the charset is not set via the content type, it is assumed
to be ISO-8859-1, which is the default charset defined by the
HTTP 1.1 specification.</description>
      <param description="A string to parse as HTML/XML" type="string" variable="$content"/>
      <param description="The content type of the string" type="object" variable="$type">
        <type full="Symfony\Component\DomCrawler\null|string" namespace="Symfony\Component\DomCrawler" name="null|string"/>
      </param>
    </docblock>
    <parameter name="content" byreference="false" type="{unknown}"/>
    <parameter name="type" byreference="false" type="{unknown}" default="" constant="null"/>
    <inline>
      <comment value="DOM only for HTML/XML content" line="107"/>
      <comment value="http://www.w3.org/TR/encoding/#encodings" line="120"/>
      <comment value="http://www.w3.org/TR/REC-xml/#NT-EncName" line="121"/>
    </inline>
  </method>
  <method name="addHtmlContent" start="151" end="218" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Adds an HTML content to the list of nodes.">The libxml errors are disabled when the content is parsed.

If you want to get parsing errors, be sure to enable
internal errors via libxml_use_internal_errors(true)
and then, get the errors via libxml_get_errors(). Be
sure to clear errors with libxml_clear_errors() afterward.</description>
      <param description="The HTML content" type="string" variable="$content"/>
      <param description="The charset" type="string" variable="$charset"/>
    </docblock>
    <parameter name="content" byreference="false" type="{unknown}"/>
    <parameter name="charset" byreference="false" type="string" default="'UTF-8'"/>
  </method>
  <method name="addXmlContent" start="233" end="254" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Adds an XML content to the list of nodes.">The libxml errors are disabled when the content is parsed.

If you want to get parsing errors, be sure to enable
internal errors via libxml_use_internal_errors(true)
and then, get the errors via libxml_get_errors(). Be
sure to clear errors with libxml_clear_errors() afterward.</description>
      <param description="The XML content" type="string" variable="$content"/>
      <param description="The charset" type="string" variable="$charset"/>
    </docblock>
    <parameter name="content" byreference="false" type="{unknown}"/>
    <parameter name="charset" byreference="false" type="string" default="'UTF-8'"/>
    <inline>
      <comment value="remove the default namespace if it's the only namespace to make XPath expressions simpler" line="235"/>
    </inline>
  </method>
  <method name="addDocument" start="261" end="266" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Adds a \DOMDocument to the list of nodes."/>
      <param description="A \DOMDocument instance" type="object" variable="$dom">
        <type full="\DOMDocument" namespace="" name="DOMDocument"/>
      </param>
    </docblock>
    <parameter name="dom" byreference="false" type="object">
      <type full="DOMDocument" namespace="" name="DOMDocument"/>
    </parameter>
  </method>
  <method name="addNodeList" start="273" end="280" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Adds a \DOMNodeList to the list of nodes."/>
      <param description="A \DOMNodeList instance" type="object" variable="$nodes">
        <type full="\DOMNodeList" namespace="" name="DOMNodeList"/>
      </param>
    </docblock>
    <parameter name="nodes" byreference="false" type="object">
      <type full="DOMNodeList" namespace="" name="DOMNodeList"/>
    </parameter>
  </method>
  <method name="addNodes" start="287" end="292" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Adds an array of \DOMNode instances to the list of nodes."/>
      <param description="An array of \DOMNode instances" type="array" variable="$nodes" of="object">
        <type full="\DOMNode" namespace="" name="DOMNode"/>
      </param>
    </docblock>
    <parameter name="nodes" byreference="false" type="array"/>
  </method>
  <method name="addNode" start="299" end="306" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Adds a \DOMNode instance to the list of nodes."/>
      <param description="A \DOMNode instance" type="object" variable="$node">
        <type full="\DOMNode" namespace="" name="DOMNode"/>
      </param>
    </docblock>
    <parameter name="node" byreference="false" type="object">
      <type full="DOMNode" namespace="" name="DOMNode"/>
    </parameter>
  </method>
  <method name="unserialize" start="309" end="312" abstract="false" final="false" static="false" visibility="public">
    <parameter name="serialized" byreference="false" type="{unknown}"/>
  </method>
  <method name="serialize" start="314" end="317" abstract="false" final="false" static="false" visibility="public"/>
  <method name="eq" start="326" end="335" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns a node given its position in the node list."/>
      <param description="The position" type="int" variable="$position"/>
      <return description="A new instance of the Crawler with the selected node, or an empty Crawler if it does not exist." type="object">
        <type full="Symfony\Component\DomCrawler\Crawler" namespace="Symfony\Component\DomCrawler" name="Crawler"/>
      </return>
    </docblock>
    <parameter name="position" byreference="false" type="{unknown}"/>
  </method>
  <method name="each" start="353" end="361" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Calls an anonymous function on each node of the list.">The anonymous function receives the position and the node wrapped
in a Crawler instance as arguments.

Example:

    $crawler-&gt;filter('h1')-&gt;each(function ($node, $i) {
        return $node-&gt;text();
    });</description>
      <param description="An anonymous function" type="object" variable="$closure">
        <type full="\Closure" namespace="" name="Closure"/>
      </param>
      <return description="An array of values returned by the anonymous function" type="array"/>
    </docblock>
    <parameter name="closure" byreference="false" type="object">
      <type full="Closure" namespace="" name="Closure"/>
    </parameter>
  </method>
  <method name="slice" start="371" end="374" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Slices the list of nodes by $offset and $length."/>
      <param type="int" variable="$offset"/>
      <param type="int" variable="$length"/>
      <return description="A Crawler instance with the sliced nodes" type="object">
        <type full="Symfony\Component\DomCrawler\Crawler" namespace="Symfony\Component\DomCrawler" name="Crawler"/>
      </return>
    </docblock>
    <parameter name="offset" byreference="false" type="integer" default="0"/>
    <parameter name="length" byreference="false" type="integer" default="1"/>
  </method>
  <method name="reduce" start="385" end="395" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Reduces the list of nodes by calling an anonymous function.">To remove a node from the list, the anonymous function must return false.</description>
      <param description="An anonymous function" type="object" variable="$closure">
        <type full="\Closure" namespace="" name="Closure"/>
      </param>
      <return description="A Crawler instance with the selected nodes." type="object">
        <type full="Symfony\Component\DomCrawler\Crawler" namespace="Symfony\Component\DomCrawler" name="Crawler"/>
      </return>
    </docblock>
    <parameter name="closure" byreference="false" type="object">
      <type full="Closure" namespace="" name="Closure"/>
    </parameter>
  </method>
  <method name="first" start="402" end="405" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the first node of the current selection."/>
      <return description="A Crawler instance with the first selected node" type="object">
        <type full="Symfony\Component\DomCrawler\Crawler" namespace="Symfony\Component\DomCrawler" name="Crawler"/>
      </return>
    </docblock>
  </method>
  <method name="last" start="412" end="415" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the last node of the current selection."/>
      <return description="A Crawler instance with the last selected node" type="object">
        <type full="Symfony\Component\DomCrawler\Crawler" namespace="Symfony\Component\DomCrawler" name="Crawler"/>
      </return>
    </docblock>
  </method>
  <method name="siblings" start="424" end="431" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the siblings nodes of the current selection."/>
      <return description="A Crawler instance with the sibling nodes" type="object">
        <type full="Symfony\Component\DomCrawler\Crawler" namespace="Symfony\Component\DomCrawler" name="Crawler"/>
      </return>
      <throws description="When current node is empty" type="object">
        <type full="\InvalidArgumentException" namespace="" name="InvalidArgumentException"/>
      </throws>
    </docblock>
  </method>
  <method name="nextAll" start="440" end="447" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the next siblings nodes of the current selection."/>
      <return description="A Crawler instance with the next sibling nodes" type="object">
        <type full="Symfony\Component\DomCrawler\Crawler" namespace="Symfony\Component\DomCrawler" name="Crawler"/>
      </return>
      <throws description="When current node is empty" type="object">
        <type full="\InvalidArgumentException" namespace="" name="InvalidArgumentException"/>
      </throws>
    </docblock>
  </method>
  <method name="previousAll" start="456" end="463" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the previous sibling nodes of the current selection."/>
      <return description="A Crawler instance with the previous sibling nodes" type="object">
        <type full="Symfony\Component\DomCrawler\Crawler" namespace="Symfony\Component\DomCrawler" name="Crawler"/>
      </return>
      <throws type="object">
        <type full="\InvalidArgumentException" namespace="" name="InvalidArgumentException"/>
      </throws>
    </docblock>
  </method>
  <method name="parents" start="472" end="488" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the parents nodes of the current selection."/>
      <return description="A Crawler instance with the parents nodes of the current selection" type="object">
        <type full="Symfony\Component\DomCrawler\Crawler" namespace="Symfony\Component\DomCrawler" name="Crawler"/>
      </return>
      <throws description="When current node is empty" type="object">
        <type full="\InvalidArgumentException" namespace="" name="InvalidArgumentException"/>
      </throws>
    </docblock>
  </method>
  <method name="children" start="497" end="506" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the children nodes of the current selection."/>
      <return description="A Crawler instance with the children nodes" type="object">
        <type full="Symfony\Component\DomCrawler\Crawler" namespace="Symfony\Component\DomCrawler" name="Crawler"/>
      </return>
      <throws description="When current node is empty" type="object">
        <type full="\InvalidArgumentException" namespace="" name="InvalidArgumentException"/>
      </throws>
    </docblock>
  </method>
  <method name="attr" start="517" end="526" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the attribute value of the first node of the list."/>
      <param description="The attribute name" type="string" variable="$attribute"/>
      <return description="The attribute value or null if the attribute does not exist" type="object">
        <type full="Symfony\Component\DomCrawler\string|null" namespace="Symfony\Component\DomCrawler" name="string|null"/>
      </return>
      <throws description="When current node is empty" type="object">
        <type full="\InvalidArgumentException" namespace="" name="InvalidArgumentException"/>
      </throws>
    </docblock>
    <parameter name="attribute" byreference="false" type="{unknown}"/>
  </method>
  <method name="nodeName" start="535" end="542" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the node name of the first node of the list."/>
      <return description="The node name" type="string"/>
      <throws description="When current node is empty" type="object">
        <type full="\InvalidArgumentException" namespace="" name="InvalidArgumentException"/>
      </throws>
    </docblock>
  </method>
  <method name="text" start="551" end="558" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the node value of the first node of the list."/>
      <return description="The node value" type="string"/>
      <throws description="When current node is empty" type="object">
        <type full="\InvalidArgumentException" namespace="" name="InvalidArgumentException"/>
      </throws>
    </docblock>
  </method>
  <method name="html" start="567" end="579" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the first node of the list as HTML."/>
      <return description="The node html" type="string"/>
      <throws description="When current node is empty" type="object">
        <type full="\InvalidArgumentException" namespace="" name="InvalidArgumentException"/>
      </throws>
    </docblock>
  </method>
  <method name="extract" start="594" end="614" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Extracts information from the list of nodes.">You can extract attributes or/and the node value (_text).

Example:

$crawler-&gt;filter('h1 a')-&gt;extract(array('_text', 'href'));</description>
      <param description="An array of attributes" type="array" variable="$attributes"/>
      <return description="An array of extracted values" type="array"/>
    </docblock>
    <parameter name="attributes" byreference="false" type="{unknown}"/>
  </method>
  <method name="filterXPath" start="628" end="638" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Filters the list of nodes with an XPath expression.">The XPath expression is evaluated in the context of the crawler, which
is considered as a fake parent of the elements inside it.
This means that a child selector "div" or "./div" will match only
the div elements of the current crawler, not their children.</description>
      <param description="An XPath expression" type="string" variable="$xpath"/>
      <return description="A new instance of Crawler with the filtered list of nodes" type="object">
        <type full="Symfony\Component\DomCrawler\Crawler" namespace="Symfony\Component\DomCrawler" name="Crawler"/>
      </return>
    </docblock>
    <parameter name="xpath" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="If we dropped all expressions in the XPath while preparing it, there would be no match" line="632"/>
    </inline>
  </method>
  <method name="filter" start="651" end="659" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Filters the list of nodes with a CSS selector.">This method only works if you have installed the CssSelector Symfony Component.</description>
      <param description="A CSS selector" type="string" variable="$selector"/>
      <return description="A new instance of Crawler with the filtered list of nodes" type="object">
        <type full="Symfony\Component\DomCrawler\Crawler" namespace="Symfony\Component\DomCrawler" name="Crawler"/>
      </return>
      <throws description="if the CssSelector Component is not available" type="object">
        <type full="\RuntimeException" namespace="" name="RuntimeException"/>
      </throws>
    </docblock>
    <parameter name="selector" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="The CssSelector already prefixes the selector with descendant-or-self::" line="657"/>
    </inline>
  </method>
  <method name="selectLink" start="668" end="674" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Selects links by name or alt value for clickable images."/>
      <param description="The link text" type="string" variable="$value"/>
      <return description="A new instance of Crawler with the filtered list of nodes" type="object">
        <type full="Symfony\Component\DomCrawler\Crawler" namespace="Symfony\Component\DomCrawler" name="Crawler"/>
      </return>
    </docblock>
    <parameter name="value" byreference="false" type="{unknown}"/>
  </method>
  <method name="selectButton" start="683" end="691" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Selects a button by name or alt value for images."/>
      <param description="The button text" type="string" variable="$value"/>
      <return description="A new instance of Crawler with the filtered list of nodes" type="object">
        <type full="Symfony\Component\DomCrawler\Crawler" namespace="Symfony\Component\DomCrawler" name="Crawler"/>
      </return>
    </docblock>
    <parameter name="value" byreference="false" type="{unknown}"/>
  </method>
  <method name="link" start="702" end="711" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns a Link object for the first node in the list."/>
      <param description="The method for the link (get by default)" type="string" variable="$method"/>
      <return description="A Link instance" type="object">
        <type full="Symfony\Component\DomCrawler\Link" namespace="Symfony\Component\DomCrawler" name="Link"/>
      </return>
      <throws description="If the current node list is empty" type="object">
        <type full="\InvalidArgumentException" namespace="" name="InvalidArgumentException"/>
      </throws>
    </docblock>
    <parameter name="method" byreference="false" type="string" default="'get'"/>
  </method>
  <method name="links" start="718" end="726" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns an array of Link objects for the nodes in the list."/>
      <return description="An array of Link instances" type="array" of="object">
        <type full="Symfony\Component\DomCrawler\Link" namespace="Symfony\Component\DomCrawler" name="Link"/>
      </return>
    </docblock>
  </method>
  <method name="form" start="738" end="751" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns a Form object for the first node in the list."/>
      <param description="An array of values for the form fields" type="array" variable="$values"/>
      <param description="The method for the form" type="string" variable="$method"/>
      <return description="A Form instance" type="object">
        <type full="Symfony\Component\DomCrawler\Form" namespace="Symfony\Component\DomCrawler" name="Form"/>
      </return>
      <throws description="If the current node list is empty" type="object">
        <type full="\InvalidArgumentException" namespace="" name="InvalidArgumentException"/>
      </throws>
    </docblock>
    <parameter name="values" byreference="false" type="{unknown}" default="" constant="null"/>
    <parameter name="method" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="setDefaultNamespacePrefix" start="758" end="761" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Overloads a default namespace prefix to be used with XPath and CSS expressions."/>
      <param type="string" variable="$prefix"/>
    </docblock>
    <parameter name="prefix" byreference="false" type="{unknown}"/>
  </method>
  <method name="registerNamespace" start="767" end="770" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <param type="string" variable="$prefix"/>
      <param type="string" variable="$namespace"/>
    </docblock>
    <parameter name="prefix" byreference="false" type="{unknown}"/>
    <parameter name="namespace" byreference="false" type="{unknown}"/>
  </method>
  <method name="xpathLiteral" start="793" end="817" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Converts string for XPath expressions.">Escaped characters are: quotes (") and apostrophe (').

 Examples:
 &lt;code&gt;
    echo Crawler::xpathLiteral('foo " bar');
    //prints 'foo " bar'

    echo Crawler::xpathLiteral("foo ' bar");
    //prints "foo ' bar"

    echo Crawler::xpathLiteral('a\'b"c');
    //prints concat('a', "'", 'b"c')
 &lt;/code&gt;</description>
      <param description="String to be escaped" type="string" variable="$s"/>
      <return description="Converted string" type="string"/>
    </docblock>
    <parameter name="s" byreference="false" type="{unknown}"/>
  </method>
  <method name="filterRelativeXPath" start="828" end="840" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Filters the list of nodes with an XPath expression.">The XPath expression should already be processed to apply it in the context of each node.</description>
      <param type="string" variable="$xpath"/>
      <return type="object">
        <type full="Symfony\Component\DomCrawler\Crawler" namespace="Symfony\Component\DomCrawler" name="Crawler"/>
      </return>
    </docblock>
    <parameter name="xpath" byreference="false" type="{unknown}"/>
  </method>
  <method name="relativize" start="852" end="910" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Make the XPath relative to the current context.">The returned XPath will match elements matching the XPath inside the current crawler
when running in the context of a node of the crawler.</description>
      <param type="string" variable="$xpath"/>
      <return type="string"/>
    </docblock>
    <parameter name="xpath" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="An expression which will never match to replace expressions which cannot match in the crawler" line="857"/>
      <comment value="We cannot simply drop" line="858"/>
      <comment value="Split any unions into individual expressions." line="861"/>
    </inline>
  </method>
  <method name="getNode" start="917" end="924" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <param type="int" variable="$position"/>
      <return type="object">
        <type full="\DOMElement|null" namespace="" name="DOMElement|null"/>
      </return>
    </docblock>
    <parameter name="position" byreference="false" type="{unknown}"/>
  </method>
  <method name="sibling" start="932" end="943" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description/>
      <param type="object" variable="$node">
        <type full="\DOMElement" namespace="" name="DOMElement"/>
      </param>
      <param type="string" variable="$siblingDir"/>
      <return type="array"/>
    </docblock>
    <parameter name="node" byreference="false" type="{unknown}"/>
    <parameter name="siblingDir" byreference="false" type="string" default="'nextSibling'"/>
  </method>
  <method name="createDOMXPath" start="953" end="965" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description/>
      <param type="object" variable="$document">
        <type full="\DOMDocument" namespace="" name="DOMDocument"/>
      </param>
      <param type="array" variable="$prefixes"/>
      <return type="object">
        <type full="\DOMXPath" namespace="" name="DOMXPath"/>
      </return>
      <throws type="object">
        <type full="\InvalidArgumentException" namespace="" name="InvalidArgumentException"/>
      </throws>
    </docblock>
    <parameter name="document" byreference="false" type="object">
      <type full="DOMDocument" namespace="" name="DOMDocument"/>
    </parameter>
    <parameter name="prefixes" byreference="false" type="array" default=""/>
  </method>
  <method name="discoverNamespace" start="975" end="987" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description/>
      <param type="object" variable="$domxpath">
        <type full="\DOMXPath" namespace="" name="DOMXPath"/>
      </param>
      <param type="string" variable="$prefix"/>
      <return type="string"/>
      <throws type="object">
        <type full="\InvalidArgumentException" namespace="" name="InvalidArgumentException"/>
      </throws>
    </docblock>
    <parameter name="domxpath" byreference="false" type="object">
      <type full="DOMXPath" namespace="" name="DOMXPath"/>
    </parameter>
    <parameter name="prefix" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="ask for one namespace, otherwise we'd get a collection with an item for each node" line="981"/>
    </inline>
  </method>
  <method name="findNamespacePrefixes" start="994" end="1001" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description/>
      <param type="string" variable="$xpath"/>
      <return type="array"/>
    </docblock>
    <parameter name="xpath" byreference="false" type="{unknown}"/>
  </method>
  <method name="createSubCrawler" start="1010" end="1015" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Creates a crawler for some subnodes."/>
      <param type="array" variable="$nodes" of="object">
        <type full="\DOMElement|\DOMElement[]|\DOMNodeList|nu" namespace="\DOMElement|\DOMElement[]|" name="DOMNodeList|nu"/>
      </param>
      <return resolution="static" type="object">
        <type full="Symfony\Component\DomCrawler\Crawler" namespace="Symfony\Component\DomCrawler" name="Crawler"/>
      </return>
    </docblock>
    <parameter name="nodes" byreference="false" type="{unknown}"/>
  </method>
</class>
