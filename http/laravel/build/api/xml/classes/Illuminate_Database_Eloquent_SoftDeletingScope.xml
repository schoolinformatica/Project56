<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="Illuminate\Database\Eloquent\SoftDeletingScope" namespace="Illuminate\Database\Eloquent" name="SoftDeletingScope" abstract="false" final="false" start="5" end="155">
  <file path="/home/robert/Desktop/Hogeschool/2ejaars Development/DevBOpdrachten/project56/http/laravel/vendor/laravel/framework/src/Illuminate/Database/Eloquent" file="SoftDeletingScope.php" realpath="/home/robert/Desktop/Hogeschool/2ejaars Development/DevBOpdrachten/project56/http/laravel/vendor/laravel/framework/src/Illuminate/Database/Eloquent/SoftDeletingScope.php" size="4341" time="2015-12-17T18:44:09+00:00" unixtime="1450377849" sha1="81d34e5f94cadf2a32a6666f5b579bd7134dde79" relative="vendor/laravel/framework/src/Illuminate/Database/Eloquent/SoftDeletingScope.php"/>
  <implements full="Illuminate\Database\Eloquent\ScopeInterface" namespace="Illuminate\Database\Eloquent" name="ScopeInterface"/>
  <member name="extensions" type="array" default="" visibility="protected" line="12">
    <docblock>
      <description compact="All of the extensions to be added to the builder."/>
      <var type="array"/>
    </docblock>
  </member>
  <method name="apply" start="21" end="26" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Apply the scope to a given Eloquent query builder."/>
      <param type="object" variable="$builder">
        <type full="\Illuminate\Database\Eloquent\Builder" namespace="\Illuminate\Database\Eloquent" name="Builder"/>
      </param>
      <param type="object" variable="$model">
        <type full="\Illuminate\Database\Eloquent\Model" namespace="\Illuminate\Database\Eloquent" name="Model"/>
      </param>
      <return type="object">
        <type full="Illuminate\Database\Eloquent\void" namespace="Illuminate\Database\Eloquent" name="void"/>
      </return>
    </docblock>
    <parameter name="builder" byreference="false" type="object">
      <type full="Illuminate\Database\Eloquent\Builder" namespace="Illuminate\Database\Eloquent" name="Builder"/>
    </parameter>
    <parameter name="model" byreference="false" type="object">
      <type full="Illuminate\Database\Eloquent\Model" namespace="Illuminate\Database\Eloquent" name="Model"/>
    </parameter>
  </method>
  <method name="remove" start="35" end="44" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Remove the scope from the given Eloquent query builder."/>
      <param type="object" variable="$builder">
        <type full="\Illuminate\Database\Eloquent\Builder" namespace="\Illuminate\Database\Eloquent" name="Builder"/>
      </param>
      <param type="object" variable="$model">
        <type full="\Illuminate\Database\Eloquent\Model" namespace="\Illuminate\Database\Eloquent" name="Model"/>
      </param>
      <return type="object">
        <type full="Illuminate\Database\Eloquent\void" namespace="Illuminate\Database\Eloquent" name="void"/>
      </return>
    </docblock>
    <parameter name="builder" byreference="false" type="object">
      <type full="Illuminate\Database\Eloquent\Builder" namespace="Illuminate\Database\Eloquent" name="Builder"/>
    </parameter>
    <parameter name="model" byreference="false" type="object">
      <type full="Illuminate\Database\Eloquent\Model" namespace="Illuminate\Database\Eloquent" name="Model"/>
    </parameter>
  </method>
  <method name="extend" start="52" end="65" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Extend the query builder with the needed functions."/>
      <param type="object" variable="$builder">
        <type full="\Illuminate\Database\Eloquent\Builder" namespace="\Illuminate\Database\Eloquent" name="Builder"/>
      </param>
      <return type="object">
        <type full="Illuminate\Database\Eloquent\void" namespace="Illuminate\Database\Eloquent" name="void"/>
      </return>
    </docblock>
    <parameter name="builder" byreference="false" type="object">
      <type full="Illuminate\Database\Eloquent\Builder" namespace="Illuminate\Database\Eloquent" name="Builder"/>
    </parameter>
  </method>
  <method name="getDeletedAtColumn" start="73" end="80" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Get the &quot;deleted at&quot; column for the builder."/>
      <param type="object" variable="$builder">
        <type full="\Illuminate\Database\Eloquent\Builder" namespace="\Illuminate\Database\Eloquent" name="Builder"/>
      </param>
      <return type="string"/>
    </docblock>
    <parameter name="builder" byreference="false" type="object">
      <type full="Illuminate\Database\Eloquent\Builder" namespace="Illuminate\Database\Eloquent" name="Builder"/>
    </parameter>
  </method>
  <method name="addForceDelete" start="88" end="93" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Add the force delete extension to the builder."/>
      <param type="object" variable="$builder">
        <type full="\Illuminate\Database\Eloquent\Builder" namespace="\Illuminate\Database\Eloquent" name="Builder"/>
      </param>
      <return type="object">
        <type full="Illuminate\Database\Eloquent\void" namespace="Illuminate\Database\Eloquent" name="void"/>
      </return>
    </docblock>
    <parameter name="builder" byreference="false" type="object">
      <type full="Illuminate\Database\Eloquent\Builder" namespace="Illuminate\Database\Eloquent" name="Builder"/>
    </parameter>
  </method>
  <method name="addRestore" start="101" end="108" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Add the restore extension to the builder."/>
      <param type="object" variable="$builder">
        <type full="\Illuminate\Database\Eloquent\Builder" namespace="\Illuminate\Database\Eloquent" name="Builder"/>
      </param>
      <return type="object">
        <type full="Illuminate\Database\Eloquent\void" namespace="Illuminate\Database\Eloquent" name="void"/>
      </return>
    </docblock>
    <parameter name="builder" byreference="false" type="object">
      <type full="Illuminate\Database\Eloquent\Builder" namespace="Illuminate\Database\Eloquent" name="Builder"/>
    </parameter>
  </method>
  <method name="addWithTrashed" start="116" end="123" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Add the with-trashed extension to the builder."/>
      <param type="object" variable="$builder">
        <type full="\Illuminate\Database\Eloquent\Builder" namespace="\Illuminate\Database\Eloquent" name="Builder"/>
      </param>
      <return type="object">
        <type full="Illuminate\Database\Eloquent\void" namespace="Illuminate\Database\Eloquent" name="void"/>
      </return>
    </docblock>
    <parameter name="builder" byreference="false" type="object">
      <type full="Illuminate\Database\Eloquent\Builder" namespace="Illuminate\Database\Eloquent" name="Builder"/>
    </parameter>
  </method>
  <method name="addOnlyTrashed" start="131" end="142" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Add the only-trashed extension to the builder."/>
      <param type="object" variable="$builder">
        <type full="\Illuminate\Database\Eloquent\Builder" namespace="\Illuminate\Database\Eloquent" name="Builder"/>
      </param>
      <return type="object">
        <type full="Illuminate\Database\Eloquent\void" namespace="Illuminate\Database\Eloquent" name="void"/>
      </return>
    </docblock>
    <parameter name="builder" byreference="false" type="object">
      <type full="Illuminate\Database\Eloquent\Builder" namespace="Illuminate\Database\Eloquent" name="Builder"/>
    </parameter>
  </method>
  <method name="isSoftDeleteConstraint" start="151" end="154" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Determine if the given where clause is a soft delete constraint."/>
      <param type="array" variable="$where"/>
      <param type="string" variable="$column"/>
      <return type="object">
        <type full="Illuminate\Database\Eloquent\bool" namespace="Illuminate\Database\Eloquent" name="bool"/>
      </return>
    </docblock>
    <parameter name="where" byreference="false" type="array"/>
    <parameter name="column" byreference="false" type="{unknown}"/>
  </method>
</class>
