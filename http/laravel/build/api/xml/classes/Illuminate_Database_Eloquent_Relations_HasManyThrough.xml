<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="Illuminate\Database\Eloquent\Relations\HasManyThrough" namespace="Illuminate\Database\Eloquent\Relations" name="HasManyThrough" abstract="false" final="false" start="11" end="408">
  <file path="/home/robert/Desktop/Hogeschool/2ejaars Development/DevBOpdrachten/project56/http/laravel/vendor/laravel/framework/src/Illuminate/Database/Eloquent/Relations" file="HasManyThrough.php" realpath="/home/robert/Desktop/Hogeschool/2ejaars Development/DevBOpdrachten/project56/http/laravel/vendor/laravel/framework/src/Illuminate/Database/Eloquent/Relations/HasManyThrough.php" size="11371" time="2015-12-17T18:44:09+00:00" unixtime="1450377849" sha1="b3e112320837a9bb6f610bc3380aa083729e9835" relative="vendor/laravel/framework/src/Illuminate/Database/Eloquent/Relations/HasManyThrough.php"/>
  <extends full="Illuminate\Database\Eloquent\Relations\Relation" namespace="Illuminate\Database\Eloquent\Relations" name="Relation"/>
  <member name="farParent" visibility="protected" line="18">
    <docblock>
      <description compact="The distance parent model instance."/>
      <var type="object">
        <type full="\Illuminate\Database\Eloquent\Model" namespace="\Illuminate\Database\Eloquent" name="Model"/>
      </var>
    </docblock>
  </member>
  <member name="firstKey" visibility="protected" line="25">
    <docblock>
      <description compact="The near key on the relationship."/>
      <var type="string"/>
    </docblock>
  </member>
  <member name="secondKey" visibility="protected" line="32">
    <docblock>
      <description compact="The far key on the relationship."/>
      <var type="string"/>
    </docblock>
  </member>
  <member name="localKey" visibility="protected" line="39">
    <docblock>
      <description compact="The local key on the relationship."/>
      <var type="string"/>
    </docblock>
  </member>
  <constructor name="__construct" start="52" end="60" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Create a new has many through relationship instance."/>
      <param type="object" variable="$query">
        <type full="\Illuminate\Database\Eloquent\Builder" namespace="\Illuminate\Database\Eloquent" name="Builder"/>
      </param>
      <param type="object" variable="$farParent">
        <type full="\Illuminate\Database\Eloquent\Model" namespace="\Illuminate\Database\Eloquent" name="Model"/>
      </param>
      <param type="object" variable="$parent">
        <type full="\Illuminate\Database\Eloquent\Model" namespace="\Illuminate\Database\Eloquent" name="Model"/>
      </param>
      <param type="string" variable="$firstKey"/>
      <param type="string" variable="$secondKey"/>
      <param type="string" variable="$localKey"/>
      <return type="object">
        <type full="Illuminate\Database\Eloquent\Relations\void" namespace="Illuminate\Database\Eloquent\Relations" name="void"/>
      </return>
    </docblock>
    <parameter name="query" byreference="false" type="object">
      <type full="Illuminate\Database\Eloquent\Builder" namespace="Illuminate\Database\Eloquent" name="Builder"/>
    </parameter>
    <parameter name="farParent" byreference="false" type="object">
      <type full="Illuminate\Database\Eloquent\Model" namespace="Illuminate\Database\Eloquent" name="Model"/>
    </parameter>
    <parameter name="parent" byreference="false" type="object">
      <type full="Illuminate\Database\Eloquent\Model" namespace="Illuminate\Database\Eloquent" name="Model"/>
    </parameter>
    <parameter name="firstKey" byreference="false" type="{unknown}"/>
    <parameter name="secondKey" byreference="false" type="{unknown}"/>
    <parameter name="localKey" byreference="false" type="{unknown}"/>
  </constructor>
  <method name="addConstraints" start="67" end="78" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Set the base constraints on the relation query."/>
      <return type="object">
        <type full="Illuminate\Database\Eloquent\Relations\void" namespace="Illuminate\Database\Eloquent\Relations" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="getRelationCountQuery" start="87" end="98" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Add the constraints for a relationship count query."/>
      <param type="object" variable="$query">
        <type full="\Illuminate\Database\Eloquent\Builder" namespace="\Illuminate\Database\Eloquent" name="Builder"/>
      </param>
      <param type="object" variable="$parent">
        <type full="\Illuminate\Database\Eloquent\Builder" namespace="\Illuminate\Database\Eloquent" name="Builder"/>
      </param>
      <return type="object">
        <type full="\Illuminate\Database\Eloquent\Builder" namespace="\Illuminate\Database\Eloquent" name="Builder"/>
      </return>
    </docblock>
    <parameter name="query" byreference="false" type="object">
      <type full="Illuminate\Database\Eloquent\Builder" namespace="Illuminate\Database\Eloquent" name="Builder"/>
    </parameter>
    <parameter name="parent" byreference="false" type="object">
      <type full="Illuminate\Database\Eloquent\Builder" namespace="Illuminate\Database\Eloquent" name="Builder"/>
    </parameter>
  </method>
  <method name="setJoin" start="106" end="117" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Set the join clause on the query."/>
      <param type="object" variable="$query">
        <type full="\Illuminate\Database\Eloquent\Builder|null" namespace="\Illuminate\Database\Eloquent" name="Builder|null"/>
      </param>
      <return type="object">
        <type full="Illuminate\Database\Eloquent\Relations\void" namespace="Illuminate\Database\Eloquent\Relations" name="void"/>
      </return>
    </docblock>
    <parameter name="query" byreference="false" type="{unknown}" default="" constant="null">
      <type full="Illuminate\Database\Eloquent\Builder" namespace="Illuminate\Database\Eloquent" name="Builder"/>
    </parameter>
  </method>
  <method name="parentSoftDeletes" start="124" end="127" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Determine whether close parent of the relation uses Soft Deletes."/>
      <return type="object">
        <type full="Illuminate\Database\Eloquent\Relations\bool" namespace="Illuminate\Database\Eloquent\Relations" name="bool"/>
      </return>
    </docblock>
  </method>
  <method name="addEagerConstraints" start="135" end="140" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Set the constraints for an eager load of the relation."/>
      <param type="array" variable="$models"/>
      <return type="object">
        <type full="Illuminate\Database\Eloquent\Relations\void" namespace="Illuminate\Database\Eloquent\Relations" name="void"/>
      </return>
    </docblock>
    <parameter name="models" byreference="false" type="array"/>
  </method>
  <method name="initRelation" start="149" end="156" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Initialize the relation on a set of models."/>
      <param type="array" variable="$models"/>
      <param type="string" variable="$relation"/>
      <return type="array"/>
    </docblock>
    <parameter name="models" byreference="false" type="array"/>
    <parameter name="relation" byreference="false" type="{unknown}"/>
  </method>
  <method name="match" start="166" end="184" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Match the eagerly loaded results to their parents."/>
      <param type="array" variable="$models"/>
      <param type="object" variable="$results">
        <type full="\Illuminate\Database\Eloquent\Collection" namespace="\Illuminate\Database\Eloquent" name="Collection"/>
      </param>
      <param type="string" variable="$relation"/>
      <return type="array"/>
    </docblock>
    <parameter name="models" byreference="false" type="array"/>
    <parameter name="results" byreference="false" type="object">
      <type full="Illuminate\Database\Eloquent\Collection" namespace="Illuminate\Database\Eloquent" name="Collection"/>
    </parameter>
    <parameter name="relation" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="Once we have the dictionary we can simply spin through the parent models to" line="170"/>
      <comment value="link them up with their children using the keyed dictionary to make the" line="171"/>
      <comment value="matching very convenient and easy work. Then we'll just return them." line="172"/>
    </inline>
  </method>
  <method name="buildDictionary" start="192" end="206" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Build model dictionary keyed by the relation's foreign key."/>
      <param type="object" variable="$results">
        <type full="\Illuminate\Database\Eloquent\Collection" namespace="\Illuminate\Database\Eloquent" name="Collection"/>
      </param>
      <return type="array"/>
    </docblock>
    <parameter name="results" byreference="false" type="object">
      <type full="Illuminate\Database\Eloquent\Collection" namespace="Illuminate\Database\Eloquent" name="Collection"/>
    </parameter>
    <inline>
      <comment value="First we will create a dictionary of models keyed by the foreign key of the" line="198"/>
      <comment value="relationship as this will allow us to quickly access all of the related" line="199"/>
      <comment value="models without having to do nested looping which will be quite slow." line="200"/>
    </inline>
  </method>
  <method name="getResults" start="213" end="216" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get the results of the relationship."/>
      <return type="mixed"/>
    </docblock>
  </method>
  <method name="first" start="224" end="229" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Execute the query and get the first related model."/>
      <param type="array" variable="$columns"/>
      <return type="mixed"/>
    </docblock>
    <parameter name="columns" byreference="false" type="array" default=""/>
  </method>
  <method name="firstOrFail" start="239" end="246" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Execute the query and get the first result or throw an exception."/>
      <param type="array" variable="$columns"/>
      <return type="object">
        <type full="\Illuminate\Database\Eloquent\Model|static" namespace="\Illuminate\Database\Eloquent" name="Model|static"/>
      </return>
      <throws type="object">
        <type full="\Illuminate\Database\Eloquent\ModelNotFoundException" namespace="\Illuminate\Database\Eloquent" name="ModelNotFoundException"/>
      </throws>
    </docblock>
    <parameter name="columns" byreference="false" type="array" default=""/>
  </method>
  <method name="find" start="255" end="264" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Find a related model by its primary key."/>
      <param type="mixed" variable="$id"/>
      <param type="array" variable="$columns"/>
      <return type="object">
        <type full="\Illuminate\Database\Eloquent\Model|\Illuminate\Database\Eloquent\Collection|null" namespace="\Illuminate\Database\Eloquent\Model|\Illuminate\Database\Eloquent" name="Collection|null"/>
      </return>
    </docblock>
    <parameter name="id" byreference="false" type="{unknown}"/>
    <parameter name="columns" byreference="false" type="array" default=""/>
  </method>
  <method name="findMany" start="273" end="282" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Find multiple related models by their primary keys."/>
      <param type="mixed" variable="$ids"/>
      <param type="array" variable="$columns"/>
      <return type="object">
        <type full="\Illuminate\Database\Eloquent\Collection" namespace="\Illuminate\Database\Eloquent" name="Collection"/>
      </return>
    </docblock>
    <parameter name="ids" byreference="false" type="{unknown}"/>
    <parameter name="columns" byreference="false" type="array" default=""/>
  </method>
  <method name="findOrFail" start="293" end="306" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Find a related model by its primary key or throw an exception."/>
      <param type="mixed" variable="$id"/>
      <param type="array" variable="$columns"/>
      <return type="object">
        <type full="\Illuminate\Database\Eloquent\Model|\Illuminate\Database\Eloquent\Collection" namespace="\Illuminate\Database\Eloquent\Model|\Illuminate\Database\Eloquent" name="Collection"/>
      </return>
      <throws type="object">
        <type full="\Illuminate\Database\Eloquent\ModelNotFoundException" namespace="\Illuminate\Database\Eloquent" name="ModelNotFoundException"/>
      </throws>
    </docblock>
    <parameter name="id" byreference="false" type="{unknown}"/>
    <parameter name="columns" byreference="false" type="array" default=""/>
  </method>
  <method name="get" start="314" end="333" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Execute the query as a &quot;select&quot; statement."/>
      <param type="array" variable="$columns"/>
      <return type="object">
        <type full="\Illuminate\Database\Eloquent\Collection" namespace="\Illuminate\Database\Eloquent" name="Collection"/>
      </return>
    </docblock>
    <parameter name="columns" byreference="false" type="array" default=""/>
    <inline>
      <comment value="First we'll add the proper select columns onto the query so it is run with" line="316"/>
      <comment value="the proper columns. Then, we will get the results and hydrate out pivot" line="317"/>
      <comment value="models with the result of those columns as a separate model relation." line="318"/>
      <comment value="If we actually found models we will also eager load any relationships that" line="325"/>
      <comment value="have been specified as needing to be eager loaded. This will solve the" line="326"/>
      <comment value="n + 1 query problem for the developer and also increase performance." line="327"/>
    </inline>
  </method>
  <method name="getSelectColumns" start="341" end="348" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Set the select clause for the relation query."/>
      <param type="array" variable="$columns"/>
      <return type="array"/>
    </docblock>
    <parameter name="columns" byreference="false" type="array" default=""/>
  </method>
  <method name="paginate" start="358" end="363" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get a paginator for the &quot;select&quot; statement."/>
      <param type="int" variable="$perPage"/>
      <param type="array" variable="$columns"/>
      <param type="string" variable="$pageName"/>
      <return type="object">
        <type full="\Illuminate\Contracts\Pagination\LengthAwarePaginator" namespace="\Illuminate\Contracts\Pagination" name="LengthAwarePaginator"/>
      </return>
    </docblock>
    <parameter name="perPage" byreference="false" type="{unknown}" default="" constant="null"/>
    <parameter name="columns" byreference="false" type="array" default=""/>
    <parameter name="pageName" byreference="false" type="string" default="'page'"/>
  </method>
  <method name="simplePaginate" start="372" end="377" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Paginate the given query into a simple paginator."/>
      <param type="int" variable="$perPage"/>
      <param type="array" variable="$columns"/>
      <return type="object">
        <type full="\Illuminate\Contracts\Pagination\Paginator" namespace="\Illuminate\Contracts\Pagination" name="Paginator"/>
      </return>
    </docblock>
    <parameter name="perPage" byreference="false" type="{unknown}" default="" constant="null"/>
    <parameter name="columns" byreference="false" type="array" default=""/>
  </method>
  <method name="getHasCompareKey" start="384" end="387" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get the key for comparing against the parent key in &quot;has&quot; query."/>
      <return type="string"/>
    </docblock>
  </method>
  <method name="getForeignKey" start="394" end="397" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get the qualified foreign key on the related model."/>
      <return type="string"/>
    </docblock>
  </method>
  <method name="getThroughKey" start="404" end="407" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get the qualified foreign key on the &quot;through&quot; model."/>
      <return type="string"/>
    </docblock>
  </method>
</class>
