<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="Illuminate\Database\Query\JoinClause" namespace="Illuminate\Database\Query" name="JoinClause" abstract="false" final="false" start="8" end="253">
  <file path="/home/robert/Desktop/Hogeschool/2ejaars Development/DevBOpdrachten/project56/http/laravel/vendor/laravel/framework/src/Illuminate/Database/Query" file="JoinClause.php" realpath="/home/robert/Desktop/Hogeschool/2ejaars Development/DevBOpdrachten/project56/http/laravel/vendor/laravel/framework/src/Illuminate/Database/Query/JoinClause.php" size="6451" time="2015-12-17T18:44:09+00:00" unixtime="1450377849" sha1="f46d4760b2ffd524119361eb0cfe73b1fac2eafe" relative="vendor/laravel/framework/src/Illuminate/Database/Query/JoinClause.php"/>
  <member name="type" visibility="public" line="15">
    <docblock>
      <description compact="The type of join being performed."/>
      <var type="string"/>
    </docblock>
  </member>
  <member name="table" visibility="public" line="22">
    <docblock>
      <description compact="The table the join clause is joining to."/>
      <var type="string"/>
    </docblock>
  </member>
  <member name="clauses" type="array" default="" visibility="public" line="29">
    <docblock>
      <description compact="The &quot;on&quot; clauses for the join."/>
      <var type="array"/>
    </docblock>
  </member>
  <member name="bindings" type="array" default="" visibility="public" line="36">
    <docblock>
      <description compact="The &quot;on&quot; bindings for the join."/>
      <var type="array"/>
    </docblock>
  </member>
  <constructor name="__construct" start="45" end="49" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Create a new join clause instance."/>
      <param type="string" variable="$type"/>
      <param type="string" variable="$table"/>
      <return type="object">
        <type full="Illuminate\Database\Query\void" namespace="Illuminate\Database\Query" name="void"/>
      </return>
    </docblock>
    <parameter name="type" byreference="false" type="{unknown}"/>
    <parameter name="table" byreference="false" type="{unknown}"/>
  </constructor>
  <method name="on" start="72" end="95" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Add an &quot;on&quot; clause to the join.">On clauses can be chained, e.g.

 $join-&gt;on('contacts.user_id', '=', 'users.id')
      -&gt;on('contacts.info_id', '=', 'info.id')

will produce the following SQL:

on `contacts`.`user_id` = `users`.`id`  and `contacts`.`info_id` = `info`.`id`</description>
      <param type="object" variable="$first">
        <type full="Illuminate\Database\Query\string|\Closure" namespace="Illuminate\Database\Query\string|" name="Closure"/>
      </param>
      <param type="object" variable="$operator">
        <type full="Illuminate\Database\Query\string|null" namespace="Illuminate\Database\Query" name="string|null"/>
      </param>
      <param type="object" variable="$second">
        <type full="Illuminate\Database\Query\string|null" namespace="Illuminate\Database\Query" name="string|null"/>
      </param>
      <param type="string" variable="$boolean"/>
      <param type="object" variable="$where">
        <type full="Illuminate\Database\Query\bool" namespace="Illuminate\Database\Query" name="bool"/>
      </param>
      <return type="object">
        <type full="Illuminate\Database\Query\$this" namespace="Illuminate\Database\Query" name="$this"/>
      </return>
      <throws type="object">
        <type full="\InvalidArgumentException" namespace="" name="InvalidArgumentException"/>
      </throws>
    </docblock>
    <parameter name="first" byreference="false" type="{unknown}"/>
    <parameter name="operator" byreference="false" type="{unknown}" default="" constant="null"/>
    <parameter name="second" byreference="false" type="{unknown}" default="" constant="null"/>
    <parameter name="boolean" byreference="false" type="string" default="'and'"/>
    <parameter name="where" byreference="false" type="boolean" default="false"/>
  </method>
  <method name="orOn" start="105" end="108" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Add an &quot;or on&quot; clause to the join."/>
      <param type="object" variable="$first">
        <type full="Illuminate\Database\Query\string|\Closure" namespace="Illuminate\Database\Query\string|" name="Closure"/>
      </param>
      <param type="object" variable="$operator">
        <type full="Illuminate\Database\Query\string|null" namespace="Illuminate\Database\Query" name="string|null"/>
      </param>
      <param type="object" variable="$second">
        <type full="Illuminate\Database\Query\string|null" namespace="Illuminate\Database\Query" name="string|null"/>
      </param>
      <return type="object">
        <type full="\Illuminate\Database\Query\JoinClause" namespace="\Illuminate\Database\Query" name="JoinClause"/>
      </return>
    </docblock>
    <parameter name="first" byreference="false" type="{unknown}"/>
    <parameter name="operator" byreference="false" type="{unknown}" default="" constant="null"/>
    <parameter name="second" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="where" start="119" end="122" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Add an &quot;on where&quot; clause to the join."/>
      <param type="object" variable="$first">
        <type full="Illuminate\Database\Query\string|\Closure" namespace="Illuminate\Database\Query\string|" name="Closure"/>
      </param>
      <param type="object" variable="$operator">
        <type full="Illuminate\Database\Query\string|null" namespace="Illuminate\Database\Query" name="string|null"/>
      </param>
      <param type="object" variable="$second">
        <type full="Illuminate\Database\Query\string|null" namespace="Illuminate\Database\Query" name="string|null"/>
      </param>
      <param type="string" variable="$boolean"/>
      <return type="object">
        <type full="\Illuminate\Database\Query\JoinClause" namespace="\Illuminate\Database\Query" name="JoinClause"/>
      </return>
    </docblock>
    <parameter name="first" byreference="false" type="{unknown}"/>
    <parameter name="operator" byreference="false" type="{unknown}" default="" constant="null"/>
    <parameter name="second" byreference="false" type="{unknown}" default="" constant="null"/>
    <parameter name="boolean" byreference="false" type="string" default="'and'"/>
  </method>
  <method name="orWhere" start="132" end="135" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Add an &quot;or on where&quot; clause to the join."/>
      <param type="object" variable="$first">
        <type full="Illuminate\Database\Query\string|\Closure" namespace="Illuminate\Database\Query\string|" name="Closure"/>
      </param>
      <param type="object" variable="$operator">
        <type full="Illuminate\Database\Query\string|null" namespace="Illuminate\Database\Query" name="string|null"/>
      </param>
      <param type="object" variable="$second">
        <type full="Illuminate\Database\Query\string|null" namespace="Illuminate\Database\Query" name="string|null"/>
      </param>
      <return type="object">
        <type full="\Illuminate\Database\Query\JoinClause" namespace="\Illuminate\Database\Query" name="JoinClause"/>
      </return>
    </docblock>
    <parameter name="first" byreference="false" type="{unknown}"/>
    <parameter name="operator" byreference="false" type="{unknown}" default="" constant="null"/>
    <parameter name="second" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="whereNull" start="144" end="147" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Add an &quot;on where is null&quot; clause to the join."/>
      <param type="string" variable="$column"/>
      <param type="string" variable="$boolean"/>
      <return type="object">
        <type full="\Illuminate\Database\Query\JoinClause" namespace="\Illuminate\Database\Query" name="JoinClause"/>
      </return>
    </docblock>
    <parameter name="column" byreference="false" type="{unknown}"/>
    <parameter name="boolean" byreference="false" type="string" default="'and'"/>
  </method>
  <method name="orWhereNull" start="155" end="158" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Add an &quot;or on where is null&quot; clause to the join."/>
      <param type="string" variable="$column"/>
      <return type="object">
        <type full="\Illuminate\Database\Query\JoinClause" namespace="\Illuminate\Database\Query" name="JoinClause"/>
      </return>
    </docblock>
    <parameter name="column" byreference="false" type="{unknown}"/>
  </method>
  <method name="whereNotNull" start="167" end="170" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Add an &quot;on where is not null&quot; clause to the join."/>
      <param type="string" variable="$column"/>
      <param type="string" variable="$boolean"/>
      <return type="object">
        <type full="\Illuminate\Database\Query\JoinClause" namespace="\Illuminate\Database\Query" name="JoinClause"/>
      </return>
    </docblock>
    <parameter name="column" byreference="false" type="{unknown}"/>
    <parameter name="boolean" byreference="false" type="string" default="'and'"/>
  </method>
  <method name="orWhereNotNull" start="178" end="181" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Add an &quot;or on where is not null&quot; clause to the join."/>
      <param type="string" variable="$column"/>
      <return type="object">
        <type full="\Illuminate\Database\Query\JoinClause" namespace="\Illuminate\Database\Query" name="JoinClause"/>
      </return>
    </docblock>
    <parameter name="column" byreference="false" type="{unknown}"/>
  </method>
  <method name="whereIn" start="190" end="193" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Add an &quot;on where in (...)&quot; clause to the join."/>
      <param type="string" variable="$column"/>
      <param type="array" variable="$values"/>
      <return type="object">
        <type full="\Illuminate\Database\Query\JoinClause" namespace="\Illuminate\Database\Query" name="JoinClause"/>
      </return>
    </docblock>
    <parameter name="column" byreference="false" type="{unknown}"/>
    <parameter name="values" byreference="false" type="array"/>
  </method>
  <method name="whereNotIn" start="202" end="205" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Add an &quot;on where not in (...)&quot; clause to the join."/>
      <param type="string" variable="$column"/>
      <param type="array" variable="$values"/>
      <return type="object">
        <type full="\Illuminate\Database\Query\JoinClause" namespace="\Illuminate\Database\Query" name="JoinClause"/>
      </return>
    </docblock>
    <parameter name="column" byreference="false" type="{unknown}"/>
    <parameter name="values" byreference="false" type="array"/>
  </method>
  <method name="orWhereIn" start="214" end="217" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Add an &quot;or on where in (...)&quot; clause to the join."/>
      <param type="string" variable="$column"/>
      <param type="array" variable="$values"/>
      <return type="object">
        <type full="\Illuminate\Database\Query\JoinClause" namespace="\Illuminate\Database\Query" name="JoinClause"/>
      </return>
    </docblock>
    <parameter name="column" byreference="false" type="{unknown}"/>
    <parameter name="values" byreference="false" type="array"/>
  </method>
  <method name="orWhereNotIn" start="226" end="229" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Add an &quot;or on where not in (...)&quot; clause to the join."/>
      <param type="string" variable="$column"/>
      <param type="array" variable="$values"/>
      <return type="object">
        <type full="\Illuminate\Database\Query\JoinClause" namespace="\Illuminate\Database\Query" name="JoinClause"/>
      </return>
    </docblock>
    <parameter name="column" byreference="false" type="{unknown}"/>
    <parameter name="values" byreference="false" type="array"/>
  </method>
  <method name="nest" start="238" end="252" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Add a nested where statement to the query."/>
      <param type="object" variable="$callback">
        <type full="\Closure" namespace="" name="Closure"/>
      </param>
      <param type="string" variable="$boolean"/>
      <return type="object">
        <type full="\Illuminate\Database\Query\JoinClause" namespace="\Illuminate\Database\Query" name="JoinClause"/>
      </return>
    </docblock>
    <parameter name="callback" byreference="false" type="object">
      <type full="Closure" namespace="" name="Closure"/>
    </parameter>
    <parameter name="boolean" byreference="false" type="string" default="'and'"/>
  </method>
</class>
