<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="Framework_MockObject_GeneratorTest" namespace="" name="Framework_MockObject_GeneratorTest" abstract="false" final="false" start="2" end="200">
  <file path="/home/robert/Desktop/Hogeschool/2ejaars Development/DevBOpdrachten/project56/http/laravel/vendor/phpunit/phpunit-mock-objects/tests" file="GeneratorTest.php" realpath="/home/robert/Desktop/Hogeschool/2ejaars Development/DevBOpdrachten/project56/http/laravel/vendor/phpunit/phpunit-mock-objects/tests/GeneratorTest.php" size="6756" time="2015-12-17T18:44:10+00:00" unixtime="1450377850" sha1="8cb8e5808eba4616d95f10d70f1c62948ec0979a" relative="vendor/phpunit/phpunit-mock-objects/tests/GeneratorTest.php"/>
  <extends full="PHPUnit_Framework_TestCase" namespace="" name="PHPUnit_Framework_TestCase"/>
  <member name="generator" visibility="protected" line="7">
    <docblock>
      <description/>
      <var type="object">
        <type full="PHPUnit_Framework_MockObject_Generator" namespace="" name="PHPUnit_Framework_MockObject_Generator"/>
      </var>
    </docblock>
  </member>
  <method name="setUp" start="9" end="12" abstract="false" final="false" static="false" visibility="protected"/>
  <method name="testGetMockFailsWhenInvalidFunctionNameIsPassedInAsAFunctionToMock" start="18" end="21" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <covers value="PHPUnit_Framework_MockObject_Generator::getMock"/>
      <expectedexception value="PHPUnit_Framework_Exception"/>
    </docblock>
  </method>
  <method name="testGetMockCanCreateNonExistingFunctions" start="26" end="30" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <covers value="PHPUnit_Framework_MockObject_Generator::getMock"/>
    </docblock>
  </method>
  <method name="testGetMockGeneratorFails" start="37" end="40" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <covers value="PHPUnit_Framework_MockObject_Generator::getMock"/>
      <expectedexception value="PHPUnit_Framework_MockObject_RuntimeException"/>
      <expectedexceptionmessage value="duplicates: &quot;foo, foo&quot;"/>
    </docblock>
  </method>
  <method name="testGetMockForAbstractClassDoesNotFailWhenFakingInterfaces" start="45" end="49" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <covers value="PHPUnit_Framework_MockObject_Generator::getMockForAbstractClass"/>
    </docblock>
  </method>
  <method name="testGetMockForAbstractClassStubbingAbstractClass" start="54" end="58" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <covers value="PHPUnit_Framework_MockObject_Generator::getMockForAbstractClass"/>
    </docblock>
  </method>
  <method name="testGetMockForAbstractClassWithNonExistentMethods" start="63" end="77" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <covers value="PHPUnit_Framework_MockObject_Generator::getMockForAbstractClass"/>
    </docblock>
  </method>
  <method name="testGetMockForAbstractClassShouldCreateStubsOnlyForAbstractMethodWhenNoMethodsWereInformed" start="82" end="92" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <covers value="PHPUnit_Framework_MockObject_Generator::getMockForAbstractClass"/>
    </docblock>
  </method>
  <method name="testGetMockForAbstractClassExpectingInvalidArgumentException" start="99" end="102" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <dataprovider value="getMockForAbstractClassExpectsInvalidArgumentExceptionDataprovider"/>
      <covers value="PHPUnit_Framework_MockObject_Generator::getMockForAbstractClass"/>
      <expectedexception value="PHPUnit_Framework_Exception"/>
    </docblock>
    <parameter name="className" byreference="false" type="{unknown}"/>
    <parameter name="mockClassName" byreference="false" type="{unknown}"/>
  </method>
  <method name="testGetMockForAbstractClassAbstractClassDoesNotExist" start="108" end="111" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <covers value="PHPUnit_Framework_MockObject_Generator::getMockForAbstractClass"/>
      <expectedexception value="PHPUnit_Framework_MockObject_RuntimeException"/>
    </docblock>
  </method>
  <method name="getMockForAbstractClassExpectsInvalidArgumentExceptionDataprovider" start="116" end="122" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Dataprovider for test &quot;testGetMockForAbstractClassExpectingInvalidArgumentException&quot;"/>
    </docblock>
  </method>
  <method name="testGetMockForTraitWithNonExistentMethodsAndNonAbstractMethods" start="128" end="144" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <covers value="PHPUnit_Framework_MockObject_Generator::getMockForTrait"/>
      <requires value="PHP 5.4.0"/>
    </docblock>
  </method>
  <method name="testGetMockForTraitStubbingAbstractMethod" start="150" end="154" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <covers value="PHPUnit_Framework_MockObject_Generator::getMockForTrait"/>
      <requires value="PHP 5.4.0"/>
    </docblock>
  </method>
  <method name="testGetMockForSingletonWithReflectionSuccess" start="159" end="166" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <requires value="PHP 5.4.0"/>
    </docblock>
    <inline>
      <comment value="Probably, this should be moved to tests/autoload.php" line="161"/>
    </inline>
  </method>
  <method name="testGetMockForSingletonWithUnserializeFail" start="173" end="185" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Same as &quot;testGetMockForSingletonWithReflectionSuccess&quot;, but we expect warning for PHP &lt; 5.4.0 since PHPUnit will try to execute private __wakeup on unserialize"/>
    </docblock>
    <inline>
      <comment value="Probably, this should be moved to tests/autoload.php" line="181"/>
    </inline>
  </method>
  <method name="testGetMockForSoapClientReflectionMethodsDuplication" start="191" end="199" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="ReflectionClass::getMethods for SoapClient on PHP 5.3 produces PHP Fatal Error"/>
      <runinseparateprocess/>
    </docblock>
  </method>
</class>
