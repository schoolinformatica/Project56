<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="Stringy\Stringy" namespace="Stringy" name="Stringy" abstract="false" final="false" start="5" end="1558">
  <file path="/home/robert/Desktop/Hogeschool/2ejaars Development/DevBOpdrachten/project56/http/laravel/vendor/danielstjules/stringy/src" file="Stringy.php" realpath="/home/robert/Desktop/Hogeschool/2ejaars Development/DevBOpdrachten/project56/http/laravel/vendor/danielstjules/stringy/src/Stringy.php" size="54730" time="2015-12-17T18:44:09+00:00" unixtime="1450377849" sha1="0a207fa53bcec53fc8b149eb2f46471a1e5625fd" relative="vendor/danielstjules/stringy/src/Stringy.php"/>
  <implements full="Countable" namespace="" name="Countable"/>
  <implements full="IteratorAggregate" namespace="" name="IteratorAggregate"/>
  <implements full="ArrayAccess" namespace="" name="ArrayAccess"/>
  <member name="str" visibility="protected" line="12">
    <docblock>
      <description compact="An instance's string."/>
      <var type="string"/>
    </docblock>
  </member>
  <member name="encoding" visibility="protected" line="20">
    <docblock>
      <description compact="The string's encoding, which should be one of the mbstring module's supported encodings."/>
      <var type="string"/>
    </docblock>
  </member>
  <constructor name="__construct" start="34" end="48" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Initializes a Stringy object and assigns both str and encoding properties the supplied values. $str is cast to a string prior to assignment, and if $encoding is not specified, it defaults to mb_internal_encoding(). Throws an InvalidArgumentException if the first argument is an array or object without a __toString method."/>
      <param description="Value to modify, after being cast to string" type="mixed" variable="$str"/>
      <param description="The character encoding" type="string" variable="$encoding"/>
      <throws description="if an array or object without a" type="object">__toString method is passed as the first argument<type full="\InvalidArgumentException" namespace="" name="InvalidArgumentException"/></throws>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="encoding" byreference="false" type="{unknown}" default="" constant="null"/>
  </constructor>
  <method name="create" start="63" end="66" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Creates a Stringy object and assigns both str and encoding properties the supplied values. $str is cast to a string prior to assignment, and if $encoding is not specified, it defaults to mb_internal_encoding(). It then returns the initialized object. Throws an InvalidArgumentException if the first argument is an array or object without a __toString method."/>
      <param description="Value to modify, after being cast to string" type="mixed" variable="$str"/>
      <param description="The character encoding" type="string" variable="$encoding"/>
      <return description="A Stringy object" type="object">
        <type full="Stringy\Stringy" namespace="Stringy" name="Stringy"/>
      </return>
      <throws description="if an array or object without a" type="object">__toString method is passed as the first argument<type full="\InvalidArgumentException" namespace="" name="InvalidArgumentException"/></throws>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="encoding" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="__toString" start="73" end="76" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the value in $str."/>
      <return description="The current value of the $str property" type="string"/>
    </docblock>
  </method>
  <method name="getEncoding" start="83" end="86" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the encoding used by the Stringy object."/>
      <return description="The current value of the $encoding property" type="string"/>
    </docblock>
  </method>
  <method name="count" start="93" end="96" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the length of the string, implementing the countable interface."/>
      <return description="The number of characters in the string, given the encoding" type="int"/>
    </docblock>
  </method>
  <method name="getIterator" start="106" end="109" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns a new ArrayIterator, thus implementing the IteratorAggregate interface. The ArrayIterator's constructor is passed an array of chars in the multibyte string. This enables the use of foreach with instances of Stringy\Stringy."/>
      <return description="An iterator for the characters in the string" type="object">
        <type full="\ArrayIterator" namespace="" name="ArrayIterator"/>
      </return>
    </docblock>
  </method>
  <method name="offsetExists" start="119" end="129" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns whether or not a character exists at an index. Offsets may be negative to count from the last character in the string. Implements part of the ArrayAccess interface."/>
      <param description="The index to check" type="mixed" variable="$offset"/>
      <return description="Whether or not the index exists" type="boolean"/>
    </docblock>
    <parameter name="offset" byreference="false" type="{unknown}"/>
  </method>
  <method name="offsetGet" start="142" end="152" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the character at the given index. Offsets may be negative to count from the last character in the string. Implements part of the ArrayAccess interface, and throws an OutOfBoundsException if the index does not exist."/>
      <param description="The index from which to retrieve the char" type="mixed" variable="$offset"/>
      <return description="The character at the specified index" type="mixed"/>
      <throws description="If the positive or negative offset does" type="object">not exist<type full="\OutOfBoundsException" namespace="" name="OutOfBoundsException"/></throws>
    </docblock>
    <parameter name="offset" byreference="false" type="{unknown}"/>
  </method>
  <method name="offsetSet" start="162" end="166" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Implements part of the ArrayAccess interface, but throws an exception when called. This maintains the immutability of Stringy objects."/>
      <param description="The index of the character" type="mixed" variable="$offset"/>
      <param description="Value to set" type="mixed" variable="$value"/>
      <throws description="When called" type="object">
        <type full="\Exception" namespace="" name="Exception"/>
      </throws>
    </docblock>
    <parameter name="offset" byreference="false" type="{unknown}"/>
    <parameter name="value" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="Stringy is immutable, cannot directly set char" line="164"/>
    </inline>
  </method>
  <method name="offsetUnset" start="175" end="179" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Implements part of the ArrayAccess interface, but throws an exception when called. This maintains the immutability of Stringy objects."/>
      <param description="The index of the character" type="mixed" variable="$offset"/>
      <throws description="When called" type="object">
        <type full="\Exception" namespace="" name="Exception"/>
      </throws>
    </docblock>
    <parameter name="offset" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="Don't allow directly modifying the string" line="177"/>
    </inline>
  </method>
  <method name="chars" start="186" end="194" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns an array consisting of the characters in the string."/>
      <return description="An array of string chars" type="array"/>
    </docblock>
  </method>
  <method name="upperCaseFirst" start="201" end="210" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Converts the first character of the supplied string to upper case."/>
      <return description="Object with the first character of $str being upper case" type="object">
        <type full="Stringy\Stringy" namespace="Stringy" name="Stringy"/>
      </return>
    </docblock>
  </method>
  <method name="lowerCaseFirst" start="217" end="226" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Converts the first character of the string to lower case."/>
      <return description="Object with the first character of $str being lower case" type="object">
        <type full="Stringy\Stringy" namespace="Stringy" name="Stringy"/>
      </return>
    </docblock>
  </method>
  <method name="camelize" start="235" end="257" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns a camelCase version of the string. Trims surrounding spaces, capitalizes letters following digits, spaces, dashes and underscores, and removes spaces, dashes, as well as underscores."/>
      <return description="Object with $str in camelCase" type="object">
        <type full="Stringy\Stringy" namespace="Stringy" name="Stringy"/>
      </return>
    </docblock>
  </method>
  <method name="upperCamelize" start="266" end="269" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns an UpperCamelCase version of the supplied string. It trims surrounding spaces, capitalizes letters following digits, spaces, dashes and underscores, and removes spaces, dashes, underscores."/>
      <return description="Object with $str in UpperCamelCase" type="object">
        <type full="Stringy\Stringy" namespace="Stringy" name="Stringy"/>
      </return>
    </docblock>
  </method>
  <method name="dasherize" start="278" end="281" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns a lowercase and trimmed string separated by dashes. Dashes are inserted before uppercase characters (with the exception of the first character of the string), and in place of spaces as well as underscores."/>
      <return description="Object with a dasherized $str" type="object">
        <type full="Stringy\Stringy" namespace="Stringy" name="Stringy"/>
      </return>
    </docblock>
  </method>
  <method name="underscored" start="291" end="294" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns a lowercase and trimmed string separated by underscores.">Underscores are inserted before uppercase characters (with the exception
of the first character of the string), and in place of spaces as well as
dashes.</description>
      <return description="Object with an underscored $str" type="object">
        <type full="Stringy\Stringy" namespace="Stringy" name="Stringy"/>
      </return>
    </docblock>
  </method>
  <method name="delimit" start="305" end="318" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns a lowercase and trimmed string separated by the given delimiter.">Delimiters are inserted before uppercase characters (with the exception
of the first character of the string), and in place of spaces, dashes,
and underscores. Alpha delimiters are not converted to lowercase.</description>
      <param description="Sequence used to separate parts of the string" type="string" variable="$delimiter"/>
      <return description="Object with a delimited $str" type="object">
        <type full="Stringy\Stringy" namespace="Stringy" name="Stringy"/>
      </return>
    </docblock>
    <parameter name="delimiter" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="Save current regex encoding so we can reset it after" line="307"/>
    </inline>
  </method>
  <method name="swapCase" start="325" end="343" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns a case swapped version of the string."/>
      <return description="Object whose $str has each character's case swapped" type="object">
        <type full="Stringy\Stringy" namespace="Stringy" name="Stringy"/>
      </return>
    </docblock>
  </method>
  <method name="titleize" start="353" end="372" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns a trimmed string with the first letter of each word capitalized.">Ignores the case of other letters, preserving any acronyms. Also accepts
an array, $ignore, allowing you to list words not to be capitalized.</description>
      <param description="An array of words not to capitalize" type="array" variable="$ignore"/>
      <return description="Object with a titleized $str" type="object">
        <type full="Stringy\Stringy" namespace="Stringy" name="Stringy"/>
      </return>
    </docblock>
    <parameter name="ignore" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="humanize" start="380" end="385" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Capitalizes the first word of the string, replaces underscores with spaces, and strips '_id'."/>
      <return description="Object with a humanized $str" type="object">
        <type full="Stringy\Stringy" namespace="Stringy" name="Stringy"/>
      </return>
    </docblock>
  </method>
  <method name="tidy" start="394" end="409" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns a string with smart quotes, ellipsis characters, and dashes from Windows-1252 (commonly used in Word documents) replaced by their ASCII equivalents."/>
      <return description="Object whose $str has those characters removed" type="object">
        <type full="Stringy\Stringy" namespace="Stringy" name="Stringy"/>
      </return>
    </docblock>
  </method>
  <method name="collapseWhitespace" start="418" end="421" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Trims the string and replaces consecutive whitespace characters with a single space. This includes tabs and newline characters, as well as multibyte whitespace such as the thin space and ideographic space."/>
      <return description="Object with a trimmed $str and condensed whitespace" type="object">
        <type full="Stringy\Stringy" namespace="Stringy" name="Stringy"/>
      </return>
    </docblock>
  </method>
  <method name="toAscii" start="432" end="445" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns an ASCII version of the string. A set of non-ASCII characters are replaced with their closest ASCII counterparts, and the rest are removed unless instructed otherwise."/>
      <param description="Whether or not to remove the" type="object" variable="$removeUnsupported">unsupported characters<type full="Stringy\bool" namespace="Stringy" name="bool"/></param>
      <return description="Object whose $str contains only ASCII characters" type="object">
        <type full="Stringy\Stringy" namespace="Stringy" name="Stringy"/>
      </return>
    </docblock>
    <parameter name="removeUnsupported" byreference="false" type="boolean" default="true"/>
  </method>
  <method name="charsArray" start="452" end="580" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Returns the replacements for the toAscii() method."/>
      <return description="An array of replacements." type="array"/>
    </docblock>
  </method>
  <method name="pad" start="596" end="611" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Pads the string to a given length with $padStr. If length is less than or equal to the length of the string, no padding takes places. The default string used for padding is a space, and the default type (one of 'left', 'right', 'both') is 'right'. Throws an InvalidArgumentException if $padType isn't one of those 3 values."/>
      <param description="Desired string length after padding" type="int" variable="$length"/>
      <param description="String used to pad, defaults to space" type="string" variable="$padStr"/>
      <param description="One of 'left', 'right', 'both'" type="string" variable="$padType"/>
      <return description="Object with a padded $str" type="object">
        <type full="Stringy\Stringy" namespace="Stringy" name="Stringy"/>
      </return>
      <throws description="If $padType isn't one of 'right'," type="object">'left' or 'both'<type full="Stringy\InvalidArgumentException" namespace="Stringy" name="InvalidArgumentException"/></throws>
    </docblock>
    <parameter name="length" byreference="false" type="{unknown}"/>
    <parameter name="padStr" byreference="false" type="string" default="' '"/>
    <parameter name="padType" byreference="false" type="string" default="'right'"/>
  </method>
  <method name="padLeft" start="621" end="624" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns a new string of a given length such that the beginning of the string is padded. Alias for pad() with a $padType of 'left'."/>
      <param description="Desired string length after padding" type="int" variable="$length"/>
      <param description="String used to pad, defaults to space" type="string" variable="$padStr"/>
      <return description="String with left padding" type="object">
        <type full="Stringy\Stringy" namespace="Stringy" name="Stringy"/>
      </return>
    </docblock>
    <parameter name="length" byreference="false" type="{unknown}"/>
    <parameter name="padStr" byreference="false" type="string" default="' '"/>
  </method>
  <method name="padRight" start="634" end="637" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns a new string of a given length such that the end of the string is padded. Alias for pad() with a $padType of 'right'."/>
      <param description="Desired string length after padding" type="int" variable="$length"/>
      <param description="String used to pad, defaults to space" type="string" variable="$padStr"/>
      <return description="String with right padding" type="object">
        <type full="Stringy\Stringy" namespace="Stringy" name="Stringy"/>
      </return>
    </docblock>
    <parameter name="length" byreference="false" type="{unknown}"/>
    <parameter name="padStr" byreference="false" type="string" default="' '"/>
  </method>
  <method name="padBoth" start="647" end="653" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns a new string of a given length such that both sides of the string are padded. Alias for pad() with a $padType of 'both'."/>
      <param description="Desired string length after padding" type="int" variable="$length"/>
      <param description="String used to pad, defaults to space" type="string" variable="$padStr"/>
      <return description="String with padding applied" type="object">
        <type full="Stringy\Stringy" namespace="Stringy" name="Stringy"/>
      </return>
    </docblock>
    <parameter name="length" byreference="false" type="{unknown}"/>
    <parameter name="padStr" byreference="false" type="string" default="' '"/>
  </method>
  <method name="applyPadding" start="664" end="684" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Adds the specified amount of left and right padding to the given string.">The default character used is a space.</description>
      <param description="Length of left padding" type="int" variable="$left"/>
      <param description="Length of right padding" type="int" variable="$right"/>
      <param description="String used to pad" type="string" variable="$padStr"/>
      <return description="String with padding applied" type="object">
        <type full="Stringy\Stringy" namespace="Stringy" name="Stringy"/>
      </return>
    </docblock>
    <parameter name="left" byreference="false" type="integer" default="0"/>
    <parameter name="right" byreference="false" type="integer" default="0"/>
    <parameter name="padStr" byreference="false" type="string" default="' '"/>
  </method>
  <method name="startsWith" start="695" end="707" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns true if the string begins with $substring, false otherwise. By default, the comparison is case-sensitive, but can be made insensitive by setting $caseSensitive to false."/>
      <param description="The substring to look for" type="string" variable="$substring"/>
      <param description="Whether or not to enforce case-sensitivity" type="object" variable="$caseSensitive">
        <type full="Stringy\bool" namespace="Stringy" name="bool"/>
      </param>
      <return description="Whether or not $str starts with $substring" type="object">
        <type full="Stringy\bool" namespace="Stringy" name="bool"/>
      </return>
    </docblock>
    <parameter name="substring" byreference="false" type="{unknown}"/>
    <parameter name="caseSensitive" byreference="false" type="boolean" default="true"/>
  </method>
  <method name="endsWith" start="718" end="732" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns true if the string ends with $substring, false otherwise. By default, the comparison is case-sensitive, but can be made insensitive by setting $caseSensitive to false."/>
      <param description="The substring to look for" type="string" variable="$substring"/>
      <param description="Whether or not to enforce case-sensitivity" type="object" variable="$caseSensitive">
        <type full="Stringy\bool" namespace="Stringy" name="bool"/>
      </param>
      <return description="Whether or not $str ends with $substring" type="object">
        <type full="Stringy\bool" namespace="Stringy" name="bool"/>
      </return>
    </docblock>
    <parameter name="substring" byreference="false" type="{unknown}"/>
    <parameter name="caseSensitive" byreference="false" type="boolean" default="true"/>
  </method>
  <method name="toSpaces" start="741" end="747" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Converts each tab in the string to some number of spaces, as defined by $tabLength. By default, each tab is converted to 4 consecutive spaces."/>
      <param description="Number of spaces to replace each tab with" type="int" variable="$tabLength"/>
      <return description="Object whose $str has had tabs switched to spaces" type="object">
        <type full="Stringy\Stringy" namespace="Stringy" name="Stringy"/>
      </return>
    </docblock>
    <parameter name="tabLength" byreference="false" type="integer" default="4"/>
  </method>
  <method name="toTabs" start="757" end="763" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Converts each occurrence of some consecutive number of spaces, as defined by $tabLength, to a tab. By default, each 4 consecutive spaces are converted to a tab."/>
      <param description="Number of spaces to replace with a tab" type="int" variable="$tabLength"/>
      <return description="Object whose $str has had spaces switched to tabs" type="object">
        <type full="Stringy\Stringy" namespace="Stringy" name="Stringy"/>
      </return>
    </docblock>
    <parameter name="tabLength" byreference="false" type="integer" default="4"/>
  </method>
  <method name="toTitleCase" start="770" end="775" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Converts the first character of each word in the string to uppercase."/>
      <return description="Object with all characters of $str being title-cased" type="object">
        <type full="Stringy\Stringy" namespace="Stringy" name="Stringy"/>
      </return>
    </docblock>
  </method>
  <method name="toLowerCase" start="783" end="788" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Converts all characters in the string to lowercase. An alias for PHP's mb_strtolower()."/>
      <return description="Object with all characters of $str being lowercase" type="object">
        <type full="Stringy\Stringy" namespace="Stringy" name="Stringy"/>
      </return>
    </docblock>
  </method>
  <method name="toUpperCase" start="796" end="801" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Converts all characters in the string to uppercase. An alias for PHP's mb_strtoupper()."/>
      <return description="Object with all characters of $str being uppercase" type="object">
        <type full="Stringy\Stringy" namespace="Stringy" name="Stringy"/>
      </return>
    </docblock>
  </method>
  <method name="slugify" start="813" end="823" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Converts the string into an URL slug. This includes replacing non-ASCII characters with their closest ASCII equivalents, removing remaining non-ASCII and non-alphanumeric characters, and replacing whitespace with $replacement. The replacement defaults to a single dash, and the string is also converted to lowercase."/>
      <param description="The string used to replace whitespace" type="string" variable="$replacement"/>
      <return description="Object whose $str has been converted to an URL slug" type="object">
        <type full="Stringy\Stringy" namespace="Stringy" name="Stringy"/>
      </return>
    </docblock>
    <parameter name="replacement" byreference="false" type="string" default="'-'"/>
  </method>
  <method name="contains" start="834" end="843" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns true if the string contains $needle, false otherwise. By default the comparison is case-sensitive, but can be made insensitive by setting $caseSensitive to false."/>
      <param description="Substring to look for" type="string" variable="$needle"/>
      <param description="Whether or not to enforce case-sensitivity" type="object" variable="$caseSensitive">
        <type full="Stringy\bool" namespace="Stringy" name="bool"/>
      </param>
      <return description="Whether or not $str contains $needle" type="object">
        <type full="Stringy\bool" namespace="Stringy" name="bool"/>
      </return>
    </docblock>
    <parameter name="needle" byreference="false" type="{unknown}"/>
    <parameter name="caseSensitive" byreference="false" type="boolean" default="true"/>
  </method>
  <method name="containsAny" start="854" end="867" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns true if the string contains any $needles, false otherwise. By default the comparison is case-sensitive, but can be made insensitive by setting $caseSensitive to false."/>
      <param description="Substrings to look for" type="array" variable="$needles"/>
      <param description="Whether or not to enforce case-sensitivity" type="object" variable="$caseSensitive">
        <type full="Stringy\bool" namespace="Stringy" name="bool"/>
      </param>
      <return description="Whether or not $str contains $needle" type="object">
        <type full="Stringy\bool" namespace="Stringy" name="bool"/>
      </return>
    </docblock>
    <parameter name="needles" byreference="false" type="{unknown}"/>
    <parameter name="caseSensitive" byreference="false" type="boolean" default="true"/>
  </method>
  <method name="containsAll" start="878" end="891" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns true if the string contains all $needles, false otherwise. By default the comparison is case-sensitive, but can be made insensitive by setting $caseSensitive to false."/>
      <param description="Substrings to look for" type="array" variable="$needles"/>
      <param description="Whether or not to enforce case-sensitivity" type="object" variable="$caseSensitive">
        <type full="Stringy\bool" namespace="Stringy" name="bool"/>
      </param>
      <return description="Whether or not $str contains $needle" type="object">
        <type full="Stringy\bool" namespace="Stringy" name="bool"/>
      </return>
    </docblock>
    <parameter name="needles" byreference="false" type="{unknown}"/>
    <parameter name="caseSensitive" byreference="false" type="boolean" default="true"/>
  </method>
  <method name="indexOf" start="902" end="906" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the index of the first occurrence of $needle in the string, and false if not found. Accepts an optional offset from which to begin the search."/>
      <param description="Substring to look for" type="string" variable="$needle"/>
      <param description="Offset from which to search" type="int" variable="$offset"/>
      <return description="The occurrence's index if found, otherwise false" type="object">
        <type full="Stringy\int|bool" namespace="Stringy" name="int|bool"/>
      </return>
    </docblock>
    <parameter name="needle" byreference="false" type="{unknown}"/>
    <parameter name="offset" byreference="false" type="integer" default="0"/>
  </method>
  <method name="indexOfLast" start="917" end="921" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the index of the last occurrence of $needle in the string, and false if not found. Accepts an optional offset from which to begin the search."/>
      <param description="Substring to look for" type="string" variable="$needle"/>
      <param description="Offset from which to search" type="int" variable="$offset"/>
      <return description="The last occurrence's index if found, otherwise false" type="object">
        <type full="Stringy\int|bool" namespace="Stringy" name="int|bool"/>
      </return>
    </docblock>
    <parameter name="needle" byreference="false" type="{unknown}"/>
    <parameter name="offset" byreference="false" type="integer" default="0"/>
  </method>
  <method name="surround" start="930" end="935" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Surrounds $str with the given substring."/>
      <param description="The substring to add to both sides" type="string" variable="$substring"/>
      <return description="Object whose $str had the substring both prepended and" type="object">appended<type full="Stringy\Stringy" namespace="Stringy" name="Stringy"/></return>
    </docblock>
    <parameter name="substring" byreference="false" type="{unknown}"/>
  </method>
  <method name="insert" start="944" end="958" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Inserts $substring into the string at the $index provided."/>
      <param description="String to be inserted" type="string" variable="$substring"/>
      <param description="The index at which to insert the substring" type="int" variable="$index"/>
      <return description="Object with the resulting $str after the insertion" type="object">
        <type full="Stringy\Stringy" namespace="Stringy" name="Stringy"/>
      </return>
    </docblock>
    <parameter name="substring" byreference="false" type="{unknown}"/>
    <parameter name="index" byreference="false" type="{unknown}"/>
  </method>
  <method name="truncate" start="969" end="984" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Truncates the string to a given length. If $substring is provided, and truncating occurs, the string is further truncated so that the substring may be appended without exceeding the desired length."/>
      <param description="Desired length of the truncated string" type="int" variable="$length"/>
      <param description="The substring to append if it can fit" type="string" variable="$substring"/>
      <return description="Object with the resulting $str after truncating" type="object">
        <type full="Stringy\Stringy" namespace="Stringy" name="Stringy"/>
      </return>
    </docblock>
    <parameter name="length" byreference="false" type="{unknown}"/>
    <parameter name="substring" byreference="false" type="string" default="''"/>
    <inline>
      <comment value="Need to further trim the string so we can append the substring" line="976"/>
    </inline>
  </method>
  <method name="safeTruncate" start="996" end="1020" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Truncates the string to a given length, while ensuring that it does not split words. If $substring is provided, and truncating occurs, the string is further truncated so that the substring may be appended without exceeding the desired length."/>
      <param description="Desired length of the truncated string" type="int" variable="$length"/>
      <param description="The substring to append if it can fit" type="string" variable="$substring"/>
      <return description="Object with the resulting $str after truncating" type="object">
        <type full="Stringy\Stringy" namespace="Stringy" name="Stringy"/>
      </return>
    </docblock>
    <parameter name="length" byreference="false" type="{unknown}"/>
    <parameter name="substring" byreference="false" type="string" default="''"/>
    <inline>
      <comment value="Need to further trim the string so we can append the substring" line="1003"/>
      <comment value="If the last word was truncated" line="1010"/>
    </inline>
  </method>
  <method name="reverse" start="1027" end="1038" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns a reversed string. A multibyte version of strrev()."/>
      <return description="Object with a reversed $str" type="object">
        <type full="Stringy\Stringy" namespace="Stringy" name="Stringy"/>
      </return>
    </docblock>
    <inline>
      <comment value="Loop from last index of string to first" line="1032"/>
    </inline>
  </method>
  <method name="shuffle" start="1046" end="1057" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="A multibyte str_shuffle() function. It returns a string with its characters in random order."/>
      <return description="Object with a shuffled $str" type="object">
        <type full="Stringy\Stringy" namespace="Stringy" name="Stringy"/>
      </return>
    </docblock>
  </method>
  <method name="trim" start="1067" end="1072" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns a string with whitespace removed from the start and end of the string. Supports the removal of unicode whitespace. Accepts an optional string of characters to strip instead of the defaults."/>
      <param description="Optional string of characters to strip" type="string" variable="$chars"/>
      <return description="Object with a trimmed $str" type="object">
        <type full="Stringy\Stringy" namespace="Stringy" name="Stringy"/>
      </return>
    </docblock>
    <parameter name="chars" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="trimLeft" start="1082" end="1087" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns a string with whitespace removed from the start of the string.">Supports the removal of unicode whitespace. Accepts an optional
string of characters to strip instead of the defaults.</description>
      <param description="Optional string of characters to strip" type="string" variable="$chars"/>
      <return description="Object with a trimmed $str" type="object">
        <type full="Stringy\Stringy" namespace="Stringy" name="Stringy"/>
      </return>
    </docblock>
    <parameter name="chars" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="trimRight" start="1097" end="1102" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns a string with whitespace removed from the end of the string.">Supports the removal of unicode whitespace. Accepts an optional
string of characters to strip instead of the defaults.</description>
      <param description="Optional string of characters to strip" type="string" variable="$chars"/>
      <return description="Object with a trimmed $str" type="object">
        <type full="Stringy\Stringy" namespace="Stringy" name="Stringy"/>
      </return>
    </docblock>
    <parameter name="chars" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="longestCommonPrefix" start="1110" end="1127" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the longest common prefix between the string and $otherStr."/>
      <param description="Second string for comparison" type="string" variable="$otherStr"/>
      <return description="Object with its $str being the longest common prefix" type="object">
        <type full="Stringy\Stringy" namespace="Stringy" name="Stringy"/>
      </return>
    </docblock>
    <parameter name="otherStr" byreference="false" type="{unknown}"/>
  </method>
  <method name="longestCommonSuffix" start="1135" end="1152" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the longest common suffix between the string and $otherStr."/>
      <param description="Second string for comparison" type="string" variable="$otherStr"/>
      <return description="Object with its $str being the longest common suffix" type="object">
        <type full="Stringy\Stringy" namespace="Stringy" name="Stringy"/>
      </return>
    </docblock>
    <parameter name="otherStr" byreference="false" type="{unknown}"/>
  </method>
  <method name="longestCommonSubstring" start="1161" end="1201" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the longest common substring between the string and $otherStr.">In the case of ties, it returns that which occurs first.</description>
      <param description="Second string for comparison" type="string" variable="$otherStr"/>
      <return description="Object with its $str being the longest common substring" type="object">
        <type full="Stringy\Stringy" namespace="Stringy" name="Stringy"/>
      </return>
    </docblock>
    <parameter name="otherStr" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="Uses dynamic programming to solve" line="1163"/>
      <comment value="http://en.wikipedia.org/wiki/Longest_common_substring_problem" line="1164"/>
      <comment value="Return if either string is empty" line="1170"/>
    </inline>
  </method>
  <method name="length" start="1208" end="1211" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the length of the string. An alias for PHP's mb_strlen() function."/>
      <return description="The number of characters in $str given the encoding" type="int"/>
    </docblock>
  </method>
  <method name="substr" start="1222" end="1228" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the substring beginning at $start with the specified $length.">It differs from the mb_substr() function in that providing a $length of
null will return the rest of the string, rather than an empty string.</description>
      <param description="Position of the first character to use" type="int" variable="$start"/>
      <param description="Maximum number of characters used" type="int" variable="$length"/>
      <return description="Object with its $str being the substring" type="object">
        <type full="Stringy\Stringy" namespace="Stringy" name="Stringy"/>
      </return>
    </docblock>
    <parameter name="start" byreference="false" type="{unknown}"/>
    <parameter name="length" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="at" start="1236" end="1239" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the character at $index, with indexes starting at 0."/>
      <param description="Position of the character" type="int" variable="$index"/>
      <return description="The character at $index" type="object">
        <type full="Stringy\Stringy" namespace="Stringy" name="Stringy"/>
      </return>
    </docblock>
    <parameter name="index" byreference="false" type="{unknown}"/>
  </method>
  <method name="first" start="1247" end="1258" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the first $n characters of the string."/>
      <param description="Number of characters to retrieve from the start" type="int" variable="$n"/>
      <return description="Object with its $str being the first $n chars" type="object">
        <type full="Stringy\Stringy" namespace="Stringy" name="Stringy"/>
      </return>
    </docblock>
    <parameter name="n" byreference="false" type="{unknown}"/>
  </method>
  <method name="last" start="1266" end="1277" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the last $n characters of the string."/>
      <param description="Number of characters to retrieve from the end" type="int" variable="$n"/>
      <return description="Object with its $str being the last $n chars" type="object">
        <type full="Stringy\Stringy" namespace="Stringy" name="Stringy"/>
      </return>
    </docblock>
    <parameter name="n" byreference="false" type="{unknown}"/>
  </method>
  <method name="ensureLeft" start="1286" end="1295" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Ensures that the string begins with $substring. If it doesn't, it's prepended."/>
      <param description="The substring to add if not present" type="string" variable="$substring"/>
      <return description="Object with its $str prefixed by the $substring" type="object">
        <type full="Stringy\Stringy" namespace="Stringy" name="Stringy"/>
      </return>
    </docblock>
    <parameter name="substring" byreference="false" type="{unknown}"/>
  </method>
  <method name="ensureRight" start="1304" end="1313" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Ensures that the string begins with $substring. If it doesn't, it's appended."/>
      <param description="The substring to add if not present" type="string" variable="$substring"/>
      <return description="Object with its $str suffixed by the $substring" type="object">
        <type full="Stringy\Stringy" namespace="Stringy" name="Stringy"/>
      </return>
    </docblock>
    <parameter name="substring" byreference="false" type="{unknown}"/>
  </method>
  <method name="removeLeft" start="1321" end="1331" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns a new string with the prefix $substring removed, if present."/>
      <param description="The prefix to remove" type="string" variable="$substring"/>
      <return description="Object having a $str without the prefix $substring" type="object">
        <type full="Stringy\Stringy" namespace="Stringy" name="Stringy"/>
      </return>
    </docblock>
    <parameter name="substring" byreference="false" type="{unknown}"/>
  </method>
  <method name="removeRight" start="1339" end="1349" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns a new string with the suffix $substring removed, if present."/>
      <param description="The suffix to remove" type="string" variable="$substring"/>
      <return description="Object having a $str without the suffix $substring" type="object">
        <type full="Stringy\Stringy" namespace="Stringy" name="Stringy"/>
      </return>
    </docblock>
    <parameter name="substring" byreference="false" type="{unknown}"/>
  </method>
  <method name="matchesPattern" start="1357" end="1366" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Returns true if $str matches the supplied pattern, false otherwise."/>
      <param description="Regex pattern to match against" type="string" variable="$pattern"/>
      <return description="Whether or not $str matches the pattern" type="object">
        <type full="Stringy\bool" namespace="Stringy" name="bool"/>
      </return>
    </docblock>
    <parameter name="pattern" byreference="false" type="{unknown}"/>
  </method>
  <method name="hasLowerCase" start="1374" end="1377" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns true if the string contains a lower case char, false otherwise."/>
      <return description="Whether or not the string contains a lower case character." type="object">
        <type full="Stringy\bool" namespace="Stringy" name="bool"/>
      </return>
    </docblock>
  </method>
  <method name="hasUpperCase" start="1385" end="1388" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns true if the string contains an upper case char, false otherwise."/>
      <return description="Whether or not the string contains an upper case character." type="object">
        <type full="Stringy\bool" namespace="Stringy" name="bool"/>
      </return>
    </docblock>
  </method>
  <method name="isAlpha" start="1396" end="1399" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns true if the string contains only alphabetic chars, false otherwise."/>
      <return description="Whether or not $str contains only alphabetic chars" type="object">
        <type full="Stringy\bool" namespace="Stringy" name="bool"/>
      </return>
    </docblock>
  </method>
  <method name="isAlphanumeric" start="1407" end="1410" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns true if the string contains only alphabetic and numeric chars, false otherwise."/>
      <return description="Whether or not $str contains only alphanumeric chars" type="object">
        <type full="Stringy\bool" namespace="Stringy" name="bool"/>
      </return>
    </docblock>
  </method>
  <method name="isHexadecimal" start="1418" end="1421" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns true if the string contains only hexadecimal chars, false otherwise."/>
      <return description="Whether or not $str contains only hexadecimal chars" type="object">
        <type full="Stringy\bool" namespace="Stringy" name="bool"/>
      </return>
    </docblock>
  </method>
  <method name="isBlank" start="1429" end="1432" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns true if the string contains only whitespace chars, false otherwise."/>
      <return description="Whether or not $str contains only whitespace characters" type="object">
        <type full="Stringy\bool" namespace="Stringy" name="bool"/>
      </return>
    </docblock>
  </method>
  <method name="isJson" start="1439" end="1444" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns true if the string is JSON, false otherwise."/>
      <return description="Whether or not $str is JSON" type="object">
        <type full="Stringy\bool" namespace="Stringy" name="bool"/>
      </return>
    </docblock>
  </method>
  <method name="isLowerCase" start="1452" end="1455" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns true if the string contains only lower case chars, false otherwise."/>
      <return description="Whether or not $str contains only lower case characters" type="object">
        <type full="Stringy\bool" namespace="Stringy" name="bool"/>
      </return>
    </docblock>
  </method>
  <method name="isUpperCase" start="1463" end="1466" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns true if the string contains only lower case chars, false otherwise."/>
      <return description="Whether or not $str contains only lower case characters" type="object">
        <type full="Stringy\bool" namespace="Stringy" name="bool"/>
      </return>
    </docblock>
  </method>
  <method name="isSerialized" start="1473" end="1476" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns true if the string is serialized, false otherwise."/>
      <return description="Whether or not $str is serialized" type="object">
        <type full="Stringy\bool" namespace="Stringy" name="bool"/>
      </return>
    </docblock>
  </method>
  <method name="countSubstr" start="1487" end="1497" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the number of occurrences of $substring in the given string.">By default, the comparison is case-sensitive, but can be made insensitive
by setting $caseSensitive to false.</description>
      <param description="The substring to search for" type="string" variable="$substring"/>
      <param description="Whether or not to enforce case-sensitivity" type="object" variable="$caseSensitive">
        <type full="Stringy\bool" namespace="Stringy" name="bool"/>
      </param>
      <return description="The number of $substring occurrences" type="int"/>
    </docblock>
    <parameter name="substring" byreference="false" type="{unknown}"/>
    <parameter name="caseSensitive" byreference="false" type="boolean" default="true"/>
  </method>
  <method name="replace" start="1506" end="1509" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Replaces all occurrences of $search in $str by $replacement."/>
      <param description="The needle to search for" type="string" variable="$search"/>
      <param description="The string to replace with" type="string" variable="$replacement"/>
      <return description="Object with the resulting $str after the replacements" type="object">
        <type full="Stringy\Stringy" namespace="Stringy" name="Stringy"/>
      </return>
    </docblock>
    <parameter name="search" byreference="false" type="{unknown}"/>
    <parameter name="replacement" byreference="false" type="{unknown}"/>
  </method>
  <method name="regexReplace" start="1522" end="1531" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Replaces all occurrences of $pattern in $str by $replacement. An alias for mb_ereg_replace(). Note that the 'i' option with multibyte patterns in mb_ereg_replace() requires PHP 5.4+. This is due to a lack of support in the bundled version of Oniguruma in PHP 5.3."/>
      <param description="The regular expression pattern" type="string" variable="$pattern"/>
      <param description="The string to replace with" type="string" variable="$replacement"/>
      <param description="Matching conditions to be used" type="string" variable="$options"/>
      <return description="Object with the resulting $str after the replacements" type="object">
        <type full="Stringy\Stringy" namespace="Stringy" name="Stringy"/>
      </return>
    </docblock>
    <parameter name="pattern" byreference="false" type="{unknown}"/>
    <parameter name="replacement" byreference="false" type="{unknown}"/>
    <parameter name="options" byreference="false" type="string" default="'msr'"/>
  </method>
  <method name="htmlEncode" start="1539" end="1544" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Convert all applicable characters to HTML entities."/>
      <param description="See http://php.net/manual/en/function.htmlentities.php" type="object" variable="$flags">
        <type full="Stringy\int|null" namespace="Stringy" name="int|null"/>
      </param>
      <return description="Object with the resulting $str after being html encoded." type="object">
        <type full="Stringy\Stringy" namespace="Stringy" name="Stringy"/>
      </return>
    </docblock>
    <parameter name="flags" byreference="false" type="{unknown}" default="" constant="ENT_COMPAT"/>
  </method>
  <method name="htmlDecode" start="1552" end="1557" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Convert all HTML entities to their applicable characters."/>
      <param description="See http://php.net/manual/en/function.html-entity-decode.php" type="object" variable="$flags">
        <type full="Stringy\int|null" namespace="Stringy" name="int|null"/>
      </param>
      <return description="Object with the resulting $str after being html decoded." type="object">
        <type full="Stringy\Stringy" namespace="Stringy" name="Stringy"/>
      </return>
    </docblock>
    <parameter name="flags" byreference="false" type="{unknown}" default="" constant="ENT_COMPAT"/>
  </method>
</class>
