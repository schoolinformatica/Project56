<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="Symfony\Component\HttpKernel\Tests\Profiler\Mock\MemcacheMock" namespace="Symfony\Component\HttpKernel\Tests\Profiler\Mock" name="MemcacheMock" abstract="false" final="false" start="19" end="254">
  <file path="/home/robert/Desktop/Hogeschool/2ejaars Development/DevBOpdrachten/project56/http/laravel/vendor/symfony/http-kernel/Tests/Profiler/Mock" file="MemcacheMock.php" realpath="/home/robert/Desktop/Hogeschool/2ejaars Development/DevBOpdrachten/project56/http/laravel/vendor/symfony/http-kernel/Tests/Profiler/Mock/MemcacheMock.php" size="5221" time="2015-12-17T18:44:10+00:00" unixtime="1450377850" sha1="c829fe6acb93c006894f0d442468b2397570b480" relative="vendor/symfony/http-kernel/Tests/Profiler/Mock/MemcacheMock.php"/>
  <docblock>
    <description compact="MemcacheMock for simulating Memcache extension in tests."/>
    <author value="Andrej Hudec &lt;pulzarraider@gmail.com&gt;"/>
  </docblock>
  <member name="connected" type="boolean" default="false" visibility="private" line="21"/>
  <member name="storage" type="array" default="" visibility="private" line="22"/>
  <method name="connect" start="33" end="42" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Open memcached server connection."/>
      <param type="string" variable="$host"/>
      <param type="int" variable="$port"/>
      <param type="int" variable="$timeout"/>
      <return type="object">
        <type full="Symfony\Component\HttpKernel\Tests\Profiler\Mock\bool" namespace="Symfony\Component\HttpKernel\Tests\Profiler\Mock" name="bool"/>
      </return>
    </docblock>
    <parameter name="host" byreference="false" type="{unknown}"/>
    <parameter name="port" byreference="false" type="{unknown}" default="" constant="null"/>
    <parameter name="timeout" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="pconnect" start="53" end="62" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Open memcached server persistent connection."/>
      <param type="string" variable="$host"/>
      <param type="int" variable="$port"/>
      <param type="int" variable="$timeout"/>
      <return type="object">
        <type full="Symfony\Component\HttpKernel\Tests\Profiler\Mock\bool" namespace="Symfony\Component\HttpKernel\Tests\Profiler\Mock" name="bool"/>
      </return>
    </docblock>
    <parameter name="host" byreference="false" type="{unknown}"/>
    <parameter name="port" byreference="false" type="{unknown}" default="" constant="null"/>
    <parameter name="timeout" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="addServer" start="79" end="88" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Add a memcached server to connection pool."/>
      <param type="string" variable="$host"/>
      <param type="int" variable="$port"/>
      <param type="object" variable="$persistent">
        <type full="Symfony\Component\HttpKernel\Tests\Profiler\Mock\bool" namespace="Symfony\Component\HttpKernel\Tests\Profiler\Mock" name="bool"/>
      </param>
      <param type="int" variable="$weight"/>
      <param type="int" variable="$timeout"/>
      <param type="int" variable="$retry_interval"/>
      <param type="object" variable="$status">
        <type full="Symfony\Component\HttpKernel\Tests\Profiler\Mock\bool" namespace="Symfony\Component\HttpKernel\Tests\Profiler\Mock" name="bool"/>
      </param>
      <param type="object" variable="$failure_callback">
        <type full="Symfony\Component\HttpKernel\Tests\Profiler\Mock\callable" namespace="Symfony\Component\HttpKernel\Tests\Profiler\Mock" name="callable"/>
      </param>
      <param type="int" variable="$timeoutms"/>
      <return type="object">
        <type full="Symfony\Component\HttpKernel\Tests\Profiler\Mock\bool" namespace="Symfony\Component\HttpKernel\Tests\Profiler\Mock" name="bool"/>
      </return>
    </docblock>
    <parameter name="host" byreference="false" type="{unknown}"/>
    <parameter name="port" byreference="false" type="integer" default="11211"/>
    <parameter name="persistent" byreference="false" type="{unknown}" default="" constant="null"/>
    <parameter name="weight" byreference="false" type="{unknown}" default="" constant="null"/>
    <parameter name="timeout" byreference="false" type="{unknown}" default="" constant="null"/>
    <parameter name="retry_interval" byreference="false" type="{unknown}" default="" constant="null"/>
    <parameter name="status" byreference="false" type="{unknown}" default="" constant="null"/>
    <parameter name="failure_callback" byreference="false" type="{unknown}" default="" constant="null"/>
    <parameter name="timeoutms" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="add" start="100" end="113" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Add an item to the server only if such key doesn't exist at the server yet."/>
      <param type="string" variable="$key"/>
      <param type="mixed" variable="$var"/>
      <param type="int" variable="$flag"/>
      <param type="int" variable="$expire"/>
      <return type="object">
        <type full="Symfony\Component\HttpKernel\Tests\Profiler\Mock\bool" namespace="Symfony\Component\HttpKernel\Tests\Profiler\Mock" name="bool"/>
      </return>
    </docblock>
    <parameter name="key" byreference="false" type="{unknown}"/>
    <parameter name="var" byreference="false" type="{unknown}"/>
    <parameter name="flag" byreference="false" type="{unknown}" default="" constant="null"/>
    <parameter name="expire" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="set" start="125" end="134" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Store data at the server."/>
      <param type="string" variable="$key"/>
      <param type="string" variable="$var"/>
      <param type="int" variable="$flag"/>
      <param type="int" variable="$expire"/>
      <return type="object">
        <type full="Symfony\Component\HttpKernel\Tests\Profiler\Mock\bool" namespace="Symfony\Component\HttpKernel\Tests\Profiler\Mock" name="bool"/>
      </return>
    </docblock>
    <parameter name="key" byreference="false" type="{unknown}"/>
    <parameter name="var" byreference="false" type="{unknown}"/>
    <parameter name="flag" byreference="false" type="{unknown}" default="" constant="null"/>
    <parameter name="expire" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="replace" start="146" end="159" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Replace value of the existing item."/>
      <param type="string" variable="$key"/>
      <param type="mixed" variable="$var"/>
      <param type="int" variable="$flag"/>
      <param type="int" variable="$expire"/>
      <return type="object">
        <type full="Symfony\Component\HttpKernel\Tests\Profiler\Mock\bool" namespace="Symfony\Component\HttpKernel\Tests\Profiler\Mock" name="bool"/>
      </return>
    </docblock>
    <parameter name="key" byreference="false" type="{unknown}"/>
    <parameter name="var" byreference="false" type="{unknown}"/>
    <parameter name="flag" byreference="false" type="{unknown}" default="" constant="null"/>
    <parameter name="expire" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="get" start="169" end="187" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Retrieve item from the server."/>
      <param type="object" variable="$key">
        <type full="Symfony\Component\HttpKernel\Tests\Profiler\Mock\string|array" namespace="Symfony\Component\HttpKernel\Tests\Profiler\Mock" name="string|array"/>
      </param>
      <param type="object" variable="$flags">
        <type full="Symfony\Component\HttpKernel\Tests\Profiler\Mock\int|array" namespace="Symfony\Component\HttpKernel\Tests\Profiler\Mock" name="int|array"/>
      </param>
      <return type="mixed"/>
    </docblock>
    <parameter name="key" byreference="false" type="{unknown}"/>
    <parameter name="flags" byreference="true" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="delete" start="196" end="209" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Delete item from the server."/>
      <param type="string" variable="$key"/>
      <return type="object">
        <type full="Symfony\Component\HttpKernel\Tests\Profiler\Mock\bool" namespace="Symfony\Component\HttpKernel\Tests\Profiler\Mock" name="bool"/>
      </return>
    </docblock>
    <parameter name="key" byreference="false" type="{unknown}"/>
  </method>
  <method name="flush" start="216" end="225" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Flush all existing items at the server."/>
      <return type="object">
        <type full="Symfony\Component\HttpKernel\Tests\Profiler\Mock\bool" namespace="Symfony\Component\HttpKernel\Tests\Profiler\Mock" name="bool"/>
      </return>
    </docblock>
  </method>
  <method name="close" start="232" end="237" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Close memcached server connection."/>
      <return type="object">
        <type full="Symfony\Component\HttpKernel\Tests\Profiler\Mock\bool" namespace="Symfony\Component\HttpKernel\Tests\Profiler\Mock" name="bool"/>
      </return>
    </docblock>
  </method>
  <method name="getData" start="239" end="246" abstract="false" final="false" static="false" visibility="private">
    <parameter name="key" byreference="false" type="{unknown}"/>
  </method>
  <method name="storeData" start="248" end="253" abstract="false" final="false" static="false" visibility="private">
    <parameter name="key" byreference="false" type="{unknown}"/>
    <parameter name="value" byreference="false" type="{unknown}"/>
  </method>
</class>
