<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="Symfony\Component\HttpKernel\Fragment\FragmentHandler" namespace="Symfony\Component\HttpKernel\Fragment" name="FragmentHandler" abstract="false" final="false" start="35" end="150">
  <file path="/home/robert/Desktop/Hogeschool/2ejaars Development/DevBOpdrachten/project56/http/laravel/vendor/symfony/http-kernel/Fragment" file="FragmentHandler.php" realpath="/home/robert/Desktop/Hogeschool/2ejaars Development/DevBOpdrachten/project56/http/laravel/vendor/symfony/http-kernel/Fragment/FragmentHandler.php" size="5131" time="2015-12-17T18:44:10+00:00" unixtime="1450377850" sha1="7f40bb7efc5dc337c481ead05e773ce09579481c" relative="vendor/symfony/http-kernel/Fragment/FragmentHandler.php"/>
  <docblock>
    <description compact="Renders a URI that represents a resource fragment.">This class handles the rendering of resource fragments that are included into
a main resource. The handling of the rendering is managed by specialized renderers.

This listener works in 2 modes:

 * 2.3 compatibility mode where you must call setRequest whenever the Request changes.
 * 2.4+ mode where you must pass a RequestStack instance in the constructor.</description>
    <author value="Fabien Potencier &lt;fabien@symfony.com&gt;"/>
    <see value="FragmentRendererInterface"/>
  </docblock>
  <member name="debug" visibility="private" line="37"/>
  <member name="renderers" type="array" default="" visibility="private" line="38"/>
  <member name="request" visibility="private" line="39"/>
  <member name="requestStack" visibility="private" line="40"/>
  <constructor name="__construct" start="51" end="58" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Constructor.">RequestStack will become required in 3.0.</description>
      <param description="An array of FragmentRendererInterface instances" type="array" variable="$renderers" of="object">
        <type full="Symfony\Component\HttpKernel\Fragment\FragmentRendererInterface" namespace="Symfony\Component\HttpKernel\Fragment" name="FragmentRendererInterface"/>
      </param>
      <param description="Whether the debug mode is enabled or not" type="object" variable="$debug">
        <type full="Symfony\Component\HttpKernel\Fragment\bool" namespace="Symfony\Component\HttpKernel\Fragment" name="bool"/>
      </param>
      <param description="The Request stack that controls the lifecycle of requests" type="object" variable="$requestStack">
        <type full="Symfony\Component\HttpKernel\Fragment\RequestStack|null" namespace="Symfony\Component\HttpKernel\Fragment" name="RequestStack|null"/>
      </param>
    </docblock>
    <parameter name="renderers" byreference="false" type="array" default=""/>
    <parameter name="debug" byreference="false" type="boolean" default="false"/>
    <parameter name="requestStack" byreference="false" type="{unknown}" default="" constant="null">
      <type full="Symfony\Component\HttpFoundation\RequestStack" namespace="Symfony\Component\HttpFoundation" name="RequestStack"/>
    </parameter>
  </constructor>
  <method name="addRenderer" start="65" end="68" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Adds a renderer."/>
      <param description="A FragmentRendererInterface instance" type="object" variable="$renderer">
        <type full="Symfony\Component\HttpKernel\Fragment\FragmentRendererInterface" namespace="Symfony\Component\HttpKernel\Fragment" name="FragmentRendererInterface"/>
      </param>
    </docblock>
    <parameter name="renderer" byreference="false" type="object">
      <type full="Symfony\Component\HttpKernel\Fragment\FragmentRendererInterface" namespace="Symfony\Component\HttpKernel\Fragment" name="FragmentRendererInterface"/>
    </parameter>
  </method>
  <method name="setRequest" start="81" end="86" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Sets the current Request.">This method was used to synchronize the Request, but as the HttpKernel
is doing that automatically now, you should never call it directly.
It is kept public for BC with the 2.3 version.</description>
      <param description="A Request instance" type="object" variable="$request">
        <type full="Symfony\Component\HttpKernel\Fragment\Request|null" namespace="Symfony\Component\HttpKernel\Fragment" name="Request|null"/>
      </param>
      <deprecated value="since version 2.4, to be removed in 3.0."/>
    </docblock>
    <parameter name="request" byreference="false" type="{unknown}" default="" constant="null">
      <type full="Symfony\Component\HttpFoundation\Request" namespace="Symfony\Component\HttpFoundation" name="Request"/>
    </parameter>
  </method>
  <method name="render" start="104" end="119" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Renders a URI and returns the Response content.">Available options:

 * ignore_errors: true to return an empty string in case of an error</description>
      <param description="A URI as a string or a ControllerReference instance" type="object" variable="$uri">
        <type full="Symfony\Component\HttpKernel\Fragment\string|ControllerReference" namespace="Symfony\Component\HttpKernel\Fragment" name="string|ControllerReference"/>
      </param>
      <param description="The renderer name" type="string" variable="$renderer"/>
      <param description="An array of options" type="array" variable="$options"/>
      <return description="The Response content or null when the Response is streamed" type="object">
        <type full="Symfony\Component\HttpKernel\Fragment\string|null" namespace="Symfony\Component\HttpKernel\Fragment" name="string|null"/>
      </return>
      <throws description="when the renderer does not exist" type="object">
        <type full="\InvalidArgumentException" namespace="" name="InvalidArgumentException"/>
      </throws>
      <throws description="when no master request is being handled" type="object">
        <type full="\LogicException" namespace="" name="LogicException"/>
      </throws>
    </docblock>
    <parameter name="uri" byreference="false" type="{unknown}"/>
    <parameter name="renderer" byreference="false" type="string" default="'inline'"/>
    <parameter name="options" byreference="false" type="array" default=""/>
  </method>
  <method name="deliver" start="133" end="144" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Delivers the Response as a string.">When the Response is a StreamedResponse, the content is streamed immediately
instead of being returned.</description>
      <param description="A Response instance" type="object" variable="$response">
        <type full="Symfony\Component\HttpFoundation\Response" namespace="Symfony\Component\HttpFoundation" name="Response"/>
      </param>
      <return description="The Response content or null when the Response is streamed" type="object">
        <type full="Symfony\Component\HttpKernel\Fragment\string|null" namespace="Symfony\Component\HttpKernel\Fragment" name="string|null"/>
      </return>
      <throws description="when the Response is not successful" type="object">
        <type full="\RuntimeException" namespace="" name="RuntimeException"/>
      </throws>
    </docblock>
    <parameter name="response" byreference="false" type="object">
      <type full="Symfony\Component\HttpFoundation\Response" namespace="Symfony\Component\HttpFoundation" name="Response"/>
    </parameter>
  </method>
  <method name="getRequest" start="146" end="149" abstract="false" final="false" static="false" visibility="private"/>
</class>
