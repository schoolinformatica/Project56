<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="Symfony\Component\HttpFoundation\Session\Storage\Handler\PdoSessionHandler" namespace="Symfony\Component\HttpFoundation\Session\Storage\Handler" name="PdoSessionHandler" abstract="false" final="false" start="41" end="695">
  <file path="/home/robert/Desktop/Hogeschool/2ejaars Development/DevBOpdrachten/project56/http/laravel/vendor/symfony/http-foundation/Session/Storage/Handler" file="PdoSessionHandler.php" realpath="/home/robert/Desktop/Hogeschool/2ejaars Development/DevBOpdrachten/project56/http/laravel/vendor/symfony/http-foundation/Session/Storage/Handler/PdoSessionHandler.php" size="28290" time="2015-12-17T18:44:10+00:00" unixtime="1450377850" sha1="acfc13ba03a7917d9728c96628238b6dd430ca79" relative="vendor/symfony/http-foundation/Session/Storage/Handler/PdoSessionHandler.php"/>
  <docblock>
    <description compact="Session handler using a PDO connection to read and write data.">It works with MySQL, PostgreSQL, Oracle, SQL Server and SQLite and implements
different locking strategies to handle concurrent access to the same session.
Locking is necessary to prevent loss of data due to race conditions and to keep
the session data consistent between read() and write(). With locking, requests
for the same session will wait until the other one finished writing. For this
reason it's best practice to close a session as early as possible to improve
concurrency. PHPs internal files session handler also implements locking.

Attention: Since SQLite does not support row level locks but locks the whole database,
it means only one session can be accessed at a time. Even different sessions would wait
for another to finish. So saving session in SQLite should only be considered for
development or prototypes.

Session data is a binary string that can contain non-printable characters like the null byte.
For this reason it must be saved in a binary column in the database like BLOB in MySQL.
Saving it in a character column could corrupt the data. You can use createTable()
to initialize a correctly defined table.</description>
    <see value="http://php.net/sessionhandlerinterface"/>
    <author value="Fabien Potencier &lt;fabien@symfony.com&gt;"/>
    <author value="Michael Williams &lt;michael.williams@funsational.com&gt;"/>
    <author value="Tobias Schultze &lt;http://tobion.de&gt;"/>
  </docblock>
  <implements full="SessionHandlerInterface" namespace="" name="SessionHandlerInterface"/>
  <constant type="integer" name="LOCK_NONE" value="0">
    <docblock>
      <description compact="No locking is done. This means sessions are prone to loss of data due to race conditions of concurrent requests to the same session. The last session write will win in this case. It might be useful when you implement your own logic to deal with this like an optimistic approach."/>
    </docblock>
  </constant>
  <constant type="integer" name="LOCK_ADVISORY" value="1">
    <docblock>
      <description compact="Creates an application-level lock on a session. The disadvantage is that the lock is not enforced by the database and thus other, unaware parts of the application could still concurrently modify the session. The advantage is it does not require a transaction.">This mode is not available for SQLite and not yet implemented for oci and sqlsrv.</description>
    </docblock>
  </constant>
  <constant type="integer" name="LOCK_TRANSACTIONAL" value="2">
    <docblock>
      <description compact="Issues a real row lock. Since it uses a transaction between opening and closing a session, you have to be careful when you use same database connection that you also use for your application logic. This mode is the default because it's the only reliable solution across DBMSs."/>
    </docblock>
  </constant>
  <member name="pdo" visibility="private" line="71">
    <docblock>
      <description/>
      <var description="PDO instance or null when not connected yet" type="object">
        <type full="\PDO|null" namespace="" name="PDO|null"/>
      </var>
    </docblock>
  </member>
  <member name="dsn" type="boolean" default="false" visibility="private" line="76">
    <docblock>
      <description/>
      <var description="DSN string or null for session.save_path or false when lazy connection disabled" type="object">
        <type full="Symfony\Component\HttpFoundation\Session\Storage\Handler\string|null|false" namespace="Symfony\Component\HttpFoundation\Session\Storage\Handler" name="string|null|false"/>
      </var>
    </docblock>
  </member>
  <member name="driver" visibility="private" line="81">
    <docblock>
      <description/>
      <var description="Database driver" type="string"/>
    </docblock>
  </member>
  <member name="table" type="string" default="'sessions'" visibility="private" line="86">
    <docblock>
      <description/>
      <var description="Table name" type="string"/>
    </docblock>
  </member>
  <member name="idCol" type="string" default="'sess_id'" visibility="private" line="91">
    <docblock>
      <description/>
      <var description="Column for session id" type="string"/>
    </docblock>
  </member>
  <member name="dataCol" type="string" default="'sess_data'" visibility="private" line="96">
    <docblock>
      <description/>
      <var description="Column for session data" type="string"/>
    </docblock>
  </member>
  <member name="lifetimeCol" type="string" default="'sess_lifetime'" visibility="private" line="101">
    <docblock>
      <description/>
      <var description="Column for lifetime" type="string"/>
    </docblock>
  </member>
  <member name="timeCol" type="string" default="'sess_time'" visibility="private" line="106">
    <docblock>
      <description/>
      <var description="Column for timestamp" type="string"/>
    </docblock>
  </member>
  <member name="username" type="string" default="''" visibility="private" line="111">
    <docblock>
      <description/>
      <var description="Username when lazy-connect" type="string"/>
    </docblock>
  </member>
  <member name="password" type="string" default="''" visibility="private" line="116">
    <docblock>
      <description/>
      <var description="Password when lazy-connect" type="string"/>
    </docblock>
  </member>
  <member name="connectionOptions" type="array" default="" visibility="private" line="121">
    <docblock>
      <description/>
      <var description="Connection options when lazy-connect" type="array"/>
    </docblock>
  </member>
  <member name="lockMode" type="{unknown}" default="" constant="self::LOCK_TRANSACTIONAL" visibility="private" line="126">
    <docblock>
      <description/>
      <var description="The strategy for locking, see constants" type="int"/>
    </docblock>
  </member>
  <member name="unlockStatements" type="array" default="" visibility="private" line="133">
    <docblock>
      <description compact="It's an array to support multiple reads before closing which is manual, non-standard usage."/>
      <var description="An array of statements to release advisory locks" type="array" of="object">
        <type full="\PDOStatement" namespace="" name="PDOStatement"/>
      </var>
    </docblock>
  </member>
  <member name="sessionExpired" type="boolean" default="false" visibility="private" line="138">
    <docblock>
      <description/>
      <var description="True when the current session exists but expired according to session.gc_maxlifetime" type="object">
        <type full="Symfony\Component\HttpFoundation\Session\Storage\Handler\bool" namespace="Symfony\Component\HttpFoundation\Session\Storage\Handler" name="bool"/>
      </var>
    </docblock>
  </member>
  <member name="inTransaction" type="boolean" default="false" visibility="private" line="143">
    <docblock>
      <description/>
      <var description="Whether a transaction is active" type="object">
        <type full="Symfony\Component\HttpFoundation\Session\Storage\Handler\bool" namespace="Symfony\Component\HttpFoundation\Session\Storage\Handler" name="bool"/>
      </var>
    </docblock>
  </member>
  <member name="gcCalled" type="boolean" default="false" visibility="private" line="148">
    <docblock>
      <description/>
      <var description="Whether gc() has been called" type="object">
        <type full="Symfony\Component\HttpFoundation\Session\Storage\Handler\bool" namespace="Symfony\Component\HttpFoundation\Session\Storage\Handler" name="bool"/>
      </var>
    </docblock>
  </member>
  <constructor name="__construct" start="174" end="196" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Constructor.">You can either pass an existing database connection as PDO instance or
pass a DSN string that will be used to lazy-connect to the database
when the session is actually used. Furthermore it's possible to pass null
which will then use the session.save_path ini setting as PDO DSN parameter.

List of available options:
 * db_table: The name of the table [default: sessions]
 * db_id_col: The column where to store the session id [default: sess_id]
 * db_data_col: The column where to store the session data [default: sess_data]
 * db_lifetime_col: The column where to store the lifetime [default: sess_lifetime]
 * db_time_col: The column where to store the timestamp [default: sess_time]
 * db_username: The username when lazy-connect [default: '']
 * db_password: The password when lazy-connect [default: '']
 * db_connection_options: An array of driver-specific connection options [default: array()]
 * lock_mode: The strategy for locking, see constants [default: LOCK_TRANSACTIONAL]</description>
      <param description="A \PDO instance or DSN string or null" type="object" variable="$pdoOrDsn">
        <type full="\PDO|string|null" namespace="" name="PDO|string|null"/>
      </param>
      <param description="An associative array of options" type="array" variable="$options"/>
      <throws description="When PDO error mode is not PDO::ERRMODE_EXCEPTION" type="object">
        <type full="\InvalidArgumentException" namespace="" name="InvalidArgumentException"/>
      </throws>
    </docblock>
    <parameter name="pdoOrDsn" byreference="false" type="{unknown}" default="" constant="null"/>
    <parameter name="options" byreference="false" type="array" default=""/>
  </constructor>
  <method name="createTable" start="209" end="246" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Creates the table to store sessions which can be called once for setup.">Session ID is saved in a column of maximum length 128 because that is enough even
for a 512 bit configured session.hash_function like Whirlpool. Session data is
saved in a BLOB. One could also use a shorter inlined varbinary column
if one was sure the data fits into it.</description>
      <throws description="When the table already exists" type="object">
        <type full="\PDOException" namespace="" name="PDOException"/>
      </throws>
      <throws description="When an unsupported PDO driver is used" type="object">
        <type full="\DomainException" namespace="" name="DomainException"/>
      </throws>
    </docblock>
    <inline>
      <comment value="connect if we are not yet" line="211"/>
    </inline>
  </method>
  <method name="isSessionExpired" start="255" end="258" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns true when the current session exists but expired according to session.gc_maxlifetime.">Can be used to distinguish between a new session and one that expired due to inactivity.</description>
      <return description="Whether current session expired" type="object">
        <type full="Symfony\Component\HttpFoundation\Session\Storage\Handler\bool" namespace="Symfony\Component\HttpFoundation\Session\Storage\Handler" name="bool"/>
      </return>
    </docblock>
  </method>
  <method name="open" start="263" end="270" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="{@inheritdoc}"/>
    </docblock>
    <parameter name="savePath" byreference="false" type="{unknown}"/>
    <parameter name="sessionName" byreference="false" type="{unknown}"/>
  </method>
  <method name="read" start="275" end="284" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="{@inheritdoc}"/>
    </docblock>
    <parameter name="sessionId" byreference="false" type="{unknown}"/>
  </method>
  <method name="gc" start="289" end="296" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="{@inheritdoc}"/>
    </docblock>
    <parameter name="maxlifetime" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="We delay gc() to close() so that it is executed outside the transactional and blocking read-write process." line="291"/>
      <comment value="This way, pruning expired sessions does not block them from being started while the current session is used." line="292"/>
    </inline>
  </method>
  <method name="destroy" start="301" end="317" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="{@inheritdoc}"/>
    </docblock>
    <parameter name="sessionId" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="delete the record associated with this id" line="303"/>
    </inline>
  </method>
  <method name="write" start="322" end="381" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="{@inheritdoc}"/>
    </docblock>
    <parameter name="sessionId" byreference="false" type="{unknown}"/>
    <parameter name="data" byreference="false" type="{unknown}"/>
  </method>
  <method name="close" start="386" end="410" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="{@inheritdoc}"/>
    </docblock>
  </method>
  <method name="connect" start="417" end="422" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Lazy-connects to the database."/>
      <param description="DSN string" type="string" variable="$dsn"/>
    </docblock>
    <parameter name="dsn" byreference="false" type="{unknown}"/>
  </method>
  <method name="beginTransaction" start="436" end="449" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Helper method to begin a transaction.">Since SQLite does not support row level locks, we have to acquire a reserved lock
on the database immediately. Because of https://bugs.php.net/42766 we have to create
such a transaction manually which also means we cannot use PDO::commit or
PDO::rollback or PDO::inTransaction for SQLite.

Also MySQLs default isolation, REPEATABLE READ, causes deadlock for different sessions
due to http://www.mysqlperformanceblog.com/2013/12/12/one-more-innodb-gap-lock-to-avoid/ .
So we change it to READ COMMITTED.</description>
    </docblock>
  </method>
  <method name="commit" start="454" end="471" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Helper method to commit a transaction."/>
    </docblock>
  </method>
  <method name="rollback" start="476" end="490" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Helper method to rollback a transaction."/>
    </docblock>
    <inline>
      <comment value="We only need to rollback if we are in a transaction. Otherwise the resulting" line="478"/>
      <comment value="error would hide the real problem why rollback was called. We might not be" line="479"/>
      <comment value="in a transaction when not using the transactional locking behavior or when" line="480"/>
      <comment value="two callbacks (e.g. destroy and write) are invoked that both fail." line="481"/>
    </inline>
  </method>
  <method name="doRead" start="502" end="561" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Reads the session data in respect to the different locking strategies.">We need to make sure we do not return session data that is already considered garbage according
to the session.gc_maxlifetime setting because gc() is called after read() and only sometimes.</description>
      <param description="Session ID" type="string" variable="$sessionId"/>
      <return description="The session data" type="string"/>
    </docblock>
    <parameter name="sessionId" byreference="false" type="{unknown}"/>
  </method>
  <method name="doAdvisoryLock" start="576" end="623" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Executes an application-level lock on the database."/>
      <param description="Session ID" type="string" variable="$sessionId"/>
      <return description="The statement that needs to be executed later to release the lock" type="object">
        <type full="\PDOStatement" namespace="" name="PDOStatement"/>
      </return>
      <throws description="When an unsupported PDO driver is used" type="object">
        <type full="\DomainException" namespace="" name="DomainException"/>
      </throws>
      <todo value="implement missing advisory locks">- for oci using DBMS_LOCK.REQUEST
      - for sqlsrv using sp_getapplock with LockOwner = Session</todo>
    </docblock>
    <parameter name="sessionId" byreference="false" type="{unknown}"/>
  </method>
  <method name="getSelectSql" start="632" end="653" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Return a locking or nonlocking SQL query to read session information."/>
      <return description="The SQL string" type="string"/>
      <throws description="When an unsupported PDO driver is used" type="object">
        <type full="\DomainException" namespace="" name="DomainException"/>
      </throws>
    </docblock>
  </method>
  <method name="getMergeSql" start="660" end="680" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Returns a merge/upsert (i.e. insert or update) SQL query when supported by the database for writing session data."/>
      <return description="The SQL string or null when not supported" type="object">
        <type full="Symfony\Component\HttpFoundation\Session\Storage\Handler\string|null" namespace="Symfony\Component\HttpFoundation\Session\Storage\Handler" name="string|null"/>
      </return>
    </docblock>
  </method>
  <method name="getConnection" start="687" end="694" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Return a PDO instance."/>
      <return type="object">
        <type full="\PDO" namespace="" name="PDO"/>
      </return>
    </docblock>
  </method>
</class>
